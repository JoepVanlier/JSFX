desc:Ripple
tags: Ripple (work in progress | not ready for use!)
version: 0.04
author: Joep Vanlier
changelog: Fix bug with ripple widgets (some renaming was required to prevent file shadowing). Add run length encoding to pattern data.
provides: Ripple_dependencies/*
license: MIT

import ripple_widgets.jsfx-inc

@init
seq_position = 0;
current_sample = 0;

function rep_scale(from, to, N, shift)
  local()
  globals()
  instance()
  (
    loop(N,
      to[] = from[] + shift;
      to += 1;
      from += 1;
    );
  );
  

function gen_scale(addr, scale)
  globals()
  instance()
  local(tones, idx)
  (
    (scale == 0) ? (
      // Major / Ionian
      addr[0] = 0;
      addr[1] = 2;
      addr[2] = 4;
      addr[3] = 5;
      addr[4] = 7;
      addr[5] = 9;
      addr[6] = 11;
      addr[7] = 12;      
      tones = 8;
    ) : ( scale == 1 ) ? (  
      // Minor / Aeolian
      addr[0] = 0;
      addr[1] = 2;
      addr[2] = 3;
      addr[3] = 5;
      addr[4] = 7;
      addr[5] = 8;
      addr[6] = 10;
      addr[7] = 12;
      tones = 8;      
    ) : ( scale == 2 ) ? (
      // Major pentatonic
      addr[0] = 0;
      addr[1] = 2;
      addr[2] = 4;
      addr[3] = 7;
      addr[4] = 9;
      tones = 5;
    ) : ( scale == 3 ) ? (
      // Minor pentatonic
      addr[0] = 0;
      addr[1] = 3;
      addr[2] = 5;
      addr[3] = 7;
      addr[4] = 10;
      tones = 5;
    ) : ( scale == 4 ) ? (
      // Blues minor / man gong
      addr[0] = 0;
      addr[1] = 3;
      addr[2] = 5;
      addr[3] = 8;
      addr[4] = 10;
      tones = 5;
    );
    
    idx = 0;
    loop(8,
      rep_scale(addr + idx*tones, addr + (idx+1)*tones, tones, 12);
      idx += 1;
    ); 
  );
  
function gen_picker(chord_addr, set)
  globals()
  local()
  instance()
  (
    (set == 0) ? (
      // Major ninth
      chord_addr[0] = 5;
      chord_addr[1] = 2;
      chord_addr[2] = 2;
      chord_addr[3] = 2;
      chord_addr[4] = 2;
    ) : (set==1) ? (
      // Sus
      chord_addr[0] = 4;
      chord_addr[1] = 3;
      chord_addr[2] = 1;
      chord_addr[3] = 2;
    ) : (set==2) ? (
      // Sixth
      chord_addr[0] = 4;
      chord_addr[1] = 2;
      chord_addr[2] = 2;
      chord_addr[3] = 1;
    ) : (set==3) ? (
      // 
      chord_addr[0] = 3;
      chord_addr[1] = 2;
      chord_addr[2] = 2;
    ) : (set==4) ? (
      chord_addr[0] = 2;
      chord_addr[1] = 1;
    );
  );

function gen_note_sequence(note_addr, scale_addr, chord_addr, origin, N)
  globals()
  instance()
  local(n_chord, scale_idx, chord_idx)
  (
    n_chord = chord_addr[0];
  
    scale_idx = origin;
    chord_idx = 1;
    loop(N,
      note_addr[] = scale_addr[scale_idx];
      note_addr += 1;
      
      scale_idx += chord_addr[chord_idx];
      chord_idx += 1;
      chord_idx == n_chord ? chord_idx = 1;
    );
  );

SCALE_ADDRESS = 1000;
CHORD_ADDRESS = 2000;
NOTE_ADDRESS = 3000;
NOTE_DATA = 8192;
NOTE_BLOCKSIZE = 1024;

// 512 is max size of a note block
loaded == 0 ? (
  offset = 24;
  origin = 4;
  scale = 2;
  chord = 4;
  note = 20; 
  n_notes = 16;
  n_steps = 16;
  n_patterns = 32;
  version = 1;
  speed = 2;
);

// Allow 64 patterns (slack)
freemem = NOTE_DATA + NOTE_BLOCKSIZE * n_patterns;

function rebuild_scale()
  (
    gen_scale(SCALE_ADDRESS, scale);
    gen_picker(CHORD_ADDRESS, chord);
    gen_note_sequence(NOTE_ADDRESS, SCALE_ADDRESS, CHORD_ADDRESS, origin, 64);
  );
  
@serialize
function serialize_rle(mem, len, writing)
local(ptr, end_ptr, count, value, validate)
global(critical_error)
(
  ptr = mem;
  (!writing) ?
  (
    end_ptr = mem + len - 1;
    while(ptr < end_ptr)
    (
      file_var(0, value);
      (value == 1337) ? (validate = ptr - mem);
       
      // We only apply RLE to zeros
      (value == 0) ? (
        file_var(0, count);
        memset(ptr, 0, count);
        ptr += count;
      ) : (
        ptr[] = value;
        ptr += 1;
      );
    );
    
    file_var(0, validate);
    critical_error = validate == 1337 ? 0 : 1;
  ) : (
    count = 0;
    loop(len - 1,
      value = ptr[];
      
      (value == 0) ? (
        count += 1;
      ) : ( 
        (count > 0) ? (
          file_var(0, 0);
          file_var(0, count);
          count = 0;
        );
        
        file_var(0, value);      
      );
      
      ptr += 1;
    );
    
    // Eww :(
    (count > 0) ? (
      file_var(0, 0);
      file_var(0, count);
    );
    
    file_var(0, 1337);
  );
);

writing = file_avail(0) < 0;

file_var( 0, version );
loaded = 1;
file_var( 0, origin );
file_var( 0, offset );
file_var( 0, scale );
file_var( 0, chord );
file_var( 0, n_notes );
file_var( 0, n_steps );
file_var( 0, n_patterns );
file_var( 0, current_pattern );
file_var( 0, speed );
  
/* Memory to expand into when features are added */
file_mem( 0, 0, 99 );

idx = 0;
(version == 0) ? (
  loop(n_patterns,
    file_mem(0, NOTE_DATA + (idx-1) * NOTE_BLOCKSIZE, 1024);
    idx += 1;
  ); 
) : (
  serialize_rle(NOTE_DATA, NOTE_BLOCKSIZE * n_patterns, writing);
);

version = 1;
rebuild_scale();

@slider 

@block
abs_speed = (2^(speed-2));
bps = 2 / abs_speed * (ts_num / ts_denom) * tempo / 60;
sample_per_beat = (srate/num_ch)/bps;
current_position = current_sample / (srate/num_ch);
beat_pos = current_position * bps;
seq_position = floor(beat_pos % n_steps);

// Check whether the interval contains a transition from one grid line to the next.
offset = 1;
FATAL = 0;
cumulative_offset = 0;
while(offset > 0 && FATAL < 15) (
  samples_until_next_beat = (1.0 - (beat_pos - floor(beat_pos))) * sample_per_beat;
  current_beat_offset = samples_until_next_beat + cumulative_offset;
  
  ( current_beat_offset < samplesblock ) ? (
    offset = (seq_position+1) * n_notes
  ) : ( samples_until_next_beat == sample_per_beat ) ? (
    // We are exactly on the beat
    offset = seq_position * n_notes
  ) : offset = -1;
  
  (was_playing && !play_state) ? rebuild = 1;
  !play_state ? offset = -1;
  
  // Stop all notes when rebuilding
  (rebuild == 1) ? (
    rebuild = 0;
    
    idx = 0;
    loop(n_notes,
        midisend(current_beat_offset, $x80, 36 + note_address[idx], 127);
        idx += 1;
    );
    rebuild_scale();
  );
  
  pattern_location = NOTE_DATA + (current_pattern)*NOTE_BLOCKSIZE;
  (offset > -1) ? (
    idx = 0;
    loop(n_notes,
      midisend(current_beat_offset, $x80, 36 + note_address[idx], 127);
    
      pattern_location[ny - idx + offset] > 0 ? (
        midisend(current_beat_offset, $x90, 36 + note_address[idx], 127);
        pp = 1;
      );
      idx += 1;
    );
  );
  FATAL += 1;
  
  beat_pos += 1;
  cumulative_offset += sample_per_beat;
  seq_position = floor(beat_pos % n_steps);
);
was_playing = play_state;

@sample
play_state ? current_sample += 1;

@gfx 700 700
w = 600;
h = 600;

font_color_r = .8;
font_color_g = .8;
font_color_b = .8;
font_color_a = .8;
highlight_color_r = .5;
highlight_color_g = .7+.2*abs(sin(2*time_precise()));
highlight_color_b = .9;
highlight_color_a = .6+.4*abs(sin(2*time_precise()));
fontface = "Arial";
scaling = 1;
combo_height = 25;
combo_width = 150;
combo_small_width = 50;
combo_pad = 10;

event_captured > 0 ? event_captured -= 1;
gfx_setfont(COMBO_BIG, fontface, 14*(1+scaling));

/* current_pattern, scale, chord */

lastChar = gfx_getchar();

scale_select.combobox(10, h+.5*combo_height, combo_width, combo_height, .4, .4, .8, 1, SCALE_TYPES, 1, 1, 1, COMBO_BIG, "Scale selection." );
scale_select.combobox_setcuritem(scale);
scale_select.combobox_processMouse(mouse_x, mouse_y, mouse_cap) ? ( 
  scale = scale_select.curitem;
  event_captured = 3;
  rebuild = 1;
);
scale_select.combobox_draw();  

chord_select.combobox(10 + combo_width + combo_pad, h+.5*combo_height, combo_width, combo_height, .4, .4, .8, 1, CHORD_TYPES, 2, 1, 1, COMBO_BIG, "Scale selection." );
chord_select.combobox_setcuritem(chord);
chord_select.combobox_processMouse(mouse_x, mouse_y, mouse_cap) ? ( 
  chord = chord_select.curitem;
  event_captured = 3;
  rebuild = 1;
);
chord_select.combobox_draw();

base_select.combobox(10 + 2*combo_width + 2*combo_pad, h+.5*combo_height, combo_small_width, combo_height, .4, .4, .8, 1, NOTE_TYPES, 3, 1, 5, COMBO_BIG, "Scale selection." );
base_select.combobox_setcuritem(origin);
base_select.combobox_processMouse(mouse_x, mouse_y, mouse_cap) ? ( 
  origin = base_select.curitem;
  event_captured = 3;
  rebuild = 1;
);
base_select.combobox_draw();

speed_select.combobox(10 + 2*combo_width + combo_small_width + 3*combo_pad, h+.5*combo_height, combo_small_width, combo_height, .4, .4, .8, 1, SPEEDS, 4, 1, 1, COMBO_BIG, "Scale selection." );
speed_select.combobox_setcuritem(speed);
speed_select.combobox_processMouse(mouse_x, mouse_y, mouse_cap) ? ( 
  speed = speed_select.curitem;
  event_captured = 3;
);
speed_select.combobox_draw();


function draw_grid(_x, _y, _w, _h, px, note_address, n_notes, n_steps, seq_position)
  instance(x, y, w, h, nx, ny, data)
  globals(gfx_x, gfx_y)
  local(ptr, xp, yp, dx, dy, cw, ch)
  (
    x = _x;
    y = _y;
    w = _w;
    h = _h;
    nx = n_steps;
    ny = n_notes;
    data = note_address;

    gfx_set(.02,0.02,.1,.7);
    gfx_rect(x, y, w, h);
    
    dx = w / nx;
    dy = h / ny;
  
    cw = dx - 2*px;
    ch = dy - 2*px;
    xp = x + px;
    ptr = data;
    loop(n_steps,
      yp = y+px;
      loop(n_notes,
        gfx_set(0.1, 0.1, .2 + .8*ptr[], .7);
        gfx_rect(xp, yp, cw, ch);
        gfx_set(0.1, 0.1, .2 + .8*ptr[], .7);
        gfx_rect(xp+2, yp+2, cw-2, ch-2);
        gfx_set(0.1, 0.1, .2 + .8*ptr[], .7);
        gfx_rect(xp+4, yp+4, cw-4, ch-4);
        
        ptr += 1;
        yp += dy;
      );
      xp += dx;
    );
    
    xp = x + seq_position*dx;
    gfx_set(1, 1, 1, .05);
    gfx_rect(xp, y, dx, h);
    gfx_rect(xp+2, y, dx-4, h);
  );

function grid_mouse(mx, my, mc)
  instance(x, y, w, h, nx, ny, data, lastleft, drawing)
  globals(gfx_x, gfx_y)
  local(xloc, yloc, left, dx, dy)
  (
    left = mc & 1 > 0;
  
    ( mx > x && my > y && mx < (x+w) && my < (y+h) ) ?
    (
      dx = w / nx;
      dy = h / ny;
    
      xloc = floor((mx-x) / dx);
      yloc = floor((my-y) / dy);
      
      (!lastleft && left) ? (
        drawing = data[yloc + xloc * ny] > 0 ? 2 : 1
      ) : ( drawing == 1 ) ? (
        data[yloc + xloc * ny] = 1;
      ) : ( drawing == 2 ) ? (
        data[yloc + xloc * ny] = 0;
      );;
      
      !left ? drawing = 0;
      lastleft = left;
    );
  );

pat_back_r = .12;
pat_back_g = 0.12;
pat_back_b = .2;
pat_back_a = .7;

function draw_patterns(_x, _y, _w, _h, px, n_notes, _N, _current)
  instance(x, y, w, h, N, dy, current)
  local(y_cur, idx)
  global(highlight_color_r, highlight_color_g, highlight_color_b, highlight_color_a,
         pat_back_r, pat_back_g, pat_back_b, pat_back_a)
  (
    x = _x;
    y = _y;
    w = _w;
    h = _h;
    N = _N;
    current = _current;
    
    gfx_set(pat_back_r, pat_back_g, pat_back_b, pat_back_a);
    
    y_cur = y;
    dy = h / n_notes;
    
    idx = 0;
    loop(N,
      gfx_rect(x+px, y_cur+px, w-2*px, dy-2*px);
      ( current == idx ) ? (
        gfx_set(highlight_color_r, highlight_color_g, highlight_color_b, highlight_color_a);
        gfx_line(x + px, y_cur + px, x+w-px, y_cur + px);
        gfx_line(x + px, y_cur + dy - px, x+w-px, y_cur + dy - px);
        gfx_line(x + px, y_cur + px, x + px, y_cur + dy - px);
        gfx_line(x + w - px, y_cur + px, x + w - px, y_cur + dy - px);
        gfx_set(pat_back_r, pat_back_g, pat_back_b, pat_back_a);
      );    
      y_cur += dy;
      idx += 1;
    );   
  );
  
function patterns_mouse(mx, my, mc)
  instance(x, y, w, h, N, dy, current, lastleft)
  local(left)
  global()
  (
    left = mc & 1 > 0;
    
    (left && !lastleft) ? (
      (mx > x) && (mx < (x+w)) && (my > y) && (my < (y+h)) ? (
        current = (my - y) / dy;
      );
    );
    
    lastleft = left;
    
    floor(current)
  );
  
  
grid.draw_grid(10, 10, w, h, 3, NOTE_DATA + (current_pattern)*NOTE_BLOCKSIZE, n_notes, n_steps, seq_position);
patterns.draw_patterns(w + 20, 10, 40, h, 3, n_notes, 16, current_pattern);
event_captured == 0 ? (
  grid.grid_mouse(mouse_x, mouse_y, mouse_cap);
  current_pattern = patterns.patterns_mouse(mouse_x, mouse_y, mouse_cap);
);

scale_select.combobox_draw_top();
chord_select.combobox_draw_top();
base_select.combobox_draw_top();
speed_select.combobox_draw_top();

/*
    gfx_y = 0;
    i = 0;
    gfx_set(1,1,1,.7);
    loop(20,
      gfx_x = 0;
      gfx_printf("%d", note_address[i]);
      i += 1;
      gfx_y += 10;
    );
*/
