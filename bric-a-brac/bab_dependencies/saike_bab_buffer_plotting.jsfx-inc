@init
function draw_signal_window(x, y, w, h, meterSpace, floorLevel, gradBlitTarget)
  instance(x, y, w, h, meterSpace, lw, lh)
  global(gfx_mode, gfx_dest, gfx_x, gfx_y, tester, ceilLevel,
         line_r, line_g, line_b, line_a,
         box_rect_color_r, box_rect_color_g, box_rect_color_b,
         box_edge_color_r, box_edge_color_g, box_edge_color_b)
  local(stepsize, steps, dy, yc, xs, xe, cStep, ww, hh, oldDest, maxw)
  (
    /*gfx_mode = 0; gfx_set(1,1,1,1);
    ( ( lw != w ) || ( lh != h ) ) ? (
      lw = w;
      lh = h;
      oldDest = gfx_dest;
      gfx_setimgdim(gradBlitTarget, w, h);
      gfx_dest = gradBlitTarget;
      gfx_set(0,0,0,1);
      gfx_rect(x, y, w, h);
      gfx_gradrect(x, y, w, h, .7, .7, .7, .7, 0, .0001, .0001, .0001, -.0001, -.0001, .0001, .0001);
      gfx_dest = oldDest;
    );
    
    gfx_x = gfx_y = 0;
    gfx_blit(gradBlitTarget, 1, 0);
    */

    gfx_set(box_rect_color_r, box_rect_color_g, box_rect_color_b, 1.0);
    gfx_rect(x, y, w, h);
  
    stepsize = 3;
    cStep = ceilLevel;
    dy = stepsize*h/floorLevel;
    steps = floor(-floorLevel/stepsize); 
    yc = y;
    gfx_setfont(1, "Arial", 16);
    gfx_measurestr("-45", maxw, ww);
    loop(steps + 1,
      gfx_set(0, 0, 0, .7);
      sprintf(0, "%2d", cStep);
      gfx_measurestr(0, ww, hh);
      gfx_x = x + w - 0.5 * meterSpace - ww + maxw;
      gfx_y = yc - 0.5 * hh - 1;
      gfx_set(line_r, line_g, line_b, line_a);
      gfx_line(x, floor(yc), x+w-.8*meterSpace, floor(yc));
      //gfx_line(x, floor(yc) + 1, x+w-.8*meterSpace, floor(yc) + 1);
      //gfx_line(x+w-.2*meterSpace, floor(yc), x+w, floor(yc));
      yc -= dy;
      cStep -= stepsize;
    );
    
    gfx_set(box_edge_color_r, box_edge_color_g, box_edge_color_b, 1.0);
    gfx_line(x, y, x, y + h);
    gfx_line(x + w, y, x + w, y + h);
    gfx_line(x, y, x + w, y);
    gfx_line(x, y + h, x + w, y + h);
  );


function draw_buffer_db(x, y, w, h, meterSpace, floorLevel, fill)
  instance(scopeptr, scopebuffer, scopebuffermax)
  globals(gfx_r, gfx_g, gfx_b, gfx_x, gfx_y, scrolls, ceilLevel)
  local(skipFactor, xx, yy, ybase, dx, lptr, lastx, lasty, scale, ly)
  (
    skipFactor = 1/((w-meterSpace)/(scopebuffermax-scopebuffer));  
    dx = 1;
    scale = h / abs(floorLevel);
    ybase = y;
    xx    = x;
    ly = ybase - scale*max(floorLevel, scopebuffer[] - ceilLevel);

    scrolls ? (
      lptr  = scopeptr;
      gfx_x = xx;
      gfx_y = ly;
      loop((scopebuffermax-scopeptr)/skipFactor,
        yy = ybase - scale*max(floorLevel,lptr[]-ceilLevel);

        fill ? (
          gfx_triangle( xx-dx, y+h,
                        xx-dx, ly,
                        xx, y+h,
                        xx, yy);
        );
        gfx_lineto(xx, yy);
        
        ly = yy;
        lptr += skipFactor;
        xx += dx;
      );
      
      lptr = scopebuffer;
      loop((scopeptr - scopebuffer)/skipFactor,
        yy = ybase - scale*max(floorLevel,lptr[]-ceilLevel);

        fill ? (
          gfx_triangle( xx-dx, y+h,
                        xx-dx, ly,
                        xx, y+h,
                        xx, yy);
        );
        gfx_lineto(xx, yy);


        ly = yy;
        lptr += skipFactor;
        xx += dx;
      );
    ) : (
      lptr  = scopebuffer;
      
      gfx_x = xx;
      gfx_y = ly;
      loop((scopebuffermax-scopebuffer)/skipFactor,
        yy = ybase - scale * max(floorLevel, lptr[] - ceilLevel);

        fill ? (
          gfx_triangle( xx-dx, y + h,
                        xx-dx, ly,
                        xx, y + h,
                        xx, yy);
        );
        gfx_lineto(xx, yy);

        ly = yy;
        lptr += skipFactor;
        xx += dx;
      );
    );
  );

function update_buffer(M)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer)
  (
    scopeptr[] = M;
    scopeptr += 1;
    scopeptr > scopebuffermax ? scopeptr = scopebuffer;
    
    M
  );

function simple_delay(sample)
local(ret)
global()
instance(readptr, scopeptr, scopebuffer, scopebuffermax)
(
  scopeptr[] = sample;
  scopeptr += 1;
  
  ret = readptr[];
  readptr += 1;
  
  (readptr > scopebuffermax) ? readptr = scopebuffer;
  (scopeptr > scopebuffermax) ? scopeptr = scopebuffer;
  
  ret
);

function init_buffer_no_reset(scopebuffer_in, scopebuffermax_in)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer)
  (
    scopebuffer     = scopebuffer_in;
    scopebuffermax  = scopebuffermax_in;
    
    scopeptr < scopebuffer ? (
      scopeptr = scopebuffer 
    ) : ( scopeptr > scopebuffermax ) ? scopeptr = scopebuffer    
  );

function set_offset(offset)
instance(readptr, scopeptr, scopebuffer, scopebuffermax)
local()
global()
(
  readptr = scopeptr - offset;
  readptr < scopebuffer ? readptr += (scopebuffermax - scopebuffer);
);

