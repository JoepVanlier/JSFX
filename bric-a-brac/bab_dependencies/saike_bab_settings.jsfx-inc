@init
dial_animation = 1;

function init_strip(strip_index)
global()
local()
instance(me, lfo_time)
(
  me = strip_index;
  lfo_time = 0;
);

function serialize_non_sliders()
global()
local()
instance(env, time_offset, retrigger,
         lpf, hpf, lfo_enabled, lfo_amount, lfo_freq, pitch, lfo_type,
         input_lpf, input_hpf)
(
  file_var(0, env);
  file_var(0, lpf.mod1);
  file_var(0, hpf.mod1);
  file_var(0, pitch.mod1);
  file_var(0, time_offset);
  file_var(0, retrigger);
  file_var(0, lfo_type);
  file_var(0, lfo_amount.mod1);
  file_var(0, lfo_freq.mod1);
  file_var(0, lfo_enabled);
  
  file_var(0, lpf.mod2);
  file_var(0, hpf.mod2);
  file_var(0, pitch.mod2);
  
  file_var(0, input_lpf);
  file_var(0, input_hpf);
  
  /* Memory to expand into when features are added */
  memset(0, 0, 67);
  file_mem(0, 0, 67); /* Reduce this by one when you want to add features */
);

function set_knob_properties(slider_id, minimum, sc, def, _active)
instance(scale, min_value, default, slider_idx, active, value)
local()
global()
(
  slider_idx = slider_id;
  scale = sc;
  min_value = minimum;
  default = def;
  active = _active;
  value = (slider(slider_idx) - min_value) / scale;
);

function set_knob_properties_simple_par(raw_value, def, minval, sc)
instance(value, min_value, default, scale)
local()
global()
(
  min_value = minval;
  scale = sc;
  default = def;
  value = (raw_value - min_value) / scale; 
);

function draw_and_process(cX, cY, knobSize, label, description, current, modifier)
instance(mod1, mod2, default, scale, value, min_value, slider_idx, newValue, curmod)
global(mouse_x, mouse_y, mouse_cap,
       dial_animation, bipolar, activeModifier,
       dial_position_color_r, dial_position_color_g, dial_position_color_b
       mod1_color_r, mod1_color_g, mod1_color_b, mod1_color_a,
       mod2_color_r, mod2_color_g, mod2_color_b, mod2_color_a,
       current_mod1, dragging,)
local(norm_current)
(
  (current == -1337) ? current = slider(slider_idx);

  this.drawKnob(cX + knobSize, cY + knobSize, knobSize, label, description, 1.0);
  
  modifier ? (
    norm_current = (curmod - min_value) / scale;
    this.knob_draw_modifier(norm_current - value, bipolar, mod1_color_r, mod1_color_g, mod1_color_b, 1.0, -0.1);
  );
  
  modifier ? this.knob_draw_modifier(mod1, bipolar, mod1_color_r, mod1_color_g, mod1_color_b, mod1_color_a, 1);
  (modifier == 2) ? this.knob_draw_modifier(mod2, bipolar, mod2_color_r, mod2_color_g, mod2_color_b, mod2_color_a, 2);

  ( activeModifier == 2 ) ? (
    this.knob_modifier_processMouse(0, mod2) ? ( mod2 = newValue; dragging = 1; );
  ) : ( activeModifier == 1 ) ? (
    this.knob_modifier_processMouse(0, mod1) ? ( mod1 = newValue; dragging = 1; );
  ) : (
    this.knob_processMouse(mouse_x, mouse_y, mouse_cap, (default - min_value) / scale ) ? (
      slider_idx > 0 ? (
        slider(slider_idx) = scale * value + min_value;
        slider_automate(slider_idx);
      );
      dragging = 1;
    );
  );
);

function draw_and_process_simple_par(cX, cY, knobSize, label, description)
instance(active, value, value, min_value, default, scale)
global(mouse_x, mouse_y, mouse_cap, dragging)
local()
(
  active = 1;
  this.drawKnob(cX + knobSize, cY + knobSize, knobSize, label, description, 1.0);
  this.knob_processMouse(mouse_x, mouse_y, mouse_cap, (default - min_value) / scale ) ? (
    dragging = 1;
  );
  
  value * scale + min_value;
);

function draw_mode_selectors(xs, ys)
local(ww, hh, hspit)
global(scaling, SELECT_COLOR)
instance(env)
(
  ww = 80 * (1 + scaling);
  hh = 13 * (1 + scaling);
  hspit = 3 * (1 + scaling);
  
  gfx_setfont(SELECT_COLOR);
  drawSelectionButton("Follower", xs, ys, ww, hh, 0, -env, "Dynamics handled as envelope follower.\n\nAn envelope follower will follow the incoming signal.\nThis follower is then used to modulate the sample gain.\nThis type of follower does not exceed the signal level.") ? env = 0;
  drawSelectionButton("Threshold", xs, ys + hh + hspit, ww, hh, 1, -env, "Dynamics based on thresholded signal.\n\nWhen the signal is over the threshold, the\nsignal will increase until at full strength.") ? env = 1;
  drawSelectionButton("Triggered", xs, ys + 2 * hh + 2 * hspit, ww, hh, 2, -env, "Trigger-based envelope.\n\nWhen the signal exceeds the threshold, it will\nplay a fixed attack/hold/decay envelope.") ? env = 2;
  
  xs += ww * 1.2;
);

function set_button_properties()
local()
global(SLIDERS_PER_SAMPLE)
instance(me, env, lfo_enabled,
         env, atk, decay, hold_percent, hold_time, gain, pitch, hpf, lpf, lfo_amount, lfo_freq, time_offset, input_lpf, input_hpf,
         time_offset_knob, input_lpf_knob, input_hpf_knob)
(
  input_lpf_knob.set_knob_properties_simple_par(input_lpf, 0, -1, 1);
  input_hpf_knob.set_knob_properties_simple_par(input_hpf, 0, 0, 1);
  time_offset_knob.set_knob_properties_simple_par(time_offset, 0, -100, 200);
  atk.set_knob_properties(SLIDERS_PER_SAMPLE * me + 1, 0, 1, 0, 1);
  decay.set_knob_properties(SLIDERS_PER_SAMPLE * me + 2, 0, 1, 0.3, 1);
  hold_percent.set_knob_properties(SLIDERS_PER_SAMPLE * me + 3, 0, 100, 30, env==2);
  hold_time.set_knob_properties(SLIDERS_PER_SAMPLE * me + 4, 0, 1, 0, env==2);
  gain.set_knob_properties(SLIDERS_PER_SAMPLE * me + 7, -48, 51, 0.00000001, 1);
  pitch.set_knob_properties(SLIDERS_PER_SAMPLE * me + 8, -24, 48, 0.00000001, 1);
  hpf.set_knob_properties(SLIDERS_PER_SAMPLE * me + 9, 0, 1, 0, 1);
  lpf.set_knob_properties(SLIDERS_PER_SAMPLE * me + 10, 0, 1, 1, 1);
  lfo_amount.set_knob_properties(SLIDERS_PER_SAMPLE * me + 11, 0, 1, 1, lfo_enabled);
  lfo_freq.set_knob_properties(SLIDERS_PER_SAMPLE * me + 12, 0, 10, 1, lfo_enabled);
);

function to_freq_label(value)
local(freq)
global(srate)
(
  freq = .5 * srate * exp((1 - value) * log(20/22050));
  sprintf(freq < 1000 ? sprintf(1, "%00d", freq) : sprintf(1, "%.1fk", freq/1000), 1, freq)
);

activeModifier = 0;
function draw_buttons(xs, ys, h)
local(menu_selection)
global(SLIDERS_PER_SAMPLE,
       waveform_r, waveform_g, waveform_b, waveform_a,
       mouse_x, mouse_y, mouse_cap, mouse_wheel,
       max_lfo_types,
       advanced)
instance(env, atk, decay, hold_percent, hold_time, gain, pitch, hpf, lpf, me, time_offset, input_lpf, input_hpf,
         time_offset_knob, input_lpf_knob, input_hpf_knob,
         lfo_time, lfo_amount, lfo_freq, lfo_type, lfo_enabled, lfo_toggle)
(
  xs = this.draw_mode_selectors(xs, ys);

  advanced ? (
    input_hpf_knob.label = to_freq_label(input_hpf_knob.value);
    input_hpf = input_hpf_knob.draw_and_process_simple_par(xs, ys - 5, 0.5 * h, "Input HPF", "HPF used for the input level.\n\nThis can be used to filter the signal driving the\nenvelope follower, but it is not audible.\n\nIt can for example be used to make the layer only\napply to low or high frequencies.");
    xs += 1.25 * h;
  
    input_lpf_knob.label = to_freq_label(input_lpf_knob.value);
    input_lpf = input_lpf_knob.draw_and_process_simple_par(xs, ys - 5, 0.5 * h, "Input LPF", "LPF used for the input level.\n\nThis can be used to filter the signal driving the\nenvelope follower, but it is not audible.\n\nIt can for example be used to make the layer only\napply to low or high frequencies.");
    xs += 1.25 * h;
  );
  
  time_offset_knob.label = sprintf(2, "%d ms", time_offset);
  time_offset = time_offset_knob.draw_and_process_simple_par(xs, ys - 5, 0.5 * h, "Offset", "Set time offset\n\nNote: Negative offset induces plugin latency");
  xs += 1.25 * h;
  
  this.set_button_properties();
  
  atk.label = sprintf(2, "%d ms", exp(4.605170185988092 * atk.value));
  atk.draw_and_process(xs, ys - 5, 0.5 * h, "Attack", "Envelope attack", -1337, 0);
  xs += 1.25 * h;

  decay.label = sprintf(2, "%d ms", 10 * exp(4.605170185988092 * decay.value));
  decay.draw_and_process(xs, ys - 5, 0.5 * h, "Decay", "Envelope decay", -1337, 0);
  xs += 1.25 * h;

  hold_percent.label = sprintf(2, "%d ", 100 * hold_percent.value);
  hold_percent.draw_and_process(xs, ys - 5, 0.5 * h, "Hold Level", "Hold percentage", -1337, 0);
  xs += 1.25 * h;

  hold_time.label = sprintf(2, "%d ms", 10 * exp(4.605170185988092 * hold_time.value));
  hold_time.draw_and_process(xs, ys - 5, 0.5 * h, "Hold Time", "Hold time", -1337, 0);
  xs += 1.25 * h;

  gain.label = sprintf(8, "%d dB", gain.scale * gain.value + gain.min_value);
  gain.draw_and_process(xs, ys - 5, 0.5 * h, "Gain", "Gain", -1337, 0);
  xs += 1.25 * h;

  pitch.label = sprintf(8, "%d st", pitch.scale * pitch.value + pitch.min_value);
  pitch.draw_and_process(xs, ys - 5, 0.5 * h, "Pitch", "Pitch", -1337, 2);
  xs += 1.25 * h;

  hpf.label = to_freq_label(hpf.value);
  hpf.draw_and_process(xs, ys - 5, 0.5 * h, "Highpass", "High pass filter cutoff frequency", -1337, 2);
  xs += 1.25 * h;

  lpf.label = to_freq_label(lpf.value);
  lpf.draw_and_process(xs, ys - 5, 0.5 * h, "Lowpass", "Low pass filter cutoff frequency", -1337, 2);
  xs += 1.25 * h;
  
  advanced ? (
    lfo_amount.draw_and_process(xs, ys - 5, 0.5 * h, "LFO Amnt", "LFO Amount", -1337, 1);
    
    gfx_set(waveform_r, waveform_g, waveform_b, waveform_a);
    draw_lfo(xs + 0.3 * h, ys + 0.3 * h - 5, 0.4 * h, 0.4 * h, lfo_type, 0, lfo_time);  // c_lfo_center_phase, c_lfo_time
  
    lfo_amount.knob_over(mouse_x, mouse_y) ? (
      mouse_press(2) ? (
        menu_selection = gfx_showmenu("Sine|Abs Cos|Abs Sin|Ramp Up|Ramp Down|Exp Decay|Exp Atk/Decay|Exp Rise|ExpOnce|Exp w/Atk|Triangle|Two Harmonics|Three Harmonics|Sixteenth Pulse|Eighth pulse|Quarter Pulse|Half Pulse|Sample and Hold|Noise");
        (menu_selection > 0) ? (
          lfo_type = menu_selection - 1;
        );
      );
      (mouse_wheel > 0) ? (
        lfo_type += 1;
        lfo_type > max_lfo_types ? lfo_type = 0;
        mouse_wheel = 0;
      ) : (mouse_wheel < 0) ? (
        lfo_type -= 1;
        lfo_type < 0 ? lfo_type = max_lfo_types;
        mouse_wheel = 0;
      );
    );
    
    lfo_toggle.drawToggle(xs - 0.05 * h, ys - 0.1 * h, .08*h, .08*h, lfo_enabled, waveform_r, waveform_g, waveform_b, waveform_a, waveform_r, waveform_g, waveform_b, waveform_a, "Enable LFO.");
    lfo_enabled = lfo_toggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);
    
    xs += 1.25 * h;
    
    lfo_freq.label = sprintf(2, "%d Hz", lfo_freq.scale * lfo_freq.value);
    lfo_freq.draw_and_process(xs, ys - 5, 0.5 * h, "LFO Freq", "LFO Frequency", -1337, 1);
    xs += 1.25 * h;
    
    handleModifier("Env Mod", xs, ys + .15 * h, h, 0.5 * h, 1);
    handleModifier("Mod", xs, ys + .75 * h, h, 0.5 * h, 2);
  );
);

