@init
function init_linear_svf_all(freq, res, morph)
  global()
  local(frac, div, st, ct, k, g, omega)
  instance(a1, a2, a3, m0, m1, m2)
  (
    omega = 0.5 * $pi * exp( (1-freq) * log(20/22050) );
    
    k = 2 - 2*res;
    ct = cos(omega);
    st = sin(omega);
    div = 1.0 / (1.0 + k * st * ct);
    a1 = ct * ct * div;
    a2 = st * ct * div;
    a3 = st * st * div;
    
    //      v0      ] v1   v2
    // LP =               v2
    // BP =          v1;
    // HP = v0 - k * v1 - v2;
    // BR = v0 -     v1;
    morph *= 4.0;
    frac = morph - floor(morph);
    morph < 1 ? (
      // LP to BP
      m0 = 0.0;
      m1 = frac;
      m2 = (1.0 - frac);
    ) : ( morph < 2 ) ? (
      // BP to HP
      m0 = frac;
      m1 = (1.0 - frac) - k * frac;
      m2 = -frac;
    ) : ( morph < 3 ) ? (
      // HP to BR
      m0 = (1.0 - frac) + frac;
      m1 = -k * (1.0 - frac) - frac;
      m2 = -(1.0 - frac);
    ) : (
      m0 = (1.0 - frac);
      m1 = -(1.0 - frac);
      m2 = frac;
    );
    
    /*A = sqrt(1-res*res);
    m0 *= A;
    m1 *= A;
    m2 *= A;*/
  );
  
function init_linear_svf_lp(freq, res)
  global()
  local(frac, div, st, ct, k, g, omega)
  instance(a1, a2, a3)
  (
    omega = 0.5 * $pi * exp( (1-freq) * log(20/22050) );
    
    k = 2 - 2*res;
    ct = cos(omega);
    st = sin(omega);
    div = 1.0 / (1.0 + k * st * ct);
    a1 = ct * ct * div;
    a2 = st * ct * div;
    a3 = st * st * div;
  );
  
function init_linear_svf_hpf_no_res(freq)
  global()
  local(frac, div, st, ct, g, omega)
  instance(a1, a2, a3)
  (
    omega = 0.5 * $pi * exp( (1-freq) * log(20/22050) );
    
    ct = cos(omega);
    st = sin(omega);
    div = 1.0 / (1.0 + 2.0 * st * ct);
    a1 = ct * ct * div;
    a2 = st * ct * div;
    a3 = st * st * div;
  );  

function eval_linear_hpf_left(v0)
global()
local(v1, v2, v3)
instance(ic1eq_left, ic2eq_left, a1, a2, a3)
(
  v3 = v0 - ic2eq_left;
  v1 = a1 * ic1eq_left + a2 * v3;
  v2 = ic2eq_left + a2 * ic1eq_left + a3 * v3;
  ic1eq_left = 2.0 * v1 - ic1eq_left;
  ic2eq_left = 2.0 * v2 - ic2eq_left;
  
  v0 - 2 * v1 - v2
);

function eval_linear_hpf_right(v0)
global()
local(v1, v2, v3)
instance(ic1eq_right, ic2eq_right, a1, a2, a3)
(
  v3 = v0 - ic2eq_right;
  v1 = a1 * ic1eq_right + a2 * v3;
  v2 = ic2eq_right + a2 * ic1eq_right + a3 * v3;
  ic1eq_right = 2.0 * v1 - ic1eq_right;
  ic2eq_right = 2.0 * v2 - ic2eq_right;
  
  v0 - 2 * v1 - v2
);

function eval_linear_svf_left(v0)
global()
local(v1, v2, v3)
instance(ic1eq_left, ic2eq_left, a1, a2, a3, m0, m1, m2)
(
  v3 = v0 - ic2eq_left;
  v1 = a1 * ic1eq_left + a2 * v3;
  v2 = ic2eq_left + a2 * ic1eq_left + a3 * v3;
  ic1eq_left = 2.0 * v1 - ic1eq_left;
  ic2eq_left = 2.0 * v2 - ic2eq_left;
  
  (m0 * v0 + m1 * v1 + m2 * v2)
);

function eval_linear_svf_right(v0)
global()
local(v1, v2, v3)
instance(ic1eq_right, ic2eq_right, a1, a2, a3, m0, m1, m2)
(
  v3 = v0 - ic2eq_right;
  v1 = a1 * ic1eq_right + a2 * v3;
  v2 = ic2eq_right + a2 * ic1eq_right + a3 * v3;
  ic1eq_right = 2.0 * v1 - ic1eq_right;
  ic2eq_right = 2.0 * v2 - ic2eq_right;
  
  (m0 * v0 + m1 * v1 + m2 * v2)
);

function init_linear_svf_lp_hp(f_lp, f_hp)
  global()
  local(hpi, minimum, omega_lp, omega_hp,
        ct, st, div)
  instance(a1_lp, a2_lp, a3_lp,
           a1_hp, a2_hp, a3_hp)
  (
    minimum = log(20/22050);
    hpi = 0.5 * $pi;
    omega_lp = hpi * exp((1-f_lp) * minimum);
    omega_hp = hpi * exp((1-f_hp) * minimum);
    
    ct = cos(omega_lp);
    st = sin(omega_lp);
    
    div = 1.0 / (1.0 + 2 * st * ct);
    a1_lp = ct * ct * div;
    a2_lp = st * ct * div;
    a3_lp = st * st * div;
    
    ct = cos(omega_hp);
    st = sin(omega_hp);
    
    div = 1.0 / (1.0 + 2 * st * ct);
    a1_hp = ct * ct * div;
    a2_hp = st * ct * div;
    a3_hp = st * st * div;
  );


function eval_lp_hp_env(left, right)
global()
local(v0, v1, v2, v3, out)
instance(ic1eq_lp, ic2eq_lp,
         ic1eq_hp, ic2eq_hp,
         ic3eq_lp, ic4eq_lp,
         ic3eq_hp, ic4eq_hp,
         a1_lp, a2_lp, a3_lp,
         a1_hp, a2_hp, a3_hp)
(
  v3 = left - ic2eq_lp;
  v1 = a1_lp * ic1eq_lp + a2_lp * v3;
  v2 = ic2eq_lp + a2_lp * ic1eq_lp + a3_lp * v3;
  ic1eq_lp = 2.0 * v1 - ic1eq_lp;
  ic2eq_lp = 2.0 * v2 - ic2eq_lp;
  v0 = v2;
  
  v3 = v0 - ic2eq_hp;
  v1 = a1_hp * ic1eq_hp + a2_hp * v3;
  v2 = ic2eq_hp + a2_hp * ic1eq_hp + a3_hp * v3;
  ic1eq_hp = 2.0 * v1 - ic1eq_hp;
  ic2eq_hp = 2.0 * v2 - ic2eq_hp;
  out = abs(v0 - 2 * v1 - v2);
  
  v3 = right - ic4eq_lp;
  v1 = a1_lp * ic3eq_lp + a2_lp * v3;
  v2 = ic4eq_lp + a2_lp * ic3eq_lp + a3_lp * v3;
  ic3eq_lp = 2.0 * v1 - ic3eq_lp;
  ic4eq_lp = 2.0 * v2 - ic4eq_lp;
  v0 = v2;
  
  v3 = v0 - ic4eq_hp;
  v1 = a1_hp * ic3eq_hp + a2_hp * v3;
  v2 = ic4eq_hp + a2_hp * ic3eq_hp + a3_hp * v3;
  ic3eq_hp = 2.0 * v1 - ic3eq_hp;
  ic4eq_hp = 2.0 * v2 - ic4eq_hp;
  
  max(out, v0 - 2 * v1 - v2)
);


function eval_linear_lpf_left(v0)
global()
local(v1, v2, v3)
instance(ic1eq_left, ic2eq_left, a1, a2, a3)
(
  v3 = v0 - ic2eq_left;
  v1 = a1 * ic1eq_left + a2 * v3;
  v2 = ic2eq_left + a2 * ic1eq_left + a3 * v3;
  ic1eq_left = 2.0 * v1 - ic1eq_left;
  ic2eq_left = 2.0 * v2 - ic2eq_left;
  
  v2
);

function eval_linear_lpf_right(v0)
global()
local(v1, v2, v3)
instance(ic1eq_right, ic2eq_right, a1, a2, a3)
(
  v3 = v0 - ic2eq_right;
  v1 = a1 * ic1eq_right + a2 * v3;
  v2 = ic2eq_right + a2 * ic1eq_right + a3 * v3;
  ic1eq_right = 2.0 * v1 - ic1eq_right;
  ic2eq_right = 2.0 * v2 - ic2eq_right;
  
  v2
);

function reset_linearSVF()
global()
local()
instance(ic1eq_left, ic2eq_left, ic1eq_right, ic2eq_right, k, a1, a2, a3)
(
  ic1eq_left = ic2eq_left = ic1eq_right = ic2eq_right = 0;  
);

