desc:Saike Spectral Analyzer
tags: analysis FFT meter spectrum
version: 3.2
author: Joep Vanlier, Trond-Viggo Melssen, Cockos
changelog: added extra colormap
provides: colormaps.jsfx-inc
Copyright (C) 2007 Cockos Incorporated
Copyright (C) 2018 Joep Vanlier, Trond-Viggo Melssen
License: LGPL - http://www.gnu.org/licensses/lgpl.html

This file was modified by Joep Vanlier and Trond-Viggo Melssen to enable multispectrum analysis analysis, sonogram and time domain plots. Thanks to cjewellstudios for the smooth colormap.

import colormaps.jsfx-inc

slider1:9<0,9,1{16,32,64,128,256,512,1024,2048,4096,8192,16384,32768}>-FFT size
slider2:-90<-450,-12,6>-floor
slider3:0<0,1,1{disabled,enabled}>-show phase
slider4:2<0,4,1{rectangular,hamming,blackman-harris,blackman,flat-top}>-window
slider5:200<0,2500,1>-integration time (ms)
slider6:1<1,6,.2>-scaling
slider7:20<0,100,1>-smoothing
slider8:1<0,14,1{dark,intense,fluo,colorblind,pimp,shades,fancy,pastel,purple,dark2,dark3,dark4,dark5,colorblind2,smooth}>-colormap
slider9:16<1,16,1>-mxchannels
slider10:.15<0,1,.4>-colorBackground

slider11:1<0,1,1>-Ch1
slider12:1<0,1,1>-Ch2
slider13:1<0,1,1>-Ch3
slider14:1<0,1,1>-Ch4
slider15:1<0,1,1>-Ch5
slider16:1<0,1,1>-Ch6
slider17:1<0,1,1>-Ch7
slider18:1<0,1,1>-Ch8
slider19:1<0,1,1>-Ch9
slider20:1<0,1,1>-Ch10
slider21:1<0,1,1>-Ch11
slider22:1<0,1,1>-Ch12
slider23:1<0,1,1>-Ch13
slider24:1<0,1,1>-Ch14
slider25:1<0,1,1>-Ch15
slider26:1<0,1,1>-Ch16
slider27:1<0,1,1>-Sum
slider28:-1<-1,1,16>-Channel
slider29:0<1,0,2{Sample,Sonogram,Off}>-Sonogram
slider30:5000<10,45000,100>-SonoScale
slider31:.5<0.1,3,.03>-SignalScale
slider32:6<0,7,1{viridis,viridisinv,magma,magmainv,inferno,infernoinv,plasma,plasmainv}>-colormap2
slider33:1<1,0,1{Logarithmic,Linear}>-Sonolog
slider34:0<0,0,1{Yes,No}>-SonoBig
slider35:1<1,8,1>-Factor
slider36:-1<-1,1,16>-Solo channel
slider37:.15<0,1,.4>-Alpha
slider38:0<0,9,.25>-slope

slider39:1<0,1,1{disabled,enabled}>-show grid
slider40:.15<0,1,.4>-gridAlpha
slider41:0<0,1,1{disabled,enabled}>-show channels
slider42:0<0,1,1{disabled,enabled}>-show options
slider43:0<0,1,1{disabled,enabled}>-show theme
slider44:0<0,1,1{disabled,enabled}>-freeze spectrum
slider45:3<0,3,1{Average,Maximum,Loess,Adaptive}>-Smoothing method
slider50:0<0,1,0>-Initialized
slider51:LatencyCompensation=0<0,1,0>-Latency Compensation
slider53:showA=0<0,1,1>-Show A
slider54:showB=0<0,1,1>-Show B
//in_pin:left input 
//in_pin:right input
options:no_meter

@init
copyTo    = 0;
magma     = 2000;
viridis   = 4000;
inferno   = 6000;
plasma    = 8000;
sono_frac = .35;

freeze = 0;

function updateChannelSliders()
(
  // For some reason this isn't being called in @slider
  actc = activechannels;
  actc[] = slider11 ? (maxchannels=1; 1); actc += 1;
  actc[] = slider12 ? (maxchannels=2; 1); actc += 1;
  actc[] = slider13 ? (maxchannels=3; 1); actc += 1;
  actc[] = slider14 ? (maxchannels=4; 1); actc += 1;
  actc[] = slider15 ? (maxchannels=5; 1); actc += 1;
  actc[] = slider16 ? (maxchannels=6; 1); actc += 1;
  actc[] = slider17 ? (maxchannels=7; 1); actc += 1;
  actc[] = slider18 ? (maxchannels=8; 1); actc += 1;
  actc[] = slider19 ? (maxchannels=9; 1); actc += 1;
  actc[] = slider20 ? (maxchannels=10; 1); actc += 1;
  actc[] = slider21 ? (maxchannels=11; 1); actc += 1;
  actc[] = slider22 ? (maxchannels=12; 1); actc += 1;
  actc[] = slider23 ? (maxchannels=13; 1); actc += 1;
  actc[] = slider24 ? (maxchannels=14; 1); actc += 1;
  actc[] = slider25 ? (maxchannels=15; 1); actc += 1;
  actc[] = slider26 ? (maxchannels=16; 1); actc += 1;

  showSum = slider27;
);

function initCh()
(
  slider50 == 0 ? (
    slider11 = slider12 = slider13 = slider14 = slider15 = slider16 = slider17 = slider18 = slider19 = slider20 = slider21 = slider22 = slider23 = slider24 = slider25 = slider26 = 0;
  
    i1 = 11;
    loop(num_ch*.5,
      slider(i1) = 1;
      i1 = i1 + 1;
    );
    
    updateChannelSliders();
    slider50 = 1;
  )
);

function printColorMapName(cmapidx, inv)
(
  ( cmapidx == 1 && inv == 0 ) ? gfx_printf( "Magma" ) : (
  ( cmapidx == 1 && inv == 1 ) ? gfx_printf( "Magma inv" ) : (
  ( cmapidx == 2 && inv == 0 ) ? gfx_printf( "Viridis" ) : (
  ( cmapidx == 2 && inv == 1 ) ? gfx_printf( "Viridis inv" ) : (
  ( cmapidx == 3 && inv == 0 ) ? gfx_printf( "Inferno" ) : (
  ( cmapidx == 3 && inv == 1 ) ? gfx_printf( "Inferno inv" ) : (
  ( cmapidx == 4 && inv == 0 ) ? gfx_printf( "Plasma" ) : (
  ( cmapidx == 4 && inv == 1 ) ? gfx_printf( "Plasma inv" ) : (
    gfx_printf("Unknown"); ))))))));
);

gfx_ext_retina  = 1.0;
ext_nodenorm    = 1; 
gfx_clear       = -1;
windowtype      = -1;
fftidx          = -1;
scaling         = 1;
max_fft_size    = 32768;
fftsize         = max_fft_size;
window          = max_fft_size + (max_fft_size*0.5 - 1);
histsize        = max_fft_size + (max_fft_size*0.5 - 1);
//fftworkspace    = window+(max_fft_size*0.5 + 1);
//integrate_buf   = fftworkspace + max_fft_size*2;

SONOSURFACE   = 4;
gfx_dest      = SONOSURFACE;
gfx_setimgdim(SONOSURFACE, 0.5*fftsize, 0.5*fftsize);
gfx_x=gfx_y   = 0;
gfx_r=gfx_g   = 0;
gfx_b         = 0;
gfx_a         = 1;
gfx_rectto(0.5*fftsize, 0.5*fftsize);
gfx_dest      = -1;

recpositions    = 100;
histsizes       = 200;
fftworkspaces   = 300;
integrate_bufs  = 400;
shifts          = 500;
activechannels  = 600;
maxchannels     = 16;
totchannels     = 16;
offscreenbuf    = 1;

bgcolor         = 0;
drawHz          = 0;

updateChannelSliders();

rpos      = recpositions;
hsize     = histsizes;
fftw      = fftworkspaces; 
ibuf      = integrate_bufs;
csh       = shifts;
curshift  = 65536;

spacing   = 3;
loop(totchannels,
  rpos[]  = curshift;
  hsize[] = window + curshift;
  fftw[]  = window + (max_fft_size*0.5 + 1) + curshift;
  ibuf[]  = window + (max_fft_size*0.5 + 1) + max_fft_size*2 + curshift;
  csh[]   = curshift;
  
  memset(fftw[],0,max_fft_size);
  memset(ibuf[],0,max_fft_size);
  memset(rpos[],0,max_fft_size);
  
  rpos  += 1;
  hsize += 1;
  fftw  += 1;
  ibuf  += 1;
  csh   += 1;
  
  curshift += spacing*65536;
);

// Memory for the filter on the spectrum
filtout   = 65536*spacing*(totchannels+1);
memset(filtout,0,max_fft_size);
filtout2  = 65536*spacing*(totchannels+2);
memset(filtout2,0,max_fft_size);

// Memory for the sum signals
sumshl  = 65536*spacing*(totchannels+3);
sumposl = sumshl;
fftwl   = window + (max_fft_size*0.5 + 1) + sumshl;
ibufl   = window + (max_fft_size*0.5 + 1) + max_fft_size*2 + sumshl;
sumhsl  = window + sumshl;

sumshr  = 65536*spacing*(totchannels+4);
sumposr = sumshr;
fftwr   = window + (max_fft_size*0.5 + 1) + sumshr;
ibufr   = window + (max_fft_size*0.5 + 1) + max_fft_size*2 + sumshr;
sumhsr  = window + sumshr;

// Buffer for delay compensation
latencyBuffer  = 65536*spacing*(totchannels+5);
latencyBufferMax = latencyBuffer + 65536; // should be x64
latencyPtr = latencyBuffer;
memset(latencyBuffer, 0, latencyBufferMax - latencyBuffer);

memA  = 65536*spacing*(totchannels+8);
memB  = 65536*spacing*(totchannels+9);
memA2 = 65536*spacing*(totchannels+10);
memB2 = 65536*spacing*(totchannels+11);

@serialize
memA  = 65536*spacing*(totchannels+8);
memB  = 65536*spacing*(totchannels+9);
memA2 = 65536*spacing*(totchannels+10);
memB2 = 65536*spacing*(totchannels+11);
file_mem(0, memA, 65536);
file_mem(0, memB, 65536);
file_mem(0, memA2, 65536);
file_mem(0, memB2, 65536);
file_var(0, sModeA);
file_var(0, kernelSizeA);
file_var(0, fftSizeA);
file_var(0, xscaleA);
file_var(0, sModeB);
file_var(0, kernelSizeB);
file_var(0, fftSizeB);
file_var(0, xscaleB);

@slider
slider2 != lfloor ? old_w=0;

@block
slider2 != lfloor ? (
  lfloor = slider2;
  minvol=2*exp(log(10)/20*slider2);
);

@sample
iLoad     = 0;
jch       = 0;
active    = activechannels;
recpos    = recpositions;
hs        = histsizes;
sh        = shifts;
sl        = 0;
sr        = 0;

( slider44 == 0 ) ?
(
  loop(maxchannels,
    (active[] == 1 || (slider28==iLoad)) ? (
      recpos[][]=.5*(spl(jch)+spl(jch+1));
      recpos[] = ((recpos[]+1) >= hs[] ? sh[] : (recpos[]+1));
    );

    sl = sl+spl(jch);
    sr = sr+spl(jch+1);
    
    active += 1;
    recpos += 1; 
    hs     += 1;
    sh     += 1;
    jch    += 2;
    iLoad  += 1;
  );

  sumposl[] = sl;
  sumposr[] = sr;
  sumposl = ((sumposl+1) >= sumhsl ? sumshl : (sumposl+1));
  sumposr = ((sumposr+1) >= sumhsr ? sumshr : (sumposr+1));  
);

latencyCompensation ? (
  j = 0;
  loop(num_ch,
    latencyPtr[] = spl(j);
    latencyPtr += 1;
    j += 1;
  );
  ( latencyPtr > latencyBufferMax ) ? latencyPtr -= (latencyBufferMax - latencyBuffer);
  
  latencyRead = latencyPtr - num_ch * latencyLength;
  ( latencyRead <= latencyBuffer ) ? latencyRead += (latencyBufferMax - latencyBuffer);
  j = 0;
  loop(num_ch,
    spl(j) = latencyRead[];
    latencyRead += 1;
    j += 1;
  );
);

@gfx 900 600
initCh();
updateChannelSliders();
gfx_ext_retina>1 ? gfx_setfont(1,"Arial",max(12,12*gfx_ext_retina),'b') : gfx_setfont(0);
gfx_measurestr("ly", jnk, fheight);

function proceed(val, h)
(
  gfx_x < val ? (
    gfx_y = gfx_y + h;
    gfx_x = optBar;
    ) : gfx_y = gfx_y - 5;
  gfx_y;
);

/* Button that wraps when there is insufficient space*/
function draw_button_safe(yp, str, wcomp) 
  instance(w,h,x,y) 
  globals(gfx_r,gfx_g,gfx_b,gfx_x,gfx_y,gfx_a,bgcolor,slider8) 
  local(xp)
(
  gfx_measurestr(str, w, h);
  xp = gfx_x - (w+3);
  yp = proceed(wcomp+w+8, h+9);
  xp = gfx_x - (w+3);
  x=xp;
  y=yp;
  gfx_set(bgcolor,bgcolor,bgcolor-.15*bgcolor);
  w+=3;
  h+=9;
  gfx_rect(x,y,w,h);

  ( bgcolor == 1 ) ? (
    gfx_set(1-.4, 1-.6, 1-.8);
  ) : (
    gfx_set(0 * bgColor + 0.9 * ( 1 - bgColor ), 1 * bgColor + 0.9 * ( 1 - bgColor ),  1 * bgColor + 0.6 * ( 1 - bgColor ));  
  );
  gfx_line(x,y,x+w,y);
  gfx_line(x+w,y,x+w,y+h);
  gfx_line(x,y+h,x+w,y+h);
  gfx_line(x,y,x,y+h);
  
  gfx_a = .333333*gfx_a;
  gfx_line(x-1,y+1,x+w+1,y+1);
  gfx_line(x+w+1,y,x+w+1,y+h+1);
  gfx_line(x,y+h+1,x+w,y+h+1);
  gfx_line(x-1,y,x-1,y+h+1);
  gfx_a = 3*gfx_a;
  
  h+=1;
  w+=1;
  gfx_x=xp+2; gfx_y=yp+5;
  gfx_drawstr(str);
  gfx_x = xp - 8;
  
  y+h
);

function draw_button(xp, yp, str) 
  instance(w,h,x,y) 
  globals(gfx_r,gfx_g,gfx_b,gfx_x,gfx_y,gfx_a,bgcolor,slider8) 
(
  gfx_measurestr(str, w, h);
  xp -= w+3;
  x=xp;
  y=yp;
  gfx_set(bgcolor,bgcolor,bgcolor-.15*bgcolor);
  w+=3;
  h+=9;
  gfx_rect(x,y,w,h);

  ( bgcolor == 1 ) ? (
    gfx_set(1-.4, 1-.6, 1-.8);
  ) : (
    gfx_set(0 * bgColor + 0.9 * ( 1 - bgColor ), 1 * bgColor + 0.9 * ( 1 - bgColor ),  1 * bgColor + 0.6 * ( 1 - bgColor ));  
  );
  gfx_line(x,y,x+w,y);
  gfx_line(x+w,y,x+w,y+h);
  gfx_line(x,y+h,x+w,y+h);
  gfx_line(x,y,x,y+h);
  
  gfx_a = .333333*gfx_a;
  gfx_line(x-1,y+1,x+w+1,y+1);
  gfx_line(x+w+1,y,x+w+1,y+h+1);
  gfx_line(x,y+h+1,x+w,y+h+1);
  gfx_line(x-1,y,x-1,y+h+1);
  gfx_a = 3*gfx_a;
  
  h+=1;
  w+=1;
  gfx_x=xp+2; gfx_y=yp+5;
  gfx_drawstr(str);
  gfx_x = xp;
  
  y+h
);

function draw_button_fixedWidth(xp, yp, iw, str) 
  instance(w,h,x,y) 
  local(fw, fh)
  globals(gfx_r,gfx_g,gfx_b,gfx_x,gfx_y,gfx_a,bgcolor,slider8) 
(
  w = iw;
  gfx_measurestr(str, fw, h);
  xp -= w;
  x=xp;
  y=yp;
  gfx_set(bgcolor,bgcolor,bgcolor-.15*bgcolor);
  h+=9;
  gfx_rect(x,y,w,h);

  ( bgcolor == 1 ) ? (
    gfx_set(1-.4, 1-.6, 1-.8);
  ) : (
    gfx_set(0 * bgColor + 0.9 * ( 1 - bgColor ), 1 * bgColor + 0.9 * ( 1 - bgColor ),  1 * bgColor + 0.6 * ( 1 - bgColor ));  
  );
  gfx_line(x,y,x+w,y);
  gfx_line(x+w,y,x+w,y+h);
  gfx_line(x,y+h,x+w,y+h);
  gfx_line(x,y,x,y+h);
  
  gfx_a = .333333*gfx_a;
  gfx_line(x-1,y+1,x+w+1,y+1);
  gfx_line(x+w+1,y,x+w+1,y+h+1);
  gfx_line(x,y+h+1,x+w,y+h+1);
  gfx_line(x-1,y,x-1,y+h+1);
  gfx_a = 3*gfx_a;
  
  h+=1;
  w+=1;
  gfx_x=x+.5*(w-fw); gfx_y=yp+5;
  gfx_drawstr(str);
  gfx_x = xp;
  
  y+h
);

function draw_button2(xp, yp, str, active, selected, solo, somethingsolo, coloridx)
  instance(w,h,x,y,fade,cc) 
  globals(gfx_r,gfx_g,gfx_b,gfx_x,gfx_y,gfx_a,slider8,bgcolor)
(
  gfx_measurestr(str, w, h);
  xp -= w+6;
  x=xp;
  y=yp;
  gfx_set(bgcolor,bgcolor,bgcolor-.15*bgcolor);
  w+=10;
  h+=10;
  gfx_rect(x,y,w,h);
  ( solo == 0 || somethingsolo > -1 ) ? active = active - 0;

  cc = (10000 + 100*floor(slider8));
  cc += 3 * coloridx; 
  ( coloridx > -1 ) ? (
    gfx_set(cc[0], cc[1], cc[2]);
    gfx_a = 0.8;
    gfx_rect(x, y+h,w,3);
    gfx_a = .4;
    gfx_rect(x, y, w, h);
    gfx_a = 0.9;
    gfx_rect(x-1, y+h+2,w+3,3);
    gfx_a = 1;
  );
  
  fade = .7+1 * active;  
  ( bgcolor == 1 ) ? (
    gfx_set(1-.4*fade+.8*solo, 1-.6*fade+.5*selected, 1-.8*fade);
  ) : (
    gfx_set(.4*fade+.8*solo, .6*fade+.5*selected, .8*fade);
  );
  gfx_line(x,y,x+w,y);
  gfx_line(x+w,y,x+w,y+h);
  gfx_line(x,y+h,x+w,y+h);
  gfx_line(x,y,x,y+h);
  selected == 1 ? (
    gfx_line(x+1,y,x+1,y+h);
    gfx_line(x,y+h-1,x+w,y+h-1);
    gfx_line(x,y+1,x+w,y+1);
    gfx_line(x+w-1,y,x+w-1,y+h);
  );
  
  gfx_a = .333333*gfx_a;
  gfx_line(x-1,y+1,x+w+1,y+1);
  gfx_line(x+w+1,y,x+w+1,y+h+1);
  gfx_line(x,y+h+1,x+w,y+h+1);
  gfx_line(x-1,y,x-1,y+h+1);
  gfx_a = 3*gfx_a;
  
  h+=1;
  w+=1;
  gfx_x=xp+5; gfx_y=yp+6;
  gfx_drawstr(str);
  gfx_x = xp;
  
  y+h
);

function draw_button2_fixedWidth(xp, yp, _w, str, active, selected, solo, somethingsolo, coloridx)
  instance(x,y, w, h,fade,cc) 
  globals(gfx_r,gfx_g,gfx_b,gfx_x,gfx_y,gfx_a,slider8,bgcolor)
  local(fw, fh)
(
  gfx_measurestr(str, fw, fh);
  
  w = _w;
  xp -= w;
  x = xp;
  y = yp;
  fh += 10;
  h = fh;

  gfx_set(bgcolor,bgcolor,bgcolor-.15*bgcolor);
  gfx_rect(x,y,w,fh);
  ( solo == 0 || somethingsolo > -1 ) ? active = active - 0;

  cc = (10000 + 100*floor(slider8));
  cc += 3 * coloridx; 
  ( coloridx > -1 ) ? (
    gfx_set(cc[0], cc[1], cc[2]);
    gfx_a = 0.8;
    gfx_rect(x, y+h,w,3);
    gfx_a = .4;
    gfx_rect(x, y, w, h);
    gfx_a = 0.9;
    gfx_rect(x-1, y+h+2,w+3,3);
    gfx_a = 1;
  );
  
  fade = .7+1 * active;  
  ( bgcolor == 1 ) ? (
    gfx_set(1-.4*fade+.8*solo, 1-.6*fade+.5*selected, 1-.8*fade);
  ) : (
    gfx_set(.4*fade+.8*solo, .6*fade+.5*selected, .8*fade);
  );
  gfx_line(x,y,x+w,y);
  gfx_line(x+w,y,x+w,y+fh);
  gfx_line(x,y+fh,x+w,y+fh);
  gfx_line(x,y,x,y+fh);
  
  gfx_a = .333333*gfx_a;
  gfx_line(x-1,y+1,x+w+1,y+1);
  gfx_line(x+w+1,y,x+w+1,y+fh+1);
  gfx_line(x,y+fh+1,x+w,y+fh+1);
  gfx_line(x-1,y,x-1,y+fh+1);
  gfx_a = 3*gfx_a;
  
  selected == 1 ? (
    gfx_line(x+1,y,x+1,y+fh);
    gfx_line(x,y+fh-1,x+w,y+fh-1);
    gfx_line(x,y+1,x+w,y+1);
    gfx_line(x+w-1,y,x+w-1,y+fh);
  );
  
  w+=1;
  
  gfx_x=x+.5*(w-fw); gfx_y=yp+5;
  gfx_drawstr(str);
  
  gfx_x = x;
  
  y+fh
);

function hit_button(xp,yp,cm) 
  instance(w,h,x,y) 
  globals(cap_mode, cap_last_x, cap_last_y) 
( 
  xp>=x&&yp>=y&&xp<x+w&&yp<y+h ? (
    cap_last_x = xp;
    cap_last_y = yp;
    cap_mode=cm;
  );
);


function drag_slider(x, y, z, dx)
  globals(mouse_y, cap_last_y, cap_drag)
(
  x = min(max(x + dx * (cap_last_y-mouse_y),y),z);
  cap_last_y=mouse_y;
  cap_drag=1;
  x;
);

function mouse_wheel_button(x, y, z, dx)
(
  x = min(max(x + dx,y),z);
  x;
);

function drag_slider_precise(x, y, z, dx)
  globals(mouse_cap)
(
  (mouse_cap & 4) ? dx *= 0.1;
  drag_slider(x, y, z, dx);
);

function drag_slider_micro(x, y, z, dx)
  globals(mouse_cap)
(
  (mouse_cap & 4) ? dx *= 0.01;
  drag_slider(x, y, z, dx);
);


function cycle_slider(x, y, z, dx)
  globals(last_mouse_cap)
(
  (last_mouse_cap & 16) ? x -= dx : x += dx;
  y > z ? ( dx=y; y=z; z=dx; );
  x > z ? y : x < y ? z : x;
);
  
function scope.drawGrid(xp, yp, wp, hp, scaling)
  instance(w, h, x, y, dx, last, xcoord, hh, sig)
  globals(gfx_r, gfx_g, gfx_b, gfx_a, gfx_x, gfx_y, bufl)
(
  gfx_r=gfx_g=gfx_b=gfx_a=.4;
  y = yp + 0.5*hp;
  while( y<(yp+hp) ? ( 
    gfx_line(0, y, wp, y);
    y = y + 50*scaling;
    ) );
  
  y = yp + 0.5*hp;
  while( y>yp ? ( 
    gfx_line(0, y, wp, y);
    y = y - 50*scaling;
    ) );
    
  x = xp;
  while( x<(xp+wp) ? ( 
    gfx_line(x, yp, x, yp+hp);
    x = x + .1 * w;
    ) );
);
  
function scope.drawSignal( xp, yp, wp, hp, rpos, scaling, sampleSize, rr, gg, bb)
  instance(w, h, x, y, dx, last, xcoord, hh, sig)
  globals(gfx_r, gfx_g, gfx_b, gfx_a, gfx_x, gfx_y, bufl)
(
  w = wp;
  h = hp;
  hh = 0.5 * h;
  
  dx = w / sampleSize;
  last = scaling * ( rpos[] );
  xcoord = x;
  
  scope.drawGrid(xp, yp, wp, hp, scaling);
  
  x = xp;
  y = yp;
  gfx_r=gfx_g=gfx_b=gfx_a=1.;
  gfx_line(xcoord,  y+h,  xcoord+w,   y+h);
  gfx_line(xcoord,  y,    xcoord+w,   y);
  gfx_line(xcoord,  y,    xcoord,     y+h);  
  gfx_line(xcoord+w,y,    xcoord+w,   y+h);    
  
  gfx_r=rr; gfx_g=gg; gfx_b=bb; gfx_a=.6;
  loop(sampleSize,
    xcoord += dx;
    sig = scaling * ( rpos[] );
    ( sig > 1.0 ) ? sig = 1.0 : ( sig < -1.0 ? sig = -1.0 );
    
    gfx_line(xcoord,y+hh*sig+hh,xcoord+dx,y+hh*last+hh);
    last = sig;
    rpos += 1;
  );
);

function scope.drawMovingSignal( xp, yp, wp, hp, rpos, endpos, startpos, scaling, sampleSize, rr, gg, bb)
  instance(w, h, x, y, dx, last, xcoord, hh, sig)
  globals(gfx_r, gfx_g, gfx_b, gfx_a, gfx_x, gfx_y, bufl)
(
  hh = 0.5 * h;
  
  rpos = rpos + 1;
  dx = w / sampleSize;
  last = scaling * ( rpos[] );
  xcoord = x;
  
  scope.drawGrid(xp, yp, wp, hp, scaling);
  
  x = xp;
  y = yp;
  w = wp;
  h = hp;
  
  gfx_r=gfx_g=gfx_b=gfx_a=1.;
  gfx_line(xcoord,  y+h,  xcoord+w,   y+h);
  gfx_line(xcoord,  y,    xcoord+w,   y);
  gfx_line(xcoord,  y,    xcoord,     y+h);  
  gfx_line(xcoord+w,y,    xcoord+w,   y+h);    
  gfx_r=rr; gfx_g=gg; gfx_b=bb; gfx_a=.6;
  loop(sampleSize,
    xcoord += dx;
    sig = scaling * ( rpos[] );
    ( sig > 1.0 ) ? sig = 1.0 : ( sig < -1.0 ? sig = -1.0 );
    
    gfx_line(xcoord,y+hh*sig+hh,xcoord+dx,y+hh*last+hh);
    last = sig;
    rpos = ( rpos > endpos ) ? startpos : rpos + 1;
  );
);

function hit(xp,yp,cm) 
  instance(w,h,x,y) 
  globals(cap_mode, cap_last_x, cap_last_y) 
( 
  xp>=x&&yp>=y&&xp<x+w&&yp<y+h ? (
    cap_last_x = xp;
    cap_last_y = yp;
    cap_mode=cm;
  );
);

function checkChannelButtons()
(
  hit = 0;
  ( slider36 == -1 ) ?
  (
    ch1.hit_button(mouse_x,mouse_y,11)  ? ( slider36 = -1; slider11=!slider11; slider_automate(slider11); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch2.hit_button(mouse_x,mouse_y,12)  ? ( slider36 = -1; slider12=!slider12; slider_automate(slider12); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch3.hit_button(mouse_x,mouse_y,13)  ? ( slider36 = -1; slider13=!slider13; slider_automate(slider13); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch4.hit_button(mouse_x,mouse_y,14)  ? ( slider36 = -1; slider14=!slider14; slider_automate(slider14); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch5.hit_button(mouse_x,mouse_y,15)  ? ( slider36 = -1; slider15=!slider15; slider_automate(slider15); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch6.hit_button(mouse_x,mouse_y,16)  ? ( slider36 = -1; slider16=!slider16; slider_automate(slider16); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch7.hit_button(mouse_x,mouse_y,17)  ? ( slider36 = -1; slider17=!slider17; slider_automate(slider17); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch8.hit_button(mouse_x,mouse_y,18)  ? ( slider36 = -1; slider18=!slider18; slider_automate(slider18); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch9.hit_button(mouse_x,mouse_y,19)  ? ( slider36 = -1; slider19=!slider19; slider_automate(slider19); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch10.hit_button(mouse_x,mouse_y,20) ? ( slider36 = -1; slider20=!slider20; slider_automate(slider20); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch11.hit_button(mouse_x,mouse_y,21) ? ( slider36 = -1; slider21=!slider21; slider_automate(slider21); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch12.hit_button(mouse_x,mouse_y,22) ? ( slider36 = -1; slider22=!slider22; slider_automate(slider22); updateChannelSliders(); old_w = 0; hit=1; ) :                                                                       
    ch13.hit_button(mouse_x,mouse_y,23) ? ( slider36 = -1; slider23=!slider23; slider_automate(slider23); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch14.hit_button(mouse_x,mouse_y,24) ? ( slider36 = -1; slider24=!slider24; slider_automate(slider24); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch15.hit_button(mouse_x,mouse_y,25) ? ( slider36 = -1; slider25=!slider25; slider_automate(slider25); updateChannelSliders(); old_w = 0; hit=1; ) :
    ch16.hit_button(mouse_x,mouse_y,26) ? ( slider36 = -1; slider26=!slider26; slider_automate(slider26); updateChannelSliders(); old_w = 0; hit=1; );
    
    chA.hit_button(mouse_x,mouse_y,200) ? ( showA=!showA; slider_automate(showA); );
    chB.hit_button(mouse_x,mouse_y,200) ? ( showB=!showB; slider_automate(showB); );
    
  ) : ( slider36 = -1 );
  hit == 1;
);

SONOSURFACE2 = 3;
function drawSono(sonogramBuffer, sonoColorMap, invert, sonoScale, xp, yp, wp, hp, logarithmic, fmaxFactor)
  instance(w, h, x, y, preSonoDest, preSonoX, preSonoY, sonoSize,sonoSizeX, sonoColorLoc, sonoColorMap, iv, sonosurf, blurred, tx, tl, i, xscale, logarithmic, wsc, cv, N, norm, fmax)
  globals(slider44, gfx_dest, gfx_r, gfx_g, gfx_b, gfx_a, gfx_x, gfx_y, fftsize, SONOSURFACE, SONOSURFACE2, gfx_mode)
  local(val)
(
  x = xp;
  y = yp;
  w = wp;
  h = hp;

  sonosurf = SONOSURFACE;
  blurred  = SONOSURFACE2;    
  
  preSonoDest = gfx_dest;
  gfx_a = 1;
  //sonoSize  = 2048;
  sonoSize  = hp;
  sonoSizeX = 256;

  // MaxF
  fmax     = fftsize / fmaxFactor;

  // For log-drawing
  xscale   = 800/(fmax-4);
  wsc      = sonoSize/(log(1+.5*fmax*xscale));
  
  // Start by drawing the previous buffer to this one
  ( slider44 == 0 ) ? (
    gfx_dest = sonosurf;
    gfx_setimgdim(sonosurf, sonoSizeX, sonoSize);
    gfx_setimgdim(blurred, sonoSizeX, sonoSize);  
    gfx_x = -1;
    gfx_y = 0;
    gfx_blit(sonosurf, 1, 0);
  
    // Draw the stuff
    gfx_x = sonoSizeX-10;
    gfx_y = sonoSize;
    tl = 0;
    i = 0; 
    
    ( logarithmic == 0 ) ? 
    (
      // Actual FFT density is better than what we can display
      N = .5*fmax/sonoSize;
      norm = sonoScale/N;
      ( N > 1 ) ?
      (
        gfx_x = sonoSizeX-1;
        loop(sonoSize,
          cv = 0;
          loop(N,
            cv = cv + norm * sonogramBuffer[];
            sonogramBuffer += 1;
          );
        
          sonoColorLoc = sonoColorMap + 3*ceil(  (  invert + ( 1 - 2*invert ) * (1-exp(-cv))  )*255);   
          gfx_setpixel(sonoColorLoc[],sonoColorLoc[1],sonoColorLoc[2]);
          gfx_y -= 1;
        );
      ) : ( 
        // Actual FFT density is crappier    
        N = 1/N;
        i = sonoSize;
        loop(sonoSize/N,
          sonoColorLoc = sonoColorMap + 3*ceil(  (  invert + ( 1 - 2*invert ) * (1-exp(-sonogramBuffer[]*sonoScale))  )*255);   
          gfx_r = sonoColorLoc[];
          gfx_g = sonoColorLoc[1];
          gfx_b = sonoColorLoc[2];
          gfx_a = 1.0;
          
          gfx_line(sonoSizeX-1,i,sonoSizeX-1,i+N);
          
          i -= N;
          sonogramBuffer += 1;
        );
      )
    ) : (
      tl = 0; val = 0;
      loop(.5*fmax,
        tx = log(1.0+i*xscale)*wsc;
        //val = val + sonogramBuffer[];
        val = max(val, sonogramBuffer[]);
        
        (tx - tl) > 0.999999 ?
        (  
          sonoColorLoc = sonoColorMap + 3*ceil(  (  invert + ( 1 - 2*invert ) * (1-exp(- val*sonoScale))  )*255);
          val = 0;
          
          gfx_r = sonoColorLoc[];
          gfx_g = sonoColorLoc[1];
          gfx_b = sonoColorLoc[2];    
          gfx_line(sonoSizeX-1,sonoSize-tl,sonoSizeX-1,sonoSize-tx);
          tl = tx;
        );
        
        i += 1;
        sonogramBuffer += 1;
      );
    );
  );
  
  // Draw the sonogram to the screen
  gfx_dest = preSonoDest;
  gfx_x = x;
  gfx_y = y;
  gfx_a = .95;
  gfx_blit(sonosurf, 1, 0, 0, 0, sonoSizeX, sonoSize, x, y, w, h);  
  
  // Blur it in a second buffer
  /*gfx_dest = blurred;
  gfx_x = gfx_y = 0;
  gfx_blit(sonosurf, 1, 0);
  gfx_x = gfx_y = 0;
  loop(2,
    gfx_blurto(sonoSizeX,sonoSizeX);
  );
  
  // Add it on top
  gfx_mode = 1;
  gfx_x = gfx_y = 0;
  gfx_dest = preSonoDest; 
  gfx_blit(blurred, 1, 0, 0, 0, sonoSizeX, sonoSize, x, y, w, h);  
  gfx_blit(blurred, 1, 0, 0, 0, sonoSizeX, sonoSize, x, y, w, h); */   
  gfx_mode = 0;
);

function drawGrid()
(
  intensity = 0 * bgColor + 1 * ( 1 - bgColor );
  textintensity = 0.1 * bgColor + 1.0 * ( 1 - bgColor ); 
    
  // draw horz grid
  gfx_r=gfx_g=gfx_b=intensity;
  gv=1;
  cnt=100;
  gfx_y=10;

  rescaleY = (1-(spectrum_yoffset+spectrum_yoffsetbottom)/gfx_h);
  y=20-log(gv)*sc*rescaleY + spectrum_yoffset;  
  while(
    y> gfx_y ? (
      gfx_r=gfx_g=gfx_b=intensity; gfx_a=0.8 * slider39 * slider40;
      gfx_line(0,y,gfx_w-spectrum_xpad,y,0);
      bottom_line = gfx_y;
      gfx_x=7; 
      gfx_y=y+2;
      gfx_r=gfx_g=gfx_b=textintensity; gfx_a=0.9;
      gfx_drawnumber(log10(gv)*20,0);
      gfx_drawchar($'d');
      gfx_drawchar($'B');
      gfx_y+=gfx_texth;
    );
    gv*=0.5;
  
    y=20-log(gv)*sc*rescaleY + spectrum_yoffset;
    y<(gfx_h-spectrum_yoffsetbottom) && cnt-=1 > 0;
  );
  
  wsc = scaling*gfx_w/log(1+400) * (spectrum_xmax/gfx_w);
  
  // draw vert grid
  f=20;
  gfx_x+=4;
  lx=gfx_x;
  ltxt = 0;
  tx = log(1.0+((f/srate-spectrum_xoffset)*2.0)*400) * wsc;
  while(
    gfx_r=gfx_g=gfx_b=intensity; gfx_a=0.8 * slider39 * slider40;
    dotext = tx > gfx_x && f!=40 && f!=4000 && f != 15000 &&
       (f<400 || f >= 1000 || f == 500) && (f<6000 || f>=10000) || (tx-ltxt)>.1*gfx_w;
    tx > lx ? ( lx=tx+4; gfx_line(tx,20-log(1)*sc+spectrum_yoffset,tx,gfx_h - spectrum_yoffsetbottom - (dotext ? 0 : gfx_texth+2),0); );
    gfx_r=gfx_g=gfx_b=textintensity; gfx_a=0.9;
    dotext ? (
      ltxt = tx;
      gfx_x = tx + 3;
      gfx_y = gfx_h-gfx_texth-spectrum_yoffsetbottom;
      gfx_line( gfx_x-3, gfx_y, gfx_x-3, gfx_y+gfx_texth );
      f>=1000 ? gfx_printf("%dkHz",f*.001) : gfx_printf("%dHz",f);
    );
    f += (f<100?10:f<1000?100:f<10000?1000:5000);
    tx = log(1.0+((f/srate-spectrum_xoffset)*2.0)*400) * wsc;
    tx < spectrum_xmax
  );
);

function drawFFT(idx, rpos, fftwspace, intbuf, bufStart, histEnd, rr, gg, bb, fill, draw, fftsize, xscale, smoothMode, kernelSize)
(
  ( smoothing > 0 ) ? (
    ( smoothMode == 0 ) ? (
      // Convolve it
      bufout      = filtout+kernelSize;
      fout        = filtout2;
      scfac       = kernelSize / log(1+400);
      jk          = 1;
      
      loop(fftsize*0.5,
        tmp = 0;
        curSize   = ceil( scfac * log(1.0+jk*xscale) );
        kern      = bufout-curSize;
        tsc       = 1 / (2*curSize+1);
        loop(2*curSize+1,
          tmp = tmp + kern[];
          kern += 1;
        );
        fout[] = tmp * tsc;
        bufout += 1;
        fout += 1;
        jk += 1;
      );
    
      bufout = filtout2;
    ) : ( smoothMode == 1 ) ? (
      // Determine maximum
      bufout      = filtout+kernelSize;
      fout        = filtout2;
      scfac       = kernelSize / log(1+400);
      jk          = 1;
      
      loop(fftsize*0.5,
        tmp       = 10000;
        curSize   = ceil( scfac * log(1.0+jk*xscale) );
        kern      = bufout-curSize;
        loop(2*curSize+1,
          tmp = min( tmp, kern[] );
          
          kern += 1;
        );
        fout[] = tmp;
        bufout += 1;
        fout += 1;
        jk += 1;
      );
          
      bufout = filtout2;
    ) : ( smoothMode == 2 ) ? (
      // LOESS filtering
      bufout      = filtout+kernelSize;
      fout        = filtout2;
      scfac       = kernelSize / log(1+400);
      jk          = 1;
      
      loop(fftsize*0.5,
        tmp       = 10000;
        curSize   = 1+ceil( scfac * log(1.0+jk*xscale) );
        kern      = bufout-curSize;
        
        SumWtY    = 0;
        isize     = 1.0 / curSize;
        xij       = - curSize;
 
        SumWts    = 1.1571 * curSize;
        loop(2*curSize+1,
          d       = abs(xij) * isize;
          w       = (1.0 - d*d*d);
          w       = w*w*w;
          SumWtY  = SumWtY + kern[] * w;
                    
          kern    += 1;
          xij     += 1;
        );
        
        fout[] = SumWtY / SumWts;
        bufout += 1;
        fout += 1;
        jk += 1;
      );
          
      bufout = filtout2;
    ) : ( smoothMode == 3 ) ? (
      // Adaptive filtering
      bufout      = filtout+kernelSize;
      fout        = filtout2;
      scfac       = kernelSize / log(1+400);
      jk          = 1;
      
      loop(fftsize*0.5,
        tmp       = 10000;
        curSize   = 1+ceil( scfac * log(1.0+jk*xscale) );
        kern      = bufout-curSize;
        
        SumWtY    = 0;
        isize     = 1.0 / curSize;
        xij       = - curSize;
 
        SumWts    = 1.1571 * curSize;
        loop(2*curSize+1,
          d       = abs(xij) * isize;
          w       = (1.0 - d*d*d);
          w       = w*w*w;
          SumWtY  = SumWtY + kern[] * w;
                    
          kern    += 1;
          xij     += 1;
        );
        yAdaptive    = SumWtY / SumWts;
        
        res  = bufout[] - yAdaptive;
        ( -res < abs( M_est + 2*sqrt( S_est ) ) ) ?
        ( 
          alpha   = 0.99;
          M_est   = alpha * M_est  + ( 1 - alpha ) * res;
          Sq_est  = alpha * Sq_est + ( 1 - alpha ) * res * res;
          S_est   = Sq_est - M_est*M_est;
        ) : (
          // Don't use LOESS value at peaks
          yAdaptive = bufout[];
        );
        
        fout[] = yAdaptive;
        bufout += 1;
        fout += 1;
        jk += 1;
      );
          
      bufout = filtout2;
    )
  ) : bufout = filtout;
  
  draw ? (
    i = 0;
    curh = gfx_h-spectrum_yoffsetbottom;
    rescaleY = (1.0-(spectrum_yoffset+spectrum_yoffsetbottom)/gfx_h);
    ixsc = 0;
    prec = fftsize*spectrum_xoffset*xscale;
    loop(fftsize*0.5-kernelSize,
      tx = log(1.0+ixsc-prec)*wsc;
      ty = bufout[]*rescaleY + spectrum_yoffset;
      //ty > gfx_h-spectrum_yoffsetbottom ? ty = gfx_h-spectrum_yoffsetbottom;
      ty = min( ty, gfx_h - spectrum_yoffsetbottom );
  
      ( i && ( tx < spectrum_xmax ) ) ?
      ( 
        gfx_r=rr;
        gfx_g=gg;
        gfx_b=bb;
        
        fill/*fill?*/ ? (
          gfx_a=slider37;
          tx0=tx|0;
          lx0=lx|0;
          tx0>lx0? (
            ly < curh || ty < curh ? gfx_triangle(lx0,max(curh,ly),lx0,ly,tx0-1,ty,tx0-1,max(curh,ty));
          ) : (
            tx0 > fill_slast ? (
             fill_slast < curh ? gfx_line(fill_slast,curh,fill_slast,fill_slmin);
             fill_slmin=curh;
           ) : (
             fill_slmin=min(fill_slmin,ty);
            );
          );
          fill_slast=tx0;        
        );  
        gfx_a=1;
        gfx_x=lx; gfx_y=ly; gfx_lineto(tx,ty,1) ;
      );
  
      // CHECK THIS
      // ty<gfx_h ? update=1;
  
      lx=tx; ly=ty; ly2=ty2; bufout+=1; i+=1; ixsc+=xscale;
    )
  )
);

function processFFT(idx, rpos, fftwspace, intbuf, bufStart, histEnd, rr, gg, bb, fill, draw)
(
  buf1=rpos-fftsize;
  buf1<bufStart ? buf1+=histsize;
  buf2=window;
  buf3=fftwspace;
  loop(fftsize*.5 + 1,
    buf3[] = buf1[]*buf2[];
    buf3+=1;

    buf2+=1;
    (buf1+=1) >= histEnd ? buf1 -= histsize;
  );
  buf2-=1;
  loop(fftsize*.5 - 1,
    buf3[] = buf1[]*(buf2-=1)[];
    buf3+=1;
    (buf1+=1) >= histEnd ? buf1 -= histsize;
  );

  fft_real(fftwspace,fftsize);
  fft_permute(fftwspace,fftsize/2);
  fftwspace[1]=0;

  ascale=gfx_h/$pi*0.25;
  xscale=800/(fftsize-4);
 
  buf3=fftwspace;
  buf2=intbuf+max_fft_size*0.5;
  i=0;
  lx=0;
  
  // Draw phase
  draw ? (
    rescaleY = (1-(spectrum_yoffset+bottom_pad)/gfx_h);
    slider3 ? loop(fftsize*0.5,
      ang=-atan2(buf3[1],buf3[]);
      buf3+=2;
      
      integrate_en ? (
        ang = buf2[] += integrate_sc * (ang - buf2[]);
        buf2+=1;
      );
      
      ty2=(ang*ascale + gfx_h*0.5)*rescaleY + spectrum_yoffset;
      tx = log(1.0+i*xscale)*wsc;
  
      i && ( tx < spectrum_xmax ) ? 
      ( 
        gfx_x=lx; gfx_y=ly2; gfx_lineto(tx,ty2,1) ;
      );
  
      lx=tx; ly2=ty2;
      i+=1;
    );
  );
  
  smoothing = slider7;
  lx=0;
  i=0;
  fill_slmin=gfx_h;
  fill_slast=0;

  // Process FFT
  kernelSize  = floor( smoothing/5 + 1 );
  bufout = filtout + kernelSize;
  
  // Integrate the FFT over time to smooth it.
  // Note that yOut and buf3 both point to the FFTW space. yOut is written after buf3 is read so 
  // they don't conflict.
  buf3 = fftwspace;
  yOut = fftwspace;
  buf2 = intbuf;
  i    = 0;
  slope = .5*log(2)*slider38;
  prec = (10^(-500/20*2));
  loop(fftsize*0.5,   
    yOut[] = sqr(buf3[0])+sqr(buf3[1]);
    ty = log(max(yOut[],prec));
    ty = ty + slope*log(1.0+i*xscale);
    yOut += 1;
    buf3 += 2;    
  
    integrate_en ? (
      ty = buf2[] += integrate_sc * (ty - buf2[]);
      buf2+=1;
    );
      
    bufout[] = ty*-0.5*sc + 20;
    bufout += 1;
    i += 1;
  );
    
  // Copy the last few to the front
  bufout = filtout + kernelSize;
  last = bufout[];
  loop(kernelSize,
    bufout -= 1;
    bufout[] = last;
  );
  
  drawFFT(idx, rpos, fftwspace, intbuf, bufStart, histEnd, rr, gg, bb, fill, draw, fftsize, xscale, floor(slider45), kernelSize)
);
  
// Scrollwheel
(abs(mouse_wheel) > 0) ?
(
  mouse_wheel = 0.01 * mouse_wheel;
  sonogram.hit_button(mouse_x,mouse_y,-1) ? (
    ( slider29 == 0 ) ? slider35 = mouse_wheel_button(slider35, 1, 8, mouse_wheel) : slider31 = mouse_wheel_button(slider31, 1, 8, mouse_wheel);
  ) : ( 
    slider6 = mouse_wheel_button(slider6, 1, 8, mouse_wheel);
  );
  mouse_wheel = 0;
);

(mouse_cap & 2) ? (
  !(last_mouse_cap & 2) ? (
    ch1.hit_button(mouse_x,mouse_y,-1) ? ( slider28=0; slider_automate(slider28); old_w = 0);
    ch2.hit_button(mouse_x,mouse_y,-1) ? ( slider28=1; slider_automate(slider28); old_w = 0);
    ch3.hit_button(mouse_x,mouse_y,-1) ? ( slider28=2; slider_automate(slider28); old_w = 0);
    ch4.hit_button(mouse_x,mouse_y,-1) ? ( slider28=3; slider_automate(slider28); old_w = 0);
    ch5.hit_button(mouse_x,mouse_y,-1) ? ( slider28=4; slider_automate(slider28); old_w = 0);
    ch6.hit_button(mouse_x,mouse_y,-1) ? ( slider28=5; slider_automate(slider28); old_w = 0);
    ch7.hit_button(mouse_x,mouse_y,-1) ? ( slider28=6; slider_automate(slider28); old_w = 0);
    ch8.hit_button(mouse_x,mouse_y,-1) ? ( slider28=7; slider_automate(slider28); old_w = 0);
    ch9.hit_button(mouse_x,mouse_y,-1) ? ( slider28=8; slider_automate(slider28); old_w = 0);
    ch10.hit_button(mouse_x,mouse_y,-1) ? ( slider28=9; slider_automate(slider28); old_w = 0);
    ch11.hit_button(mouse_x,mouse_y,-1) ? ( slider28=10; slider_automate(slider28); old_w = 0);
    ch12.hit_button(mouse_x,mouse_y,-1) ? ( slider28=11; slider_automate(slider28); old_w = 0);                                                                        
    ch13.hit_button(mouse_x,mouse_y,-1) ? ( slider28=12; slider_automate(slider28); old_w = 0);
    ch14.hit_button(mouse_x,mouse_y,-1) ? ( slider28=13; slider_automate(slider28); old_w = 0);
    ch15.hit_button(mouse_x,mouse_y,-1) ? ( slider28=14; slider_automate(slider28); old_w = 0);
    ch16.hit_button(mouse_x,mouse_y,-1) ? ( slider28=15; slider_automate(slider28); old_w = 0);
    showSumButton.hit_button(mouse_x,mouse_y,-1) ? ( slider28=-1; slider_automate(slider28); old_w = 0);  
    showChannel = slider28;        

    ( mouse_y < (gfx_h-sono_yoffset_bottom-sono_size) ) && ( mouse_x < ( gfx_w - spectrum_xpad ) ) ? 
    (
      ( zoomMode == 0 ) ? (
        // Not zooming
        old_mouse_x = mouse_x;
        old_mouse_y = mouse_y;
        zoomMode = 1;
      );
      ( zoomMode == 2 ) ? (
        spectrum_xoffset = 0;
        slider6 = 1.0;
        scaling = slider6;
        slider_automate(slider6);
        zoomMode = 0;
      );
    );

    slider29 == 0 && cap_last_y != mouse_y ) ? (
      sonogram.hit_button(mouse_x,mouse_y,-1) ? ( slider32 = cycle_slider(slider32, 0, 7, 1);
    );  
  );
) : (
  ( zoomMode == 1 ) ? (
    zoomMode = 2;
      
    f1 = (1/800) * ( exp(old_mouse_x/wsc)-1 ) + spectrum_xoffset;
    f2 = (1/800) * ( exp(mouse_x/wsc)-1 ) + spectrum_xoffset;
    f2 < f1 ? (
      tmp = f2;
      f2 = f1;
      f1 = tmp;
    );
  
    f2-f1 > .001 ?
    (
      spectrum_xoffset = f1;  
      diff  = f2-spectrum_xoffset;
      
      // Notes
      // f = (1/800) * ( exp(mouse_x/wsc)-1 ) * srate + spectrum_xoffset * srate;
      // wsc   = spectrum_xmax / log( 1.0 + 800 * diff );
      // denom = spectrum_xmax / log( 1 + 400 );
  
      newscale = log( 1 + 400 ) / log( 1.0 + 800 * diff );
      slider6 = newscale;
      scaling = slider6;
      slider_automate(slider6);
    );
  );
);

(mouse_cap & 1) ? (
   !(last_mouse_cap & 1) ? (
      // Reset to defaults
       (cap_mode == 1||cap_mode == 4||cap_mode == 5||cap_mode == 6||cap_mode == 8||cap_mode == 9||cap_mode == 10||cap_mode ==30||cap_mode ==31
       ||cap_mode ==32 ||cap_mode ==40 ||cap_mode ==42||cap_mode ==44|| (cap_mode > 10 && cap_mode < 27)||cap_mode==28) && !cap_drag && cap_timer < 12 ?(
         cap_mode == 1 ? (
            slider2 = -90;
            slider_automate(slider2);
          ) : (
            cap_mode == 4 ? (
              slider5 = 0;
              slider_automate(slider5);
            ) : (
              cap_mode == 5 ? (
                slider6 = 1.0;
                slider_automate(slider6);
              ) : (
                cap_mode == 6 ? (
                  // Smoothing
                  slider7 = 20;
                  slider_automate(slider7);
                ) : (
                  cap_mode == 8 ? (                
                    // Sonogram
                    slider34 = !slider34;
//                    slider30 = 2500;
                    slider_automate(slider34);
                  ) : (
                    cap_mode == 9 ? (
                      // Time
                      slider34 = !slider34;
//                      slider31 = 1;
                      slider_automate(slider31);
                    ) : (
                      cap_mode == 10 ? (
                        // Sonogram scaling
                        slider35 = 1;
                        slider_automate(slider35);
                      ) : ( 
                        cap_mode == 29 ? (
                          // Slope
                          slider38 = 0;
                          slider_automate(slider38);
                        ) : (                       
                          cap_mode == 28 ? (
                            // Alpha
                            slider37 = .5;
                          ) : (
                            
                            cap_mode == 30 ? (
                                 // ColorBackground
                                 slider10 = .5;
                               ) : (
                               
                               cap_mode == 31 ? (
                                    // gridAlpha
                                    slider40 = .5;
                                  ) : (
                                  
                                  cap_mode == 32 ? (
                                       // Freeze
                                       slider44 = 0;
                                     ) : (
                                     cap_mode == 42 ? (
                                          // Options
                                          slider42 = 1;
                                          slider_automate(slider42);
                                        ) : (
                                  // One of the channel buttons
                                  (cap_mode > 10 && cap_mode < 27) ? (
                                    // Was something solo'd?
                                    ( slider36 > -1 ) ? ( slider36 = -1; ) : ( 
                                      ( ch1.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 11 ) ? ( slider36 = 0; slider11 = 1; slider_automate(slider11); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch2.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 12 ) ? ( slider36 = 1; slider12 = 1; slider_automate(slider12); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch3.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 13 ) ? ( slider36 = 2; slider13 = 1; slider_automate(slider13); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch4.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 14 ) ? ( slider36 = 3; slider14 = 1; slider_automate(slider14); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch5.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 15 ) ? ( slider36 = 4; slider15 = 1; slider_automate(slider15); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch6.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 16 ) ? ( slider36 = 5; slider16 = 1; slider_automate(slider16); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch7.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 17 ) ? ( slider36 = 6; slider17 = 1; slider_automate(slider17); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch8.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 18 ) ? ( slider36 = 7; slider18 = 1; slider_automate(slider18); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch9.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 19 ) ? ( slider36 = 8; slider19 = 1; slider_automate(slider19); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch10.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 20 ) ? ( slider36 = 9; slider20 = 1; slider_automate(slider20); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch11.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 21 ) ? ( slider36 = 10; slider21 = 1; slider_automate(slider21); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch12.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 22 ) ? ( slider36 = 11; slider22 = 1; slider_automate(slider22); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch13.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 23 ) ? ( slider36 = 12; slider23 = 1; slider_automate(slider23); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch14.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 24 ) ? ( slider36 = 13; slider24 = 1; slider_automate(slider24); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch15.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 25 ) ? ( slider36 = 14; slider25 = 1; slider_automate(slider25); updateChannelSliders(); ) : checkChannelButtons(); );
                                      ( ch16.hit_button(mouse_x,mouse_y,cap_mode) ? ( cap_mode == 26 ) ? ( slider36 = 15; slider26 = 1; slider_automate(slider26); updateChannelSliders(); ) : checkChannelButtons(); );
                                    );
                                  );
                                );
                              );
                            );
                          );
                        );
                      );
                    );
                  );
                );
              );
            );
          );
        );
         cap_mode=0;
         old_w=0;
       ) : (
         cap_mode = cap_drag = cap_timer = 0;
         store_a_button.hit_button(mouse_x,mouse_y,-1) ? ( copyTo = 1 ) :   
         store_b_button.hit_button(mouse_x,mouse_y,-1) ? ( copyTo = 2 ) :            
         freeze_button.hit_button(mouse_x,mouse_y,-1) ? ( slider44=1 - slider44; slider_automate(slider44); old_w = 0) :   
         options_button.hit_button(mouse_x,mouse_y,-1) ? ( slider42=!slider42; slider_automate(slider42); old_w = 0; ) :
         (
           slider42 == 0 ? (
              phase_button.hit_button(mouse_x,mouse_y,-1) ? ( slider3=!slider3; slider_automate(slider3); old_w = 0; );
              theme_button.hit_button(mouse_x,mouse_y,-1) ? ( slider43=!slider43; slider_automate(slider43); old_w = 0; );
              grid_button.hit_button(mouse_x,mouse_y,-1) ? ( slider39=!slider39; slider_automate(slider39); old_w = 0; );
              background_button.hit_button(mouse_x,mouse_y,30);
              gridAlpha_button.hit_button(mouse_x,mouse_y,31);
            );
          );
         
         channels_button.hit_button(mouse_x,mouse_y,-1) ? ( slider41=!slider41; slider_automate(slider41); old_w = 0; ) :
         
         sonogram.hit_button(mouse_x,mouse_y,8+slider29);
         
         checkChannelButtons() ? : 
                 slider42 == 0 ? showSumButton.hit_button(mouse_x,mouse_y,-1) ? ( slider27=!slider27; slider_automate(slider27); updateChannelSliders(); old_w = 0) :
                 slider42 == 0 ? floor_button.hit_button(mouse_x,mouse_y,1);
                 slider42 == 0 ? slope_button.hit_button(mouse_x,mouse_y,29);
                 slider42 == 0 ? window_button.hit_button(mouse_x,mouse_y,2);
                 slider42 == 0 ? fft_button.hit_button(mouse_x,mouse_y,3);
                 slider42 == 0 ? integrate_button.hit_button(mouse_x,mouse_y,4); 
                 slider42 == 0 ? scaling.hit_button(mouse_x,mouse_y,5);
                 slider42 == 0 ? colormap.hit_button(mouse_x,mouse_y,7);              
                 slider42 == 0 ? smoothing.hit_button(mouse_x,mouse_y,6);
                 slider42 == 0 ? alphalevel.hit_button(mouse_x,mouse_y,28);
                 slider42 == 0 ? sonoScale.hit_button(mouse_x,mouse_y,10) ? :
                 slider42 == 0 ? smoothing_type.hit_button(mouse_x,mouse_y,45);
                
                 (      // Note that the sonogram condition works for capmode8 and 9 (sonogram / scope) since they are in the same position 
                    slider42 == 0 ? sonoLog.hit_button(mouse_x,mouse_y,-1) ? ( slider33=!slider33; slider_automate(slider33); updateChannelSliders(); old_w = 0) :
                    slider42 == 0 ? sonogram_button.hit_button(mouse_x,mouse_y,-1) ? ( slider29=slider29+1; slider29>2?slider29=0; slider_automate(slider29); old_w = 0 ):
                    drawHz = 1;
                )                
          );
          
          ( (mouse_y > (gfx_h-sono_yoffset_bottom-sono_size-14)) && (mouse_y < (gfx_h-sono_yoffset_bottom-sono_size + 14)) ) ?
          (
            cap_mode = 60;
            cap_last_y = mouse_y;
          );
    ) :
    cap_mode == 1 && cap_last_y != mouse_y ? (
      slider2 = drag_slider_precise(slider2, -450, -12, 0.2);
      old_w=0;
      slider_automate(slider2);
    ) :
    cap_mode == 2 && cap_last_y != mouse_y ? (
      slider4 = drag_slider(slider4, 0.0, 3.0, .03);
      old_w=0;
      slider_automate(slider4);
    ) :
    cap_mode == 3 && cap_last_y != mouse_y ? (
      slider1 = drag_slider(slider1, 0.0, 11.0, .03);
      old_w=0;
      slider_automate(slider1);
    ) :
    cap_mode == 4 && cap_last_y != mouse_y ? (
      // Integration time
      slider5 = drag_slider_precise(slider5, 0.0, 25000.0, 5);
      old_w=0;
      slider_automate(slider5);
    ) :
    cap_mode == 5 && cap_last_y != mouse_y ? (
      // Scale
      slider6 = drag_slider_precise(slider6, 1.0, 6, .2);
      old_w=0;
      slider_automate(slider6);
    ) :
    cap_mode == 6 && cap_last_y != mouse_y ? (
      // Smoothing
      slider7 = drag_slider_precise(slider7, 0.0, 100, 1);
      old_w=0;
      slider_automate(slider7);
    ) :
    cap_mode == 7 && cap_last_y != mouse_y ? (
      // Colormap
      slider8 = drag_slider(slider8, 0.01, 14, .03);
      old_w=0;
      slider_automate(slider8);
    ) :
    cap_mode == 8 && cap_last_y != mouse_y ? (
      // Sonogram
      slider30 = drag_slider(slider30, 0, 15000, 100);
      old_w=0;
      slider_automate(slider30);
    ) :
    cap_mode == 9 && cap_last_y != mouse_y ? (
      // Signal
      slider31 = drag_slider_precise(slider31, .1, 3, .03);
      old_w=0;
      slider_automate(slider31);
    ) :
    cap_mode == 10 && cap_lasty_y != mouse_y ? (
      // Sono scaling
      slider35 = floor(drag_slider_precise(slider35, 1, 8, .1));
      old_w=0;
      slider_automate(slider35);
    ) :
    cap_mode == 28 && cap_lasty_y != mouse_y ? (
      // Alpha level
      slider37 = drag_slider_precise(slider37, 0, 1, .025);
      old_w=0;
      slider_automate(slider37);
    ) :
    cap_mode == 29 && cap_lasty_y != mouse_y ? (
      slider38 = drag_slider_precise(slider38, 0,9,.25);
      old_w=0;
      slider_automate(slider38);      
    ) :
    cap_mode == 30 && cap_lasty_y != mouse_y ? (
      // Alpha level
      slider10 = drag_slider_precise(slider10, 0, 1, .025);
      old_w=0;
      slider_automate(slider10);
    ) :
    cap_mode == 31 && cap_lasty_y != mouse_y ? (
      // Grid Alpha
      slider40 = drag_slider_precise(slider40, 0, 1, .025);
      old_w=0;
      slider_automate(slider40);
    ) :
    cap_mode == 60 && cap_lasty_y != mouse_y ? (
      sono_frac = (1-(mouse_y+sono_yoffset_bottom)/gfx_h);
    ) : cap_mode == 45 && cap_last_y != mouse_y ? (
      slider45 = drag_slider(slider45, 0.0, 3.0, .03);
      old_w=0;
      slider_automate(slider45);
    );
) : (
  // RMB
  
  drawHz = 0;
  (last_mouse_cap & 1) && !cap_drag ? (
    cap_mode == 2 ? (
    slider4 = cycle_slider(slider4, 0.0, 3.0, 1.0);
      old_w=0;
      slider_automate(slider4);
    );
    cap_mode == 3 ? (
      slider1 = cycle_slider(slider1, 0.0, 11.0, 1.0);
      old_w=0;
      slider_automate(slider1);
    );
    cap_mode == 45 ? (
      slider45 = cycle_slider(slider45, 0.0, 3.0, 1.0);
      old_w=0;
      slider_automate(slider45);
    );
  );
);

function DrawButtons()
(
    buttonPad = 3;
    
    gfx_measurestr(" >A", storeAX, freezeY);
    gfx_measurestr(" >A >B", storeBX, freezeY);    
    frstr = slider44 == 1 ? "Unfreeze" : "Freeze";
    
    freeze_button.draw_button(freezeX, 3, frstr);
    gfx_measurestr(frstr, freezeX, freezeY);
    gfx_measurestr(">", addX, freezeY);
    freezeX = freezeX + addX;
    storeAX = storeAX + freezeX;
    storeBX = storeBX + freezeX;
    store_a_button.draw_button(storeAX, 3, ">A");
    store_b_button.draw_button(storeBX, 3, ">B");
    
    // hide buttons
    gfx_measurestr("| <- |", arrowX, arrowY);
    arrowY = gfx_h-arrowY - 14;
    channels_button.draw_button(arrowX + 8, arrowY, slider41 ?"| -> |" : "| <- |");
    postOptions = options_button.draw_button(gfx_w - 10, 3, slider42 ?"<<:: OPTIONS ::" : ">>:: OPTIONS ::");
    gfx_x -= 8;
    optBar = gfx_x;
    
    gfx_y = 8;
    slider42 == 0 ? (
      fft_button.draw_button_safe(gfx_y, sprintf(#,"FFT: %d",16<<slider1), storeBX);
      window_button.draw_button_safe(gfx_y, 
                        (slider4|0)==1 ? "Hamming" :  
                        (slider4|0)==2 ? "Blackman-Harris" :
                        (slider4|0)==3 ? "Blackman" : 
                        (slider4|0)==4 ? "Rectangular":
                          "Flat-top", storeBX);
    
      floor_button.draw_button_safe(gfx_y, sprintf(#,"Floor: %.1fdB", slider2), storeBX);
      slope_button.draw_button_safe(gfx_y, sprintf(#,"Slope: %.1fdB/oct", slider38), storeBX);
      smoothing.draw_button_safe(gfx_y,sprintf(#,"Smoothing: %.1f",slider7), storeBX);
      smoothing_type.draw_button_safe(gfx_y, 
                        (slider45|0)==0 ? "Average" :  
                        (slider45|0)==1 ? "Maximum" :
                        (slider45|0)==2 ? "LOESS" : 
                          "Adaptive", storeBX);
      integrate_button.draw_button_safe(gfx_y, sprintf(#,"Integrate: %dms",slider5|0), storeBX);
    );
    
    
    /*slider42 == 0 ? gfx_w < 925 ? integrate_button.draw_button(gfx_w+9-spectrum_xpad, 23, sprintf(#,"Integrate: %dms",slider5|0));
    slider42 == 0 ? gfx_w < 794 ? smoothing.draw_button(gfx_x-8,23,sprintf(#,"Smoothing: %.1f",slider7));
    slider42 == 0 ? gfx_w < 655 ? slope_button.draw_button(gfx_w-8-spectrum_xpad,43, sprintf(#,"Slope: %.1fdB/oct", slider38));
    slider42 == 0 ? gfx_w < 522 ? floor_button.draw_button(gfx_x-8,43, sprintf(#,"Floor: %.1fdB", slider2));
    slider42 == 0 ? gfx_w < 447 ? window_button.draw_button(gfx_w-8-spectrum_xpad, 63, 
      (slider4|0)==1 ? "Hamming" :  
      (slider4|0)==2 ? "Blackman-Harris" :
      (slider4|0)==3 ? "Blackman" : 
      (slider4|0)==4 ? "Rectangular":
      "Flat-top");
    slider42 == 0 ? gfx_w < 314 ? fft_button.draw_button(gfx_w -8-spectrum_xpad, 80, sprintf(#,"FFT: %d",16<<slider1));
    */    
          
  //  scaling.draw_button(gfx_x-8,0,sprintf(#,"Scale: %.1f",slider6));
  gfx_measurestr("^^:: THEMES ::^^", themeW, themeH);
  yShift = themeH + 18;
    slider42 == 0 ? theme_button.draw_button(gfx_w -10, arrowY, slider43 ?"<<:: THEMES   ::" : "^^:: THEMES ::^^");
    slider42 == 0 ? slider43 == 1 ? alphalevel.draw_button(gfx_w - 10, arrowY - yShift, sprintf(#,"Ch.Color(a): %.1f",slider37));
    slider42 == 0 ? slider43 == 1 ? background_button.draw_button(gfx_w - 10, arrowY - 2*yShift, sprintf(#,"Bg Color:    %.1f",slider10));
    slider42 == 0 ? slider43 == 1 ? colormap.draw_button(gfx_w - 10, arrowY - 3*yShift, 
      (slider8|0)==0 ? "Theme:      Dark":  
      (slider8|0)==1 ? "Theme:   Intense":
      (slider8|0)==2 ? "Theme:      Fluo":
      (slider8|0)==3 ? "Theme:Colorblind":  
      (slider8|0)==4 ? "Theme:      Pimp":
      (slider8|0)==5 ? "Theme:    Shades":
      (slider8|0)==6 ? "Theme:     Fancy":  
      (slider8|0)==7 ? "Theme:    Pastel":
      (slider8|0)==8 ? "Theme:    Purple":
      (slider8|0)==9 ? "Theme:     Dark2":
      (slider8|0)==10 ? "Theme:     Dark3":  
      (slider8|0)==11 ? "Theme:     Dark4":
      (slider8|0)==12 ? "Theme:     Dark5":
      (slider8|0)==13 ? "Theme:Colorblind2":
      "Theme:Smooth"); 
    
  slider42 == 0 ? slider43 == 1 ? yShift = yShift*4;
 
    gfx_measurestr("Ch16", chW, chH);
    chButtonPad = 8;
    chButtonWidth = chW+10;
    chButtonSpace = chButtonWidth+chButtonPad;
    chButtonYSpace = chH + 24;
    totalButtonWidth = 18 * chButtonSpace;
    xButBlocked = max(spectrum_xpad, theme_button.w+8);
    slider41 == 0 ?(
      gfx_w > ( totalButtonWidth + xButBlocked + arrowX + 8 ) ? (
      
        chB.draw_button2_fixedWidth(gfx_w/2 -xButBlocked*0.5 + .5*totalButtonWidth + .5*arrowX, arrowY, chButtonWidth, "MemB", showB, 0, 0, 0, 15);
        chA.draw_button2_fixedWidth(gfx_x-=8, arrowY, chButtonWidth, "MemA", showA, 0, 0, 0, 15);
      
        ch16.draw_button2_fixedWidth(gfx_x-=8, arrowY, chButtonWidth, "Ch16", slider26, slider28==15, slider36==15, slider36>-1, 15);
        ch15.draw_button2_fixedWidth(gfx_x-=8, arrowY, chButtonWidth, "Ch15", slider25, slider28==14, slider36==14, slider36>-1, 14);
        ch14.draw_button2_fixedWidth(gfx_x-=8, arrowY, chButtonWidth, "Ch14", slider24, slider28==13, slider36==13, slider36>-1, 13);
        ch13.draw_button2_fixedWidth(gfx_x-=8, arrowY, chButtonWidth, "Ch13", slider23, slider28==12, slider36==12, slider36>-1, 12);
        ch12.draw_button2_fixedWidth(gfx_x-=8, arrowY, chButtonWidth, "Ch12", slider22, slider28==11, slider36==11, slider36>-1, 11);
        ch11.draw_button2_fixedWidth(gfx_x-=8, arrowY, chButtonWidth, "Ch11", slider21, slider28==10, slider36==10, slider36>-1, 10);
        ch10.draw_button2_fixedWidth(gfx_x-=8, arrowY, chButtonWidth, "Ch10", slider20, slider28==9,  slider36==9,  slider36>-1, 9);
        ch9.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch9",  slider19, slider28==8,  slider36==8,  slider36>-1, 8);
        ch8.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch8",  slider18, slider28==7,  slider36==7,  slider36>-1, 7);
        ch7.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch7",  slider17, slider28==6,  slider36==6,  slider36>-1, 6);
        ch6.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch6",  slider16, slider28==5,  slider36==5,  slider36>-1, 5);
        ch5.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch5",  slider15, slider28==4,  slider36==4,  slider36>-1, 4);
        ch4.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch4",  slider14, slider28==3,  slider36==3,  slider36>-1, 3);
        ch3.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch3",  slider13, slider28==2,  slider36==2,  slider36>-1, 2);
        ch2.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch2",  slider12, slider28==1,  slider36==1,  slider36>-1, 1);
        ch1.draw_button2_fixedWidth(gfx_x-=8,  arrowY, chButtonWidth, "Ch1",  slider11, slider28==0,  slider36==0,  slider36>-1, 0);
      ) : (
        slider42 != 0 ?(
          yBStart = 6 * chButtonYSpace + chH + postOptions;
        ) : (
          yBStart = gfx_h - yShift - chButtonYSpace;
        );
        
        bRowCol1 = gfx_w-10;
        bRowCol2 = gfx_w-10-chButtonWidth-chButtonPad;
        
        chB.draw_button2_fixedWidth(bRowCol1 , yBStart, chButtonWidth, "MemB",  showB, 0, 0, 0, 7);
        ch16.draw_button2_fixedWidth(bRowCol1 , gfx_y-chButtonYSpace, chButtonWidth, "Ch16", slider26, slider28==15, slider36==15, slider36>-1, 15);
        ch15.draw_button2_fixedWidth(bRowCol1 , gfx_y-chButtonYSpace, chButtonWidth, "Ch15", slider25, slider28==14, slider36==14, slider36>-1, 14);
        ch14.draw_button2_fixedWidth(bRowCol1 , gfx_y-chButtonYSpace, chButtonWidth, "Ch14", slider24, slider28==13, slider36==13, slider36>-1, 13);
        ch13.draw_button2_fixedWidth(bRowCol1 , gfx_y-chButtonYSpace, chButtonWidth, "Ch13", slider23, slider28==12, slider36==12, slider36>-1, 12);
        ch12.draw_button2_fixedWidth(bRowCol1 , gfx_y-chButtonYSpace, chButtonWidth, "Ch12", slider22, slider28==11, slider36==11, slider36>-1, 11);
        ch11.draw_button2_fixedWidth(bRowCol1 , gfx_y-chButtonYSpace, chButtonWidth, "Ch11", slider21, slider28==10, slider36==10, slider36>-1, 10);
        ch10.draw_button2_fixedWidth(bRowCol1 , gfx_y-chButtonYSpace, chButtonWidth, "Ch10", slider20, slider28==9,  slider36==9,  slider36>-1, 9);
        ch9.draw_button2_fixedWidth(bRowCol1 ,  gfx_y-chButtonYSpace, chButtonWidth, "Ch 9",  slider19, slider28==8,  slider36==8,  slider36>-1, 8);

        chA.draw_button2_fixedWidth(bRowCol2 , yBStart, chButtonWidth, "MemA",  showA, 0, 0, 0, 7);
        ch8.draw_button2_fixedWidth(bRowCol2 , gfx_y-chButtonYSpace, chButtonWidth, "Ch 8",  slider18, slider28==7,  slider36==7,  slider36>-1, 7);
        ch7.draw_button2_fixedWidth(bRowCol2,  gfx_y-chButtonYSpace, chButtonWidth, "Ch 7",  slider17, slider28==6,  slider36==6,  slider36>-1, 6);
        ch6.draw_button2_fixedWidth(bRowCol2,  gfx_y-chButtonYSpace, chButtonWidth, "Ch 6",  slider16, slider28==5,  slider36==5,  slider36>-1, 5);
        ch5.draw_button2_fixedWidth(bRowCol2,  gfx_y-chButtonYSpace, chButtonWidth, "Ch 5",  slider15, slider28==4,  slider36==4,  slider36>-1, 4);
        ch4.draw_button2_fixedWidth(bRowCol2,  gfx_y-chButtonYSpace, chButtonWidth, "Ch 4",  slider14, slider28==3,  slider36==3,  slider36>-1, 3);
        ch3.draw_button2_fixedWidth(bRowCol2,  gfx_y-chButtonYSpace, chButtonWidth, "Ch 3",  slider13, slider28==2,  slider36==2,  slider36>-1, 2);
        ch2.draw_button2_fixedWidth(bRowCol2,  gfx_y-chButtonYSpace, chButtonWidth, "Ch 2",  slider12, slider28==1,  slider36==1,  slider36>-1, 1);
        ch1.draw_button2_fixedWidth(bRowCol2,  gfx_y-chButtonYSpace, chButtonWidth, "Ch 1",  slider11, slider28==0,  slider36==0,  slider36>-1, 0);
      )
    );
    slider42 == 0 ?
    (
      gfx_measurestr("Log(Sonogram)", sonoTxtW, sonoTxtH);
      gfx_measurestr("<  Sonogram  |", hideTxtW, sonoTxtH);
      postOptions = showSumButton.draw_button2_fixedWidth(gfx_w-10, postOptions+2*buttonPad, hideTxtW, "SUM", slider27, slider28==-1, 0, 0, -1);
      postOptions = phase_button.draw_button2_fixedWidth(gfx_w-10,postOptions+buttonPad, hideTxtW, "Phase", slider3, slider3>1, slider3== 2, slider3>-1, -1);
      postOptions = grid_button.draw_button2_fixedWidth(gfx_w-10, postOptions+buttonPad, hideTxtW, "GRID", slider39, slider39>1, slider39== 2, slider39>-1, -1);

      slider39 == 1 ? ( postOptions = gridAlpha_button.draw_button_fixedWidth(gfx_w-10, postOptions+buttonPad, hideTxtW, sprintf(#,"^ Alpha: %.1f ^" ,slider40)) );
      
      postSono = sonogram_button.draw_button_fixedWidth(gfx_w-10, postOptions + 4*buttonPad, hideTxtW, slider29==1?">>   Hide   >>" : slider29==0?"<    Time    >" : "<  Sonogram  |");
      slider29 == 0 ? ( sonoLog.draw_button2_fixedWidth(gfx_w-10, postSono+buttonPad, sonoTxtW, "Log(Sonogram)", slider33, 0, 0, 0, -1) );
    );
    
  slider29 == 2 ? sono_size = 0 : sono_size = sono_frac*gfx_h;
        
  // SET THE OFFSETS HERE
  ( slider42 == 0 ) ? (
    spectrum_yoffset = 5;
    spectrum_xpad = 150;
    sono_yoffset_bottom = 35;
    spectrum_yoffsetbottom = sono_yoffset_bottom + sono_size;
    spectrum_xmax = gfx_w - spectrum_xpad;
  ) : (
    spectrum_yoffset = 5;
    spectrum_xpad = 0;
    sono_yoffset_bottom = 35;
    spectrum_yoffsetbottom = sono_yoffset_bottom + sono_size;
    spectrum_xmax = gfx_w - spectrum_xpad;
  );
  
  ( slider41 == 0 ) ? (
    spectrum_yoffset = 5;
    sono_yoffset_bottom = 30;
    spectrum_yoffsetbottom = sono_yoffset_bottom + sono_size;    
  ) : (
    sono_yoffset_bottom = 6;
    spectrum_yoffsetbottom = sono_yoffset_bottom + sono_size;
  );

//sonoScale.draw_button(gfx_x-8, 16, sprintf(#,"SonoScale: %d",slider35));
  
  scaling = slider6;
  bgcolor = slider10;

);
cap_mode && cap_timer < 12 ? cap_timer += 1;
last_mouse_cap = mouse_cap;

UI_SCREEN = 0;

// only update if new fft data is there or if the size changed
( update == 1 || old_w != gfx_w || old_h!=gfx_h ) ? (
  update = 0;
  
  gfx_dest = UI_SCREEN;
  gfx_setimgdim(UI_SCREEN, gfx_w, gfx_h);
  gfx_clear = 0;

  //gfx_dest = scroll_buf;
  old_w=gfx_w; old_h=gfx_h;
  
  // Clear screen
  gfx_r=gfx_g=gfx_b=bgcolor -0; gfx_a=1.0;
  gfx_x=gfx_y=0;
  gfx_rectto(gfx_w,gfx_h);
  sc=(gfx_h-20)*20/(-slider2 * log(10));
  
  latencyLength = fftSize;
  ( latencyCompensation == 0 ) ? latencyLength = 0;
  
  ( pdc_delay != latencyLength ) ? (
    pdc_top_ch = num_ch;
    pdc_delay = latencyLength;
  );
  
  integrate_sc = 1;
  slider5 > 0 ? (
    integrate_now = time_precise();
    integrate_en ? (
      // fps = 1/(integrate_now - integrate_lastt);
      integrate_sc -= exp(-5 * 1000.0 * (integrate_now - integrate_lastt) / slider5);
    ) : (
      // force overwrite of buffer
      integrate_en = 1;
    );
    integrate_lastt = integrate_now;
  ) : (
    integrate_en = 0;
  );

  fftidx != (slider1|0) ? (
    fftidx=slider1|0;
    fftsize=2^(min(max(fftidx,0),11)+4);
    integrate_sc=1;
  );

  smoothing != slider7 || windowsize != fftsize || windowtype != (slider4|0) ? (
    windowtype=slider4|0; 
    windowsize=fftsize;
    dwindowpos = $pi*2/fftsize;
    i=pwr=0;
    loop(fftsize*.5+1,
       windowpos=i*dwindowpos;
       pwr += (window[i] = (
         windowtype==1 ? ( 0.53836 - cos(windowpos)*0.46164 ) :
         windowtype==2 ? ( 0.35875 - 0.48829 * cos(windowpos) + 0.14128 * cos(2*windowpos) - 0.01168 * cos(3*windowpos) ) :
         windowtype==3 ? ( 0.42 - 0.50 * cos(windowpos) + 0.08 * cos(2.0*windowpos) ) :
         windowtype==4 ? ( 1.0 ) :
         ( .21557895 - 0.41663158 * cos(windowpos) + 0.277263158 * cos(2*windowpos) - 0.083578947 * cos(3*windowpos) + 0.006947368 * cos(4*windowpos) )
         ) );
       i+=1;
    );
    pwr=.5/(pwr*2-window[i-1]);
    loop(fftsize*.5+1,window[i-=1]*=pwr);
    integrate_sc=1;
  );

  rpos = recpositions;
  fftw = fftworkspaces;
  ibuf = integrate_bufs;
  shft = shifts;
  hsiz = histsizes;
  
  incr  = 3;
  cref = (10000 + 100*floor(slider8));
  
  ccolor  = cref;
  jl      = 1;
  blah    = activechannels;
  loop(maxchannels,
    (blah[] == 1) ? (
      ( slider36 < 0 || ( slider36 == (jl-1) ) ) ? (
        processFFT(1, rpos[], fftw[], ibuf[], shft[], hsiz[], ccolor[0], ccolor[1], ccolor[2], 1, 1);
      );
    );
    jl      += 1;
    rpos    += 1;
    fftw    += 1;
    ibuf    += 1;
    shft    += 1;
    hsiz    += 1;
    ccolor  += incr;
    blah    += 1; 
  );

  showSum ? (
    halfshade = 0.3 * bgcolor + 0.7 * ( 1-bgcolor );
    shade = 1-bgcolor;
    processFFT(100, sumposr, fftwr, ibufr, sumshr, sumhsr, halfshade, halfshade, halfshade, 0, 1);
    
    (copyTo == 1) ? memcpy(memA2, filtout, 65536);
    (copyTo == 2) ? memcpy(memB2, filtout, 65536);
    
    processFFT(100, sumposl, fftwl, ibufl, sumshl, sumhsl, shade, shade, shade, 0, 1);
    
    copyTo == 1 ? (
      memcpy(memA, filtout, 65536);
      copyTo = 0;
      sModeA = floor(slider45);
      kernelSizeA = kernelSize;
      fftSizeA = fftsize;
      xscaleA = xscale;
    );
    
    copyTo == 2 ? (
      memcpy(memB, filtout, 65536);
      copyTo = 0;
      sModeB = floor(slider45);
      kernelSizeB = kernelSize;
      fftSizeB = fftsize;
      xscaleB = xscale;
    );
  );
  
  showA ? (
    memcpy(filtout, memA, 65536);
    drawFFT(100, sumposl, fftwl, ibufl, sumshl, sumhsl, .5, .5, .5, 1, 1, fftsizeA, xscaleA, sModeA, kernelSizeA);
    memcpy(filtout, memA2, 65536);
    drawFFT(100, sumposl, fftwl, ibufl, sumshl, sumhsl, .5, .5, .5, 1, 1, fftsizeA, xscaleA, sModeA, kernelSizeA);
  );
  
  showB ? (
    memcpy(filtout, memB, 65536);
    drawFFT(100, sumposl, fftwl, ibufl, sumshl, sumhsl, .5, .5, .5, 1, 1, fftsizeB, xscaleB, sModeB, kernelSizeB);
    memcpy(filtout, memB2, 65536);
    drawFFT(100, sumposl, fftwl, ibufl, sumshl, sumhsl, .5, .5, .5, 1, 1, fftsizeB, xscaleB, sModeB, kernelSizeB);
  );
  
  ( drawHz == 1 ) ? (
    gfx_r = gfx_g = gfx_b = 1 - bgColor;
    gfx_a = 1.0;
    gfx_x = mouse_x + 10;
    gfx_y = mouse_y;
    
    f = (1/800) * ( exp(mouse_x/wsc)-1 ) * srate + spectrum_xoffset * srate;
    y = -20 * ( (mouse_y-20-spectrum_yoffset) / (sc*rescaleY) ) / log(10);   
        
    gfx_printf("%dHz %gdB", f, y); 
  );  
  
  ( zoomMode == 1 ) ? (
    gfx_r = gfx_g = gfx_b = gfx_a = 1.0;
    gfx_line( old_mouse_x, old_mouse_y, mouse_x, old_mouse_y );
    gfx_line( old_mouse_x, old_mouse_y, old_mouse_x, mouse_y );
    gfx_line( old_mouse_x, mouse_y, mouse_x, mouse_y );
    gfx_line( mouse_x, old_mouse_y, mouse_x, mouse_y );
  );
  
  // Note: slider34 can still be used to detect clicks on the sono
  gfx_r = gfx_g = gfx_b = 1;
  gfx_a = 1;

  sigw = 1;// - spectrum_xpad/gfx_w; // <== Note: If you want the width to keep the bar free, uncomment this!
  sigh = sono_size/gfx_h;
  selected = slider28;
  
  gfx_x = 0;  
  gfx_y = gfx_h-sono_yoffset_bottom-sono_size;
  ( slider29 == 1 ) ? (
    // Time window
    ( selected > -1 ) ? (
      ( slider34 == 0 ) ? (
        scope.drawSignal( gfx_x, gfx_y, sigw*gfx_w, sigh*gfx_h, shifts[selected], slider31, histsizes[0] - shifts[0], cref[], cref[1], cref[2] );  
      ) : (
        scope.drawMovingSignal( gfx_x, gfx_y, sigw*gfx_w, sigh*gfx_h, recpositions[selected], histsizes[selected], shifts[selected], slider31, histsizes[0] - shifts[0], cref[], cref[1], cref[2] );  
      );

      gfx_r=gfx_g=gfx_b=1.0-bgColor;
      gfx_y = gfx_h-sono_yoffset_bottom-sono_size + 5;
      gfx_x = 5;
      gfx_printf( "Ch %d", selected + 1 );
    ) : (
      ( slider34 == 0 ) ? (
        scope.drawSignal( gfx_x, gfx_y, sigw*gfx_w, sigh*gfx_h, sumshl, slider31, histsizes[0] - shifts[0], cref[4], cref[5], cref[6] );  
        scope.drawSignal( gfx_x, gfx_y, sigw*gfx_w, sigh*gfx_h, sumshr, slider31, histsizes[0] - shifts[0], cref[], cref[1], cref[2] );
      ) : (
        sll = sumposl; srr= sumposr;
        scope.drawMovingSignal( gfx_x, gfx_y, sigw*gfx_w, sigh*gfx_h, sll, sumhsl, sumshl, slider31, histsizes[0] - shifts[0], cref[4], cref[5], cref[6] );
        scope.drawMovingSignal( gfx_x, gfx_y, sigw*gfx_w, sigh*gfx_h, srr, sumhsr, sumshr, slider31, histsizes[0] - shifts[0], cref[], cref[1], cref[2] );
      );    
    
      gfx_r=gfx_g=gfx_b=1.0-bgColor;      
      gfx_y = gfx_h-sono_yoffset_bottom-sono_size + 5;
      gfx_x = 5;
      gfx_printf( "Sum" );
    );
  ) : ( slider29 == 0 ) ? (
    // Sonogram
    
    cmapidx = (floor(slider32/2) + 1);
    invert = slider32 - (floor(slider32/2))*2;
    ( selected > -1 ) ? (
      // Make sure that the sonogram is still updated if it's not currently being rendered.       
      ( activeChannels[selected] == 0 ) ? (
        processFFT(1, recpositions[selected], fftworkspaces[selected], integrate_bufs[selected], shifts[selected], histsizes[selected], ccolor[0], ccolor[1], ccolor[2], 1, 0);
      );
      sonogram.drawSono( fftworkspaces[selected], cmapidx * 2000, invert, slider30, gfx_x, gfx_y, sigw*gfx_w, sigh*gfx_h, slider33, slider35 );
      gfx_mode = 1;
      gfx_r = gfx_g = gfx_a = 1.0;
      gfx_y = gfx_h-sono_yoffset_bottom-sono_size + 5;
      gfx_x = 5;
      gfx_printf( "Ch: %d, Sc: %d", selected + 1, slider30 );
    ) : (
      ( showSum == 0 ) ? (
        // Make sure that the sonogram is still updated if it's not currently being rendered.
        processFFT(100, sumposr, fftwr, ibufr, sumshr, sumhsr, halfshade, halfshade, halfshade, 0, 0);  
        processFFT(100, sumposl, fftwl, ibufl, sumshl, sumhsl, shade, shade, shade, 0, 0);
      );
    
      sonogram.drawSono( fftwr, cmapidx * 2000, invert, slider30, gfx_x, gfx_y, sigw*gfx_w, sigh*gfx_h, slider33, slider35 );    
      gfx_mode = 0;
      gfx_r = gfx_g = gfx_a = 1.0;
      gfx_y = gfx_h-sono_yoffset_bottom-sono_size + 5;
      gfx_x = 5;
      gfx_printf( "Sum, Sc: %d", slider30 );
    );
    gfx_measurestr("Sum. Sc: 123456789", junk, tSkip);
    gfx_y = gfx_h-sono_yoffset_bottom-sono_size + 5 + tSkip;
    gfx_x = 5;
    
    printColorMapName(cmapidx, invert);
    gfx_mode = 0;
  );
  
  drawGrid();
  DrawButtons();
  gfx_r=gfx_g=gfx_b=gfx_a=1.0;  
  gfx_dest = -1;
  gfx_x = 0;
  gfx_y = 0;
  gfx_blit(UI_SCREEN, 1, 0);
  
  // Finished
  update = 1;
);
