desc:Saike / Nostalgizer / Lo-Fi (BETA)
tags: detune / envelope muffler / chorus
version: 0.12
author: Joep Vanlier
changelog: Added option to bypass LPG. Add side chain option.
provides:
  nostalgizer_dependencies/* 
license: MIT

// This plugin was inspired (and loosely modelled after) the Fairfield Circuitry Shallow Water.

slider1:operating_mode=2<0,2,1{Gate,Follower,Shallow}>-Operating mode
slider2:lpf_level=0.701<0,1,.00001>-lpf
slider3:rate=591.6<75,1000,.1>-slowness [ms]
slider4:depth=179.9<0,350,.0001>-depth
slider5:flutter_level=0.0<0,.05,0.00001>-flutter
slider6:flutter_rate=1.0<0,50,.01>-flutter rate
slider7:enable_hp=0<0,1,1>-Enable high pass
slider8:linked=1<0,1,1>-L/R LPG Linked
slider9:mod_linked=1<0,1,1>-L/R Mod Linked
slider10:bypass_lpg=0<0,1,1>-Bypass LPG

slider11:saturation=0.1003<0,1,.00001>-dynamic saturation (0=off)
slider12:asymmetry=0.663367<0,1,.00001>-saturation asymmetry
slider14:dim_expand=0<0,1,.00001>-dimension expander (0=off)
slider15:feedback=0<0,.5,.00001>-feedback
slider16:input_boost=0<0,18,.1>-Input boost
slider17:drywet=1<0,1,1>-Dry/Wet ratio

slider20:resonance=0<0,.99,.01>-resonance

slider30:noise_level=0.0057<0,.05,.0001>-Model noise (0=off)

slider32:attack=9.22<5,80,.001>-Attack [ms]
slider33:decay=110.666667<5,500,.001>-Decay [ms]

slider34:lp_minimum=0.15<0,1,.00011>-lpg minimum
slider35:side_chain=0<0,1,1>-Use sidechain for LPG

slider60:show_advanced=0<0,1,1>-Show advanced

options:no_meter
in_pin:left input
in_pin:right input
in_pin:left lpg sidechain
in_pin:right lpg sidechain
out_pin:left output
out_pin:right output

import nostalgizer_dependencies/saike_nostalgizer_widgets.jsfx-inc

@init
city_w = 0;
update_rate = 8;

function update_rates()
(
  tau_atk = attack / 1000;
  
  k_gain = - log(.1) / 2 / srate;
  k_atk = 1000 / attack / srate;
  k_decay = 1000 / decay / srate;
);

gate_left = 0;
gate_right = 0;

  function F0_tanh(x)
  local()
  global()
  (
    x - log(2/(1 + exp(-2*x)))
  );
  
  function tanh(x)
  local()
  global()
  instance()
  (
    2/(1+exp(-2*x)) - 1
  );

  function Li2(x)
  local(A, ALFA, B0, B1, B2, H, S, T, Y, Q, HF, PI3, PI6, PI12)
  global()
  (
    HF = 0.5;
    PI3 = 3.2898681336964528729448303332921; // pi*pi/3
    PI6 = 1.644934066848226436472415166646; // pi*pi / 6
    PI12 = 0.82246703342411321823620758332301; // pi*pi / 12
    
    (x==1) ? (
      H = PI6;
    ) : (x == -1) ? (
      H = -PI12;
    ) : (
      T = -x;
    );

    A = (T <= -2) ? (
      Y = -1 / (1 + T);
      S = 1;
      A = log(-T);
      Q = log(1 + 1/T);
      -PI3 + HF * (A*A - Q*Q)
    ) : (T < -1) ? (
      Y = -1 - T;
      S = -1;
      A = log(-T);
      Q = log(1 + 1/T);  
      -PI6 + A * (A + Q)
    ) : (T <= -0.5) ? (
      Y = -(1 + T) / T;
      S = 1;
      A = log(-T);
      Q = log(1 + T);
      -PI6 + A * (-HF * A + Q)
    ) : (T < 0) ? (
      Y = -T / (1 + T);
      S = -1;
      Q = log(1 + T);
      A = HF * Q*Q
    ) : (T <= 1) ? (
      Y = T;
      S = 1;
      0
    ) : (
      Y = 1 / T;
      S = -1;
      Q = log(T);
      PI6 + HF * Q*Q
    );

    H = Y + Y - 1;
    ALFA = H + H;
    B1 = 0;
    B2 = 0;
    B0 = 0.00000000000000002 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.00000000000000014 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.00000000000000093 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.00000000000000610 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.00000000000004042 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.00000000000027007 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.00000000000182256 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.00000000001244332 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.00000000008612098 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.00000000060578480 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.00000000434545063 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.00000003193341274 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.00000024195180854 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.00000190784959387 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.00001588415541880 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.00014304184442340 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.00145751084062268 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = -0.01858843665014592 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.40975987533077105 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    B0 = 0.42996693560813697 + ALFA * B1 - B2; B2 = B1; B1 = B0;
    
    H = -(S * (B0 - H * B2) + A)
  );
  
  function F1(x)
  local(em2x)
  global()
  (
    em2x = exp(-2*x);
    .5 * (x * (x + 2 * log(em2x + 1)) - Li2(-em2x))
  );
  
  function antialiased_tanh_linear(xn)
  local(eps, absxn, hpi12)
  global()
  instance(antialias, F0_xnm1, xnm1, xnm2, F0_xnm1, F0_xnm2, F1_xnm1, F1_xnm2,
  F0_xn, F1_xn, diff1, diff2, term1, term2, idiff)
  (
    absxn     = abs(xn);
    F0_xn     = F0_tanh(absxn);
    
    hpi12     = 0.4112335167120566;  // .5 * pi*pi / 12
    F1_xn     = (F1(absxn) - hpi12)*sign(xn) + hpi12;
 
    diff1     = ( xn - xnm1 );
    diff2     = ( xnm2 - xnm1 );
    eps       = .2;
      
    term1     = (abs(diff1) > eps) ? (
      idiff = 1.0 / (diff1*diff1);
      ( xn * ( F0_xn - F0_xnm1 ) - (F1_xn - F1_xnm1) ) * idiff
    ) : (
      .5 * tanh((xn + 2*xnm1)*.33333333333333333333333333333)
    );
    
    term2     = (abs(diff2) > eps) ? (
      idiff = 1.0 / (diff2*diff2);
      ( xnm2 * ( F0_xnm2 - F0_xnm1 ) - (F1_xnm2 - F1_xnm1) ) * idiff
    ) : (
      .5 * tanh((xnm2 + 2*xnm1)*.33333333333333333333333333333)
    );

    F1_xnm2   = F1_xnm1;
    F1_xnm1   = F1_xn;

    F0_xnm2   = F0_xnm1;
    F0_xnm1   = F0_xn;
    
    xnm2      = xnm1;
    xnm1      = xn;
  
    term1 + term2
  );
  
  function antialiased_tanh_rect(x)
  local(eps, F0_xn, diff)
  global()
  instance(antialias, F0_xnm1, xnm1)
  (
    (
      F0_xn     = F0_tanh(abs(x));
      diff      = ( x - xnm1 );
      eps       = 0.0000000001;
      antialias = (abs(diff) > eps) ? ( F0_xn - F0_xnm1 ) / diff : tanh(.5*(x+xnm1));
    );
    
    F0_xnm1   = F0_xn;
    xnm1      = x;

    antialias
  );  

function initBuffer(buffer_in, buffer_max_in)
  local()
  global()
  instance(write_ptr, buffer_max, buffer)
  (
    buffer      = buffer_in;
    buffer_max  = buffer_max_in;
    
    write_ptr < buffer ? (
      write_ptr = buffer 
    ) : ( write_ptr > buffer_max ) ? write_ptr = buffer
  );
  
function resetBuffer()
  local()
  global()
  instance(buffer_max, buffer)
  (
    memset(buffer, 0, buffer_max - buffer + 1);
  );
  
function writeBuffer(sample)
  local()
  global()
  instance(write_ptr, buffer, buffer_max)
  (
    write_ptr[] = sample;
    write_ptr += 1;
    write_ptr > buffer_max ? write_ptr = buffer;
  );
  
function readBuffer(offset)
  local(id0, id1, id2, id3, ism1, is0, is1, is2, frac)
  global()
  instance(read_ptr, write_ptr, buffer, buffer_max)
  (
    read_ptr = write_ptr - offset - 3;
    
    frac = read_ptr - floor(read_ptr);
    read_ptr = floor(read_ptr);
    read_ptr < buffer ? read_ptr += (buffer_max - buffer + 1);    
  
    ism1 = read_ptr[];
    read_ptr += 1; read_ptr > buffer_max ? read_ptr = buffer;
    is0 = read_ptr[];
    read_ptr += 1; read_ptr > buffer_max ? read_ptr = buffer;
    is1 = read_ptr[];
    read_ptr += 1; read_ptr > buffer_max ? read_ptr = buffer;    
    is2 = read_ptr[];
    
    id0 = is0;
    id1 = 0.5*(is1 - ism1);
    id2 = ism1 - 2.5*is0 + 2*is1 - 0.5*is2;
    id3 = 0.5*(is2 - ism1) + 1.5 * (is0 - is1);
    ((id3*frac+id2)*frac+id1)*frac+id0;
  );
  
function setOffset(offset)
local()
instance(read_ptr, write_ptr, buffer_max, buffer)
global()
(
  read_ptr = write_ptr - offset;
  read_ptr < buffer ? read_ptr += (buffer_max - buffer + 1)
);

function readBufferCheap(offset)
local(s)
instance(read_ptr, write_ptr, buffer_max, buffer)
global()
(
  s = read_ptr[];
  read_ptr += 1;
  read_ptr > buffer_max ? read_ptr = buffer;
  s
);

function init_linearSVF(freq, res)
  global()
  local(g)
  instance(f0, ic1eq, ic2eq, k, a1, a2, a3)
  (
    f0 = .5 * exp( (1-freq) * log(20/22050) );
    g = tan(.5 * $pi * f0);
    k = 2 - 2*res;
        
    a1 = 1/(1+g*(g+k));
    a2 = g*a1;
    a3 = g*a2;
  ); 
  
function init_linearSVF_absolute(f0, res)
  global(srate)
  local(g)
  instance(f0, ic1eq, ic2eq, k, a1, a2, a3)
  (
    g = tan($pi * f0 / srate);
    k = 2 - 2*res;
        
    a1 = 1/(1+g*(g+k));
    a2 = g*a1;
    a3 = g*a2;
  );  

function init_tpt(cutoff)
  local()
  instance(coeff, s)
  local(g)
  (
    g = tan($PI * cutoff);
    coeff = g / (1.0 + g);
    s = 0;
  );
  
function eval_tpt_hp(x)
  local()
  instance(coeff, s)
  local()
  (
    v = coeff*(x - s);
    y = v + s;
    s = y + v;
    x - y
  );

function reset_linearSVF()
  global()
  local()
  instance(ic1eq, ic2eq, k, a1, a2, a3)
  (
    ic1eq = ic2eq = 0;  
  );
  
function eval_linearSVF_LP(v0)
  global()
  local(v1, v2, v3)
  instance(ic1eq, ic2eq, a1, a2, a3)
  (
    v3 = v0 - ic2eq;
    v1 = a1 * ic1eq + a2 * v3;
    v2 = ic2eq + a2 * ic1eq + a3*v3;
    ic1eq = 2*v1 - ic1eq;
    ic2eq = 2*v2 - ic2eq;    
    
    v2
  );

function eval_linearSVF_HP(v0)
  global()
  local(v1, v2, v3)
  instance(ic1eq, ic2eq, k, a1, a2, a3)
  (
    v3 = v0 - ic2eq;
    v1 = a1 * ic1eq + a2 * v3;
    v2 = ic2eq + a2 * ic1eq + a3*v3;
    ic1eq = 2*v1 - ic1eq;
    ic2eq = 2*v2 - ic2eq;    
    
    v0 - k*v1 - v2
  );

  function noise_gen(dt)
  instance(timeleft, d0, d1, d2, d3, w_noise, p_noise)
  global()
  local(t, t2, a0, a1, a2, a3)
  (
    timeleft <= 0 ? (
      d3 = d2;
      d2 = d1;
      d1 = d0;
      d0 = 2.0 * (rand()-0.5);
      d0 *= d0 * d0;
      d0 *= d0 * d0;
      
      timeleft = timeleft + 1.0;
    );
    
    // Cubic interpolation
    t = 1.0 - timeleft;
    t2 = t * t;
    a0 = d0 - d1 - d3 + d2;
    a1 = d3 - d2 - a0;
    a2 = d1 - d3;
    a3 = d2;
    
    timeleft -= dt;
    
    (a0*t*t2+a1*t2+a2*t+a3);
  );

freemem = (l_buffer = freemem) + 2001;
freemem = (r_buffer = freemem) + 2001;
freemem = (dry_l_buffer = freemem) + 2001;
freemem = (dry_r_buffer = freemem) + 2001;
freemem = (l_pitch_buffer = freemem) + 32768;
freemem = (r_pitch_buffer = freemem) + 32768;
freemem = (draw_buffer = freemem) + 500000;
freemem = (draw_buffer2 = freemem) + 500000;
freemem = (draw_buffer3 = freemem) + 500000;
freemem = (rain = freemem) + 500000;

// Chorus materials
l_delay.initBuffer(l_buffer, l_buffer + 2000);
r_delay.initBuffer(r_buffer, r_buffer + 2000);
dry_l_delay.initBuffer(dry_l_buffer, dry_l_buffer + 2000);
dry_r_delay.initBuffer(dry_r_buffer, dry_r_buffer + 2000);
l_delay_filt.init_linearSVF_absolute(340, 0);
r_delay_filt.init_linearSVF_absolute(340, 0);

l_pitch.initBuffer(l_pitch_buffer, l_pitch_buffer + 32766);
r_pitch.initBuffer(r_pitch_buffer, r_pitch_buffer + 32766);
buf.initBuffer(draw_buffer, draw_buffer + 500000);
buf2.initBuffer(draw_buffer2, draw_buffer2 + 500000);
buf3.initBuffer(draw_buffer3, draw_buffer3 + 500000);

l_gate_hp.init_linearSVF_absolute(2*74, 0);
r_gate_hp.init_linearSVF_absolute(2*74, 0);

@slider
lpf_thresh = (exp(5*lpf_level) - exp(0)) / (exp(5) - exp(0));

@block
setpoint = 402 + (saturation > 0);
(pdc_delay != setpoint) ? (
  dry_l_delay.setOffset(setpoint);
  dry_r_delay.setOffset(setpoint);

  pdc_top_ch = 2;
  pdc_bot_ch = 0;
  pdc_delay = setpoint; // 1 for the anti-aliasing in the saturator
);

noise_rate = - log(.1) / (.001 * rate) / srate;
israte = 1.0 / srate;
flutter_speed = 2.0 * $pi * flutter_rate / srate;

update_rates();
@sample
function sat_func(lpg, input_gain)
local(t)
global()
(
  t = (0.573144 + 20.2149 * lpg*lpg*lpg*lpg) * input_gain;
  0.185304 * (1.0 - exp(- t*t)) - 0.00307613
);


c_input_boost = 0.99 * c_input_boost + 0.01 * input_boost;
preamp = exp(.11512925464970228420089957273422 * c_input_boost);
spl0 *= preamp;
spl1 *= preamp; 

side_chain ? (
  left_gain_input = spl2;
  right_gain_input = spl3;
) : (
  left_gain_input = spl0;
  right_gain_input = spl1;
);

// Overall gain estimator
vol_est_l = max((1-k_gain) * vol_est_l, abs(left_gain_input));
vol_est_r = max((1-k_gain) * vol_est_r, abs(right_gain_input));

csample += 1;

( operating_mode == 2 ) ? (
  l_cur = abs(left_gain_input);
  r_cur = abs(right_gain_input);
  
  state_l += state_l < l_cur ? k_atk * (l_cur - state_l) : k_decay * (l_cur - state_l);
  state_r += state_r < r_cur ? k_atk * (r_cur - state_r) : k_decay * (r_cur - state_r);
  
  (csample % update_rate == 0) ? (
    gate_left = min(sat_func(lpf_level, state_l), 1.0);
    gate_right = min(sat_func(lpf_level, state_r), 1.0);
    
    linked ? (
      gate_left = gate_right = 0.5 * (gate_left + gate_right);
    );
  
    l_gate_filt.init_linearSVF_absolute(max(50, 44100 * gate_left), resonance);
    r_gate_filt.init_linearSVF_absolute(max(50, 44100 * gate_right), resonance);
  );
) : (operating_mode == 0) ? (
  left_change = (abs(left_gain_input) / vol_est_l) < lpf_thresh ? k_atk * (1.0 - gate_left) : - k_decay * gate_left;
  gate_left += left_change;

  right_change = (abs(right_gain_input) / vol_est_r) < lpf_thresh ? k_atk * (1.0 - gate_right) : - k_decay * gate_right;
  gate_right += right_change;
  
  (csample % update_rate == 0) ? (  
    linked ? (
      gate_left = gate_right = 0.5 * (gate_left + gate_right);
    );
      
    l_gate_filt.init_linearSVF(gate_left, resonance);
    r_gate_filt.init_linearSVF(gate_right, resonance);
  );
) : ( operating_mode == 1 ) ? (
  mx_l = max(.99*mx_l, abs(left_gain_input));
  mx_r = max(.99*mx_r, abs(right_gain_input));
  
  l_cur = abs(mx_l) / vol_est_l;
  r_cur = abs(mx_r) / vol_est_r;
    
  state_l += state_l < l_cur ? k_atk * (l_cur - state_l) : k_decay * (l_cur - state_l);
  state_r += state_r < r_cur ? k_atk * (r_cur - state_r) : k_decay * (r_cur - state_r);
    
  (csample % update_rate == 0) ? (
    range = 1.0 - lp_minimum;
    gate_left = min(lp_minimum + range * lpf_thresh + (1.0 - lpf_thresh) * (lp_minimum + state_l), 1.0);
    gate_right = min(lp_minimum + range * lpf_thresh + (1.0 - lpf_thresh) * (lp_minimum + state_r), 1.0);
      
    linked ? (
      gate_left = gate_right = 0.5 * (gate_left + gate_right);
    );
      
    l_gate_filt.init_linearSVF(gate_left, resonance);
    r_gate_filt.init_linearSVF(gate_right, resonance);
  );
);
  
buf2.writeBuffer((1.0 - .5*(gate_left+gate_right)));


alpha_compander = 0.001;
function compander_compress(x)
local()
global(alpha_compander)
instance(y_comp, y_comp_current)
(
  y_comp == 0 ? y_comp = abs(x);

  // Signal level detection
  y_comp = abs(y_comp_current) * alpha_compander + y_comp * (1-alpha_compander);
  
  y_comp_current = x / (.0001 + y_comp)
);

function compander_expand(x)
local()
global(alpha_compander)
instance(y_expand)
(
  y_expand = abs(x) * alpha_compander + y_expand * (1-alpha_compander);

  x * y_expand
);

function naiveTri(t)
(
  t -= floor(t);
  t <= 0.5 ? (
    (4.0 * t - 1.0)
  ) : (
    (3.0 - 4.0 * t)
  )
);

function tanh(x)
local()
global()
instance()
(
  2/(1+exp(-2*x)) - 1
);

l = spl0;
r = spl1;

dry_l_delay.writeBuffer(l);
dry_r_delay.writeBuffer(r);

// Preserve original bass
dim_expand ? (
  l_delay.writeBuffer(l_delay_filt.eval_linearSVF_HP(l));
  r_delay.writeBuffer(r_delay_filt.eval_linearSVF_HP(r));

  chorus_tri = naiveTri(csample * israte * .25);
  ch_cur = dim_expand * .001 + ch_cur * .999;
  l_offset = ch_cur * (0.0075 + 0.002 * chorus_tri) * srate;
  r_offset = ch_cur * (0.0075 - 0.002 * chorus_tri) * srate;

  l -= .5 * r_delay.readBuffer(r_offset);
  r -= .5 * r_delay.readBuffer(l_offset);
);

alpha = 0;
n = alpha * n + (1.0-alpha) * noise1.noise_gen(noise_rate);

flutter_level > 0 ? (
  flutter = flutter_level * sin(flutter_speed * csample);
);

buf.writeBuffer(0);
buf.writeBuffer(n);

!mod_linked ? (
  n2 = alpha * n2 + (1.0-alpha) * noise2.noise_gen(noise_rate);
  buf3.writeBuffer(0);
  buf3.writeBuffer(n2);
) : n2 = n;

noise_level > 0 ? (
  l = l_compander.compander_compress(l);
  r = r_compander.compander_compress(r);
  r1 = rand();
  r2 = rand();
  l += noise_level * (r1 * r1 * r1 - 0.5);
  r += noise_level * (r2 * r2 * r2 - 0.5);
);

l_pitch.writeBuffer(l + feedback * fb_r);
r_pitch.writeBuffer(r + feedback * fb_l);

l = l_pitch.readBuffer(400 + depth * (n + flutter));
r = r_pitch.readBuffer(400 + depth * (n2 - flutter));

noise_level > 0 ? (
  l = l_compander.compander_expand(l);
  r = r_compander.compander_expand(r);
);

fb_l = l;
fb_r = r;

!bypass_lpg ? (
  l = l_gate_filt.eval_linearSVF_LP(l);
  r = r_gate_filt.eval_linearSVF_LP(r);

  enable_hp ? (
    l = l_gate_hp.eval_linearSVF_hp(l);
    r = r_gate_hp.eval_linearSVF_hp(r);
  );
);

drift = .999 * drift + 0.001 * (abs(l) + abs(r));

// Adaptive saturation based on how much the LPF is doing to get some HF back
saturation > 0 ? (
  iv = .99 * iv + .01 * (saturation / (.05 + max(vol_est_l, vol_est_r) * (gate_left + gate_right)));
  //l = tanh((l + asymmetry * drift) * iv)/iv;
  //r = tanh((r + asymmetry * drift) * iv)/iv;

  l = l_sat.antialiased_tanh_rect((l + asymmetry * drift) * iv)/iv;
  r = r_sat.antialiased_tanh_rect((r + asymmetry * drift) * iv)/iv;
  
);

asymmetry ? (
  alpha = .995;
  dc_l = alpha * dc_l + (1.0-alpha) * l;
  dc_r = alpha * dc_r + (1.0-alpha) * r;
  
  l -= dc_l;
  r -= dc_r;
);


spl0 = l * drywet + dry_l_delay.readBufferCheap() * (1-drywet);
spl1 = r * drywet + dry_r_delay.readBufferCheap() * (1-drywet);

@gfx 1050 450
knob_font_color_r = 0.9;
knob_font_color_g = 0.9;
knob_font_color_b = 0.8;
knob_font_color_a = 1;
widget_r = 35/255;
widget_g = 35/255;
widget_b = 130/255;
widget_a = 1.0;
toggle_r = .4;
toggle_g = .5;
toggle_b = 1.6;
toggle_a = 1.0;

KNOB_FONT = 6;
gfx_setfont(KNOB_FONT, "Arial", floor(14 * (1+fontscaling)));
KNOB_FONT2 = 7;
gfx_setfont(KNOB_FONT2, "Arial", floor(13 * (1+fontscaling)));
HINT_FONT = 8;
gfx_setfont(HINT_FONT, "Arial", floor(13 * (1+fontscaling)));
TOGGLE_FONT = 9;
gfx_setfont(TOGGLE_FONT, "Arial", floor(13 * (1+fontscaling)));


recSpeed = .3+.5*rand();
lsMod = lsMod * (1-recSpeed) + lightState * recSpeed;
lightState = rand() > lightProb;

lightState ? (
  // Light is off
  lightProb = .01;
) : (
  // Light is on
  lightProb = .9;
);

c = ( .1 + .3 * rand() ) * (1.0 - lightState);

gfx_set(.1 + c, .14 + c, 0.3 + c, .55);
gfx_rect(0, 0, gfx_w, gfx_h);

gfx_set(.8, .2, .4, 1);
c = 0;
x = 0;


function draw_building(x, y, w, h, window_x, window_y, spacing, intensity, special)
local(wx, wy, cx, cy, cwx, cwy, on)
global(gfx_a)
instance()
(
  x = floor(x);
  w = floor(w);
  gfx_set(.1 * intensity, .1 * intensity, .2 * intensity, 1);
  gfx_a = 1;
  gfx_rect(x, y, w, h);
  
  special ? (
    on = rand();
    on < .33 ? (
      wx = floor(.9*w);
      gfx_triangle(x, y, x, y - 10, x + w - 1, y);
      gfx_triangle(x, y, x, y - 17, x + wx - 1, y);
    ) : ( on < .5 ) ? (
      wx = floor(.3*w);
      gfx_triangle(x, y, x, y - 20, x + wx, y);
      gfx_triangle(x + w - wx - 1, y, x + w - 1, y - 20, x + w - 1, y);
      wx = floor(.2*w);
      gfx_triangle(x, y, x, y - 30, x + wx, y);
      gfx_triangle(x + w - wx - 1, y, x + w - 1, y - 30, x + w - 1, y);
    ) : ( 
      wx = floor(.2 * w * rand());
      wy = floor(rand() * 10);
      cy = y;
      loop(floor(rand()*5+2),
        gfx_set(.1 * intensity, .1 * intensity, .2 * intensity, 1);
        gfx_rect(x + wx, cy-wy, w - 2*wx, wy);   
        gfx_set(.1, .1, .3, .3 - .2 * intensity);
        gfx_line(x, cy + 1, x, y + h);
        wx *= 2;
        cy -= wy;
        wy *= floor(1 + rand());
      );
    );
  ) : (
    gfx_set(.1, .1, .3, .3 - .2 * intensity);
    gfx_line(x, y, x + w, y); 
    gfx_line(x, y + 1, x, y + h); 
  );

  wx = (w - spacing) / (window_x + spacing);
  wy = (h - spacing) / (window_y + spacing);
  
  cy = y + spacing;
  
  loop(wy,
    cx = x + spacing;
    loop(wx,
      cwx = window_x;
      cwy = window_y;
    
      on = rand() > .6;
      on *= rand();
      on > .9 ? ( cwx = max(cwx, 1); cwy = max(cwy, 1); intensity = rand(); );
      gfx_set(on*.5, on*.5, on * .3 * (1+2*rand()), intensity);
      gfx_rect(cx, cy, cwx, cwy);
      
      cwx > 2 ? (
        gfx_set(0, 0, 0, .4);
        gfx_line(cx, cy, cx + cwx - 1, cy); 
        gfx_line(cx, cy + 1, cx, cy + cwy - 1); 
      );
      
      cx += window_x + spacing;
    );
    cy += window_y + spacing;
  );
);

function draw_beam(x, y, r, center_angle, beam_width)
local(l, r)
(
  a1 = center_angle - beam_width;
  a2 = center_angle + beam_width;
  gfx_triangle(x, y, x + r * cos(a1), y + r * sin(a1), x + r * cos(a2), y + r * sin(a2));
);

function draw_city(surf, gw, gh)
global(gfx_dest, gfx_clear, gfx_a2)
local(depth, c, xpos, s, h, ypos, wx, wh, w, f, x, y, rad)
(
  gfx_setimgdim(1, gw, gh);
  gfx_dest = surf;
  gfx_set(0, 0, 0, 1);
  gfx_a2 = 0.0;
  gfx_rect(0, 0, gw, gh);

  x = rand() * gw;
  y = .5 * rand() * gh;
  rad = 700;
  loop(100,
    gfx_set(1, 1, 1, .005);
    gfx_circle(x, y, rad, 1);
    rad *= .98;
  );
  
  gfx_set(1, 1, 1, .5);
  gfx_circle(x, y, 20, 1, 1);
  
  rad = 20;
  loop(10,
    gfx_set(.2, .2, .2, .1);
    gfx_circle(x, y, rad, 1, 1);
    x += 1.3;
    y -= .5;
    rad *= .9;
  );
  
  gfx_set(1, 1, 1, .08);
  loop(4,
    draw_beam(rand() * gw, (.7 + .3 * rand()) * gh, 1.5 * gh, -.6 * $pi + .2 * $pi * rand(), (.001 + .005 * rand()) * $pi);
  );
  
  loop(1000,
    x = rand() * gw;
    y = .5 * rand() * gh;
    s = rand();
    gfx_set(1, 1, 1, s*s);
    gfx_rect(x, y, 1, 1);
  );
  
  gfx_a2 = 1;
  loop(4,
    depth = 5;
    c = 0;
    loop(400,
      xpos = 1.3 * gw * sin(rand()) - .1 * gw;
      s = rand();
      h = .18 * (gh * s) * (depth);
      ypos = gh - h;
      w = (100 + sin(.05*rand()) * 500) / depth;
      wx = (6 + rand() * 8) / depth;
      wh = (6 + rand() * 4) / depth;
      draw_building(xpos, ypos, w, h, wx, wh, wx, .001*c, c < (30-rand()*60));
       
      depth *= .996;
      c += 1;
    );
  );
  
  f = .4 / gw;
  gfx_gradrect(0, 0, gw, gh, 0, 0, .1, .1, .1*f, .1*f, .1*f, .1*f, .1*f, .1*f, 1*f, 1*f);
);

gfx_set(1, 1, 1, .05);

(gfx_w != city_w || gfx_h != city_h) ? (
  city_w = gfx_w;
  city_h = gfx_h;
  draw_city(1, gfx_w, gfx_h);
);

gfx_dest = -1;
gfx_x = 0;
gfx_y = 0;
gfx_mode = 0;
gfx_set(1, 1, 1, 1.0);
gfx_blit(1, 1, 0);

gfx_set(.3, .3, 1, .4);
gfx_x = 0;
gfx_y = .5 * gfx_y_remaining + .4 * gfx_y_remaining * buf.readBuffer(c);
gfx_y_remaining = gfx_h - 80 - knobSize;

dc = 500000 / gfx_w;
loop(gfx_w,
  next_pt = buf.readBuffer(c + 1);
  gfx_lineto(x, .5 * gfx_y_remaining + .4 * gfx_y_remaining * next_pt);
  c += dc;
  x += 1;
);

!mod_linked ? (
  x = c = 0;
  gfx_x = 0;
  gfx_y = .5 * gfx_y_remaining + .4 * gfx_y_remaining * buf3.readBuffer(c);
  gfx_y_remaining = gfx_h - 80 - knobSize;
  
  dc = 500000 / gfx_w;
  gfx_set(.6, 0, .9, .4);
  loop(gfx_w,
    next_pt = buf3.readBuffer(c + 1);
    gfx_lineto(x, .5 * gfx_y_remaining + .4 * gfx_y_remaining * next_pt);
    c += dc;
    x += 1;
  );
);

gfx_x = 0;
gfx_y = .5 * gfx_y_remaining + .35 * gfx_y_remaining * buf.readBuffer(c); 
dc = 500000 / gfx_w;
x = 0;
c = 0;
gfx_set(.2, .2, .8, .2);
loop(gfx_w,
  next_pt = buf2.readBuffer(c + 1);
  gfx_lineto(x, .5 * gfx_y_remaining + .35 * gfx_y_remaining * next_pt);
  c += dc;
  x += 1;
);

(gfx_w != last_gfx_w) ? (
  last_gfx_w = gfx_w;
  cs = rain;
  loop(200,
    cs[1] = gfx_w * rand();
    cs[] = gfx_h * rand();
    cs +=2 ;
  );
);

maxspeed = 22;
spdx = maxspeed * .1 + 3*abs(sin(.1*time_precise()));
spdy = maxspeed;
color = .6;
len = 1;
cs = rain;
loop(200,
  gfx_set(1, 1, 1, color);
  y = cs[];
  x = cs[1];
  y > gfx_h ? (
    cs[1] = gfx_w * rand();
    cs[] = -spdy * len;
  ) : (
    cs[] += spdy;
    cs[1] += spdx;
    gfx_line(x, y, x + spdx * len, y + spdy * len);
  );
  
  cs += 2;
  color *= .98;
  len *= .992;
);


knobSize = 32 + 15 * (1 - show_advanced);
nButtons = 6 + 9 * show_advanced;
stepSize = gfx_w / (nButtons*3 + 1);
//cX = 0.5 * (gfx_w - 3 * nButtons * stepSize);
cX = 0;
cY = gfx_h - 70;

gfx_a = 1.0;

/*
lpToggle.label = sprintf(33, " Mode");
lpToggle.drawToggle(cX, cy - .6 * knobSize, .15*knobSize, .15*knobSize, paula, widget_r, widget_g, widget_b, widget_a, toggle_r, toggle_g, toggle_b, toggle_a, "Enabling this enables the LED\nfilter on the Amiga (lowpass\nfilter on the output)");
paula = lpToggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);

lerpToggle.label = sprintf(33, " S&H / Lin");
lerpToggle.drawToggle(cX, cy - .1 * knobSize, .15*knobSize, .15*knobSize, interp, widget_r, widget_g, widget_b, widget_a, toggle_r, toggle_g, toggle_b, toggle_a, "Enabling this toggle switches\nto linear interpolation.");
interp = lerpToggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);
*/

gfx_x = 0;
gfx_y = 0;
gfx_printf(" v0.12. Warning: this is an alpha version. Plugin may still be subject to change.");


cX += 2 * stepSize;

inputKnob.knob_set(sprintf(1, "%.2f dB", input_boost), 1, input_boost / 18);
inputKnob.drawKnob(cX, cY, knobSize, "Input boost", "Input boost.", 0);
inputKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0) ? ( 
  input_boost = inputKnob.value * 18;
  slider_automate(input_boost); 
);

hpToggle.drawToggle(cX - .95 * knobSize, cy - .95 * knobSize, .15*knobSize, .15*knobSize, enable_hp, widget_r, widget_g, widget_b, widget_a, toggle_r, toggle_g, toggle_b, toggle_a, "Enabling this toggle runs the signal\nthrough a highpass filter.");
enable_hp = hpToggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);

sidechainToggle.drawToggle(cX + .9 * knobSize, cy - .95 * knobSize, .15*knobSize, .15*knobSize, side_chain, widget_r, widget_g, widget_b, widget_a, toggle_r, toggle_g, toggle_b, toggle_a, "Enabling this toggle uses the side-chain to control the LPG.");
side_chain = sidechainToggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);

cX += 3 * stepSize;

bypassToggle.drawToggle(cX - .95 * knobSize, cy - .95 * knobSize, .15*knobSize, .15*knobSize, 1 - bypass_lpg, widget_r, widget_g, widget_b, widget_a, toggle_r, toggle_g, toggle_b, toggle_a, "Enable LPG.");
bypass_lpg = 1 - bypassToggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);

lpfKnob.knob_set(sprintf(1, "%.2f", lpf_level), 1 - bypass_lpg, lpf_level);
lpfKnob.drawKnob(cX, cY, knobSize, "Lowpass gate", "Lowpass gate level.", 0);
lpfKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0.701) ? ( 
  lpf_level = lpfKnob.value;
  slider_automate(lpf_level); 
);

!bypass_lpg ? (
  linkToggle.drawToggle(cX + .9 * knobSize, cy - .95 * knobSize, .15*knobSize, .15*knobSize, linked, widget_r, widget_g, widget_b, widget_a, toggle_r, toggle_g, toggle_b, toggle_a, "Link L/R for the LPG.");
  linkToggle.active = 1 - bypass_lpg;
  linked = linkToggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);
);

cX += 3 * stepSize;

show_advanced ? (

  resoKnob.knob_set(sprintf(1, "%.2f", resonance / .99), 1, resonance / .99);
  resoKnob.drawKnob(cX, cY, knobSize, "Resonance", "Resonance.", 0);
  resoKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0.701) ? ( 
    resonance = resoKnob.value * .99;
    slider_automate(resonance); 
  );
  
  cX += 3 * stepSize;

  atkKnob.knob_set(sprintf(1, "%d ms", attack), 1, (attack - 5) / 75);
  atkKnob.drawKnob(cX, cY, knobSize, "Attack", "Attack of the filter.", 0);
  atkKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, (9.22 - 5) / 75) ? ( 
    attack = atkKnob.value * 75 + 5;
    slider_automate(attack); 
  );
  
  cX += 3 * stepSize;
  
  decayKnob.knob_set(sprintf(1, "%d ms", decay), 1, (decay - 5) / 495);
  decayKnob.drawKnob(cX, cY, knobSize, "Decay", "Decay of the filter.", 0);
  decayKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, (110.666 - 5) / 495) ? ( 
    decay = decayKnob.value * 495 + 5;
    slider_automate(decay); 
  );

  cX += 3 * stepSize;
);

modLinkToggle.drawToggle(cX - .95 * knobSize, cy - .95 * knobSize, .15*knobSize, .15*knobSize, mod_linked, widget_r, widget_g, widget_b, widget_a, toggle_r, toggle_g, toggle_b, toggle_a, "Link L/R for the modulation.");
mod_linked = modLinkToggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);

rateKnob.knob_set(sprintf(1, "%d ms", rate), 1, (rate - 75) / (1000 - 75));
rateKnob.drawKnob(cX, cY, knobSize, "Slowness", "Modulation smoothness.", 0);
rateKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, (591.6 - 75) / (1000 - 75)) ? ( 
  rate = rateKnob.value * (1000 - 75) + 75;
  slider_automate(rate); 
);

cX += 3 * stepSize;

depthKnob.knob_set(sprintf(1, "%d", depth), 1, depth / 350);
depthKnob.drawKnob(cX, cY, knobSize, "Depth", "Modulation depth.", 0);
depthKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 179.9 / 350) ? ( 
  depth = depthKnob.value * 350;
  slider_automate(depth); 
);

cX += 3 * stepSize;

show_advanced ? (

  saturationKnob.knob_set(sprintf(1, "%.2f", saturation), 1, saturation);
  saturationKnob.drawKnob(cX, cY, knobSize, "Saturation", "Saturation level.", 0);
  saturationKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, .1003) ? ( 
    saturation = saturationKnob.value;
    slider_automate(saturation); 
  );
  
  cX += 3 * stepSize;
  
  asymKnob.knob_set(sprintf(1, "%.2f", asymmetry), 1, asymmetry);
  asymKnob.drawKnob(cX, cY, knobSize, "Asymmetry", "Adds a bias prior to the saturator.", 0);
  asymKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0.663367) ? ( 
    asymmetry = asymKnob.value;
    slider_automate(asymmetry); 
  );
  
  cX += 3 * stepSize;

  noiseKnob.knob_set(sprintf(1, "%.2f", noise_level), 1, noise_level / 0.05);
  noiseKnob.drawKnob(cX, cY, knobSize, "Noise", "Noise level.", 0);
  noiseKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0.0057 / 0.05) ? ( 
    noise_level = noiseKnob.value * 0.05;
    slider_automate(noise_level); 
  );

  cX += 3 * stepSize;
);

dimKnob.knob_set(sprintf(1, "%.2f", dim_expand), 1, dim_expand);
dimKnob.drawKnob(cX, cY, knobSize, "Space", "Delay line dimension expansion.", 0);
dimKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0) ? ( 
  dim_expand = dimKnob.value;
  slider_automate(dim_expand); 
);

cX += 3 * stepSize;

show_advanced ? (
  fbKnob.knob_set(sprintf(1, "%.2f", feedback / .5), 1, feedback / .5);
  fbKnob.drawKnob(cX, cY, knobSize, "Feedback", "Feedback.", 0);
  fbKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0) ? ( 
    feedback = fbKnob.value * .5;
    slider_automate(feedback);
  );
  
  cX += 3 * stepSize;

  flutterKnob.knob_set(sprintf(1, "%.2f", flutter_level / 0.05), 1, flutter_level / 0.05);
  flutterKnob.drawKnob(cX, cY, knobSize, "Flutter Level", "Flutter Level.", 0);
  flutterKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0) ? ( 
    flutter_level = flutterKnob.value * 0.05;
    slider_automate(flutter_level); 
  );
  
  cX += 3 * stepSize;
  
  flutterRateKnob.knob_set(sprintf(1, "%d Hz", flutter_rate), 1, flutter_rate / 50);
  flutterRateKnob.drawKnob(cX, cY, knobSize, "Flutter Rate", "Flutter Rate.", 0);
  flutterRateKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 0.33) ? ( 
    flutter_rate = flutterRateKnob.value * 50;
    slider_automate(flutter_rate);
  );
  
  cX += 3 * stepSize;
);
  
drywetKnob.knob_set(sprintf(1, "%d", drywet * 100), 1, drywet);
drywetKnob.drawKnob(cX, cY, knobSize, "Dry/Wet", "Dry/Wet ratio.", 0);
drywetKnob.knob_processMouse(mouse_x, mouse_y, mouse_cap, 1) ? ( 
  drywet = drywetKnob.value;
  slider_automate(drywet);
);

advancedToggle.label = sprintf(33, " Advanced");
advancedToggle.drawToggle(gfx_w - 70, gfx_h - 15, .15*knobSize, .15*knobSize, show_advanced, widget_r, widget_g, widget_b, widget_a, toggle_r, toggle_g, toggle_b, toggle_a, "Show advanced options.");
show_advanced = advancedToggle.processMouseToggle(mouse_x, mouse_y, mouse_cap);

hinter.drawHint_draw();
