@init
function reset_font()
(
  gfx_setfont(1, "Verdana", 18 * gfx_w / 600);
);

function label_font()
(
  gfx_setfont(2, "Verdana", 9 * gfx_w / 600);
);

function hinter.sethint(label)
instance(hint_time, hint_label, was_over)
global(delta_time)
(
  hint_label = label;
  hint_time += delta_time;
  was_over = 1;
);

function hinter.drawhint()
instance(hint_time, hint_label, was_over)
global(gfx_x, gfx_y, gfx_w, gfx_h, mouse_x, mouse_y)
local(w, h)
(
  !was_over ? hint_time = 0;
  was_over = 0;

  ( hint_time > 0.75 ) ? (
    gfx_setfont(7, "Arial", 12);
    gfx_measurestr(hint_label, w, h);
      
    gfx_x = mouse_x+15;
    gfx_y = mouse_y+15;
    ( gfx_x > 0.5*gfx_w ) ? gfx_x = mouse_x - w - 8;
    ( gfx_y > 0.5*gfx_h ) ? gfx_y = mouse_y - h - 8;

    gfx_set( 0.05, 0.05, 0.1, .8 );
    gfx_rect(gfx_x-2, gfx_y-2, w+4, h+4);
    gfx_set( .7, .7, .7, 1 );      
    gfx_printf(hint_label);
  );
  reset_font();
);

function init_knob(_minimum, _maximum, _default, _slider_idx)
instance(minimum, maximum, default, slider_idx)
global()
(
  minimum = _minimum;
  maximum = _maximum;
  default = _default;
  slider_idx = _slider_idx;
);

function disabled_color()
global(gfx_r, gfx_g, gfx_b, gfx_a)
local()
(
  gfx_r = gfx_r * 0.04 + 0.16;
  gfx_g = gfx_g * 0.04 + 0.16;
  gfx_b = gfx_b * 0.04 + 0.16;
  gfx_a *= 0.3;
);

function draw_choice(me, x, y, w, h, slider_idx, hint)
local(over)
global(gfx_a, last_cap, mouse_cap, mouse_x, mouse_y, hinter.sethint)
instance(_x, _y, _w, _h, _me, active)
(
  active = me == slider(slider_idx);
  _x = x; _y = y; _w = w; _h = h; _me = me;
  over = (mouse_x > x) && (mouse_y > y) && (mouse_x < (x + w)) && (mouse_y < (y + h));

  active ? (
    colormodel(0); gfx_a = 0.85;
  ) : (
    disabled_color();
  );
  gfx_rect(x, y, w, h, 0);
  gfx_rect(x - 1, y - 1, w + 2, h + 2, 0);
//  gfx_rect(x, y + 1, w - 2, h - 2, 0);
  
  gfx_set(0, 0, 0, 0.5);
  gfx_rect(x + 3, y + 3, w - 7, h - 7, 1);
  
  over ? (
    ((mouse_cap == 1) && (last_cap == 0)) ? (
      slider_automate(slider(slider_idx) = me);
    ) : (
      hinter.sethint(hint);
    );
  );
);

function draw_knob(x, y, r, label, hint, fancy, enabled)
instance(minimum, maximum, default, slider_idx, lx, ly, last_click, relative_position, _x, _y, _r)
local(dx, dy, rr, ang, over, irange, speed, new_value, cc)
global(gfx_x, gfx_y, captured, last_cap, gfx_a, mouse_cap, mouse_x, mouse_y, mouse_wheel, last_mouse_y, dbl_click_speed, hinter.sethint)
(
  dx = mouse_x - x;
  dy = mouse_y - y;
  over = dx * dx + dy * dy < r * r;
  x = floor(x);
  y = floor(y);
  _x = x;
  _y = y;
  _r = r;
  
  cc = 1;
  gfx_set(0, 0, 0, .4);
  gfx_circle(x, y, r, 1);
  loop(15,
    colormodel(pow(cc - cc * cc, 2.5)); gfx_a = 0.85;
    !enabled ? disabled_color();

    gfx_circle(x, y, r * (0.97 + 0.08 * cc), 0);
    cc -= 0.05;
  );
  
  irange = 1.0 / (maximum - minimum);
  relative_position = (slider(slider_idx) - minimum) * irange;
  ang = 0.75 + 1.5 * relative_position;
  
  fancy ? (
    cc = 6;
    loop(18,
      colormodel(cc - 0.15 * cc * cc); gfx_a = 0.65;
      !enabled ? disabled_color();
      gfx_arc(x, y, ceil(r * (1.05 + 0.02 * cc)), 1.25 * $pi, (ang + 0.5) * $pi, ang, 1);
      cc *= 0.95;
    );
  );

  gfx_set(0, 0, 0, 0.2);
  gfx_circle(x, y, r+1, 0);
  gfx_set(0, 0, 0, 0.05);
  gfx_circle(x, y, 0.82 * r, 0);
  gfx_circle(x, y, 0.82 * r + 1, 0);
  
  gfx_set(1, 1, 1, 1);
  gfx_x = x - r;
  gfx_y = y - r;
  gfx_drawstr(label, 5, x + r, y + r);
  
  ang = 0.75 + 1.5 * relative_position;  
  cc = 15;
  /*colormodel(cc);
  enabled ? gfx_circle(x + 0.7 * r * cos($pi * ang), y + 0.7 * r * sin($pi * ang), 0.004 * r * cc, 1);*/
 
  over ? (
    (abs(mouse_wheel) > 0) ? (
      speed = 0.0002;
      (mouse_cap & 4 > 0) ? speed *= 0.5;
      (mouse_cap & 8 > 0) ? speed *= 0.25;
      new_value = min(max(slider(slider_idx) + speed * mouse_wheel * (maximum - minimum), minimum), maximum);
      slider_automate(slider(slider_idx) = new_value);
      mouse_wheel = 0;
    );
  );

  (mouse_cap & 1) ? (
    (last_cap & 1 == 0) ? (
      over ? (
        ((time_precise() - last_click) < dbl_click_speed) ? (
          slider_automate(slider(slider_idx) = default);
        ) : (
          last_click = time_precise();
          captured = slider_idx;      
        );
      );
    ) : ( captured == slider_idx ) ? (
      speed = 0.004;
      (mouse_cap & 4 > 0) ? speed *= 0.25;
      (mouse_cap & 8 > 0) ? speed *= 0.025;
      dy = ly - mouse_y;
      new_value = min(max(slider(slider_idx) + speed * dy * (maximum - minimum), minimum), maximum);
      slider_automate(slider(slider_idx) = new_value);
    );
  ) : (
    over ? hinter.sethint(hint);
  );
  
  ly = mouse_y;
  
  over
);

function drawToggle(_x, _y, _w, _h, _on, _str)
local(ww, hh)
instance(x, y, w, h, str, on, invert, label)
global(gfx_x, gfx_y, gfx_a, gfx_mode, 
       TOGGLE_FONT, knob_font_color_r, knob_font_color_g, knob_font_color_b, knob_font_color_a)
(
  x = _x;
  y = _y;
  w = _w;
  h = _h;
  on = _on;
  str = _str;

  gfx_set(0, 0, 0, 0);
  gfx_rect(x, y, w, h);
  
  colormodel(on * 0.3);
  gfx_rect(x, y, w, h);
  
  colormodel(on * 0.3); gfx_a = 0.3;
  gfx_line(x, y, x+w, y);
  gfx_line(x, y, x, y+h);
  gfx_line(x+w, y, x+w, y+h);
  gfx_line(x, y+h, x+w, y+h);

  ( label ) ? (
    gfx_set(knob_font_color_r, knob_font_color_g, knob_font_color_b, knob_font_color_a);
    gfx_setfont(TOGGLE_FONT);
    gfx_measurestr(label, ww, hh);
    gfx_x = floor(x+1.5*w);
    gfx_y = floor(y-.5*hh+.5*h);
    gfx_printf(label);
  );
  
  ( (on && !invert) || (!on && invert) ) ? (
    colormodel(0.8);
    gfx_rect(x, y, w, h);
    gfx_a *= .6;
    gfx_rect(x-1, y-1, w+2, h+2);
    gfx_a *= .6;
    gfx_rect(x-2, y-2, w+4, h+4);
    gfx_a *= .6;
    gfx_rect(x-3, y-3, w+6, h+6);
    gfx_a *= .4;
    gfx_circle(x+.5*w-1, y+.5*h-1, 2*max(w,h), 2*max(w,h));
    gfx_a *= .4;
    gfx_circle(x+.5*w-1, y+.5*h-1, 3*max(w,h), 3*max(w,h));
    gfx_a *= .4;
    gfx_circle(x+.5*w-1, y+.5*h-1, 4*max(w,h), 4*max(w,h));
    gfx_a *= .4;
    gfx_circle(x+.5*w-1, y+.5*h-1, 5*max(w,h), 5*max(w,h));
  );
);

function processMouseToggle(x, y, w, h, on, str, mx, my, mousecap)
instance(x, y, w, h, on, lastleft, str)
local(left, slack, over)
global(hinter.sethint, comboboxOpen)
(
  !comboboxOpen ? (
    slack = 5;
    left = mousecap & 1;
    
    over = ( (mx >= (x-slack)) && ( mx <= (x+w+slack) ) && ( my >= (y-slack) ) && ( my <= (y+h+slack) ) );
    
    over ? (
      ( (left == 1) && (lastleft == 0) ) ?  (
        on = 1 - on;
      );
      hinter.sethint(str);
    );
    
    this.drawToggle(x, y, w, h, on, str);
    
    lastleft = left;
  );
  
  on
);
 
