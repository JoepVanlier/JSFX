desc:Partials

slider1:model=0<0,1,2{Metal,Tube,Tw}>model
slider4:damp=0.1<-2,2,0.0001>Damping
slider3:relative_position=0.1<0.0001,0.999,0.001>Relative position
slider5:freq_damp=-4<-6,-1,0.0001>Frequency Dependent Damping
slider6:inharmonic=-4<-4, 0, 0.0001>Inharmonic
slider7:stiffness=4.6<0,6,0.0001>Stiffness
slider8:stiffness_exp=2.3<1,3.0,.0001>Stiffness Exponent
slider9:include_long=0<0,1,{Off,On}>Include longitudinal modes
slider10:base_note=0<-12,12,1>Base note
slider11:force_fb=0<0,15,0.0001>Forced feedback
slider12:partials=32<16,64,16>Partials
slider18:midi_input=0<0,1,1{Off,On}>Midi input
slider63:stft=0<0,1,1>STFT

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import saike_kp_midi.jsfx-inc
import saike_modal.jsfx-inc
import saike_modal_stft.jsfx-inc

@init
freemem = stft_mem.fft_mem(freemem);

freemem = string1.string_mem(freemem, stft_mem.fft_size, stft_mem.fft_interval, stft_mem.in_fft_mem, stft_mem.out_fft_mem);
freemem = string2.string_mem(freemem, stft_mem.fft_size, stft_mem.fft_interval, stft_mem.in_fft_mem, stft_mem.out_fft_mem);
freemem = string3.string_mem(freemem, stft_mem.fft_size, stft_mem.fft_interval, stft_mem.in_fft_mem, stft_mem.out_fft_mem);
freemem = string4.string_mem(freemem, stft_mem.fft_size, stft_mem.fft_interval, stft_mem.in_fft_mem, stft_mem.out_fft_mem);
freemem = string5.string_mem(freemem, stft_mem.fft_size, stft_mem.fft_interval, stft_mem.in_fft_mem, stft_mem.out_fft_mem);

freemem = midi.init_midi(freemem);


function tanh(x)
local()
global()
instance()
(
  (2/(1+exp(-2*x)) - 1)
);


function set_pars(f_0)
(
  stft ? (
    this.set_pars_stft(f_0);
  ) : (
    this.set_pars_td(f_0);
  );
);

function eval_string(f_h)
(
  stft ? (
    this.eval_string_stft(f_h);
  ) : (
    this.eval_string_td(f_h);
  );
);


function update_notes()
instance(notes_on, active_note_mem)
global(string1.set_pars, string2.set_pars, string3.set_pars, string4.set_pars, string5.set_pars, srate, pitch)
local(scaling)
(
  // Update note parameters
  scaling = 440;
  pitch = scaling * 2 ^ ((active_note_mem[0] - 69) / 12);
  notes_on ? string1.set_pars(scaling * 2 ^ ((active_note_mem[0] - 69) / 12));
  notes_on > 1 ? string2.set_pars(scaling * 2 ^ ((active_note_mem[1] - 69) / 12));
  notes_on > 2 ? string3.set_pars(scaling * 2 ^ ((active_note_mem[2] - 69) / 12));
  notes_on > 3 ? string4.set_pars(scaling * 2 ^ ((active_note_mem[3] - 69) / 12));
  notes_on > 4 ? string5.set_pars(scaling * 2 ^ ((active_note_mem[3] - 69) / 12));
);

function force_update()
(
  string1.ticker += 1000;
  string2.ticker += 1000;
  string3.ticker += 1000;
  string4.ticker += 1000;
  string5.ticker += 1000;
  midi.update_notes();
);


@slider
force_update();

@block
midi.midi_block();

@sample
midi.curSample += 1;
midi_input ? (
  midi.notes_remain ? (
    midi.midi_sample();
    // Force instant reset
    force_update();
  );
);


update_global_parameters();

!midi_input ? (
  mul = pow(2, base_note / 12);
  string1.set_pars(220/2 * mul);
  string2.set_pars(329.628/2 * mul);
  string3.set_pars(261.63 * mul);
  string4.set_pars(329.628 * mul);
);

f_hn = 0;
f_b = 0;

include_long ? (
  string1.eval_long();
  string2.eval_long();
  string3.eval_long();
  string4.eval_long();
  string5.eval_long();
);

stft ? stft_mem.read_stft(f_h);

midi_input ? (
  string1.eval_string(midi.notes_on > 0 ? f_h : 0);
  string2.eval_string(midi.notes_on > 1 ? f_h : 0);
  string3.eval_string(midi.notes_on > 2 ? f_h : 0);
  string4.eval_string(midi.notes_on > 3 ? f_h : 0);
  string5.eval_string(midi.notes_on > 4 ? f_h : 0);
) : (
  string1.eval_string(f_h);
  string2.eval_string(f_h);
  string3.eval_string(f_h);
  string4.eval_string(f_h);
  string5.f_b = string5.f_hn = 0;
);

stft ? (
  stft_mem.write_stft();
  f_b = stft_mem.f_b;
  f_hn = stft_mem.f_hn;
) : (
  f_b += string1.f_b; f_hn += string1.f_hn;
  f_b += string2.f_b; f_hn += string2.f_hn;
  f_b += string3.f_b; f_hn += string3.f_hn;
  f_b += string4.f_b; f_hn += string4.f_hn;
  f_b += string5.f_b; f_hn += string5.f_hn;
);

hammer = 0;

/*
env_f = max(spl0 * f_hn, 0.995 * env_f);
sig = (rand() - 0.5);
lp = 0.4 * lp + 0.6 * sig;
f_b += 0.2 * (sig - lp) * abs(env_f);
*/

hammer ? (
  f_h = (1 + force_fb) * f_hn;
  f_h += spl0;
  mh = 4.9;
  ah = -(1.0/mh) * fdy;
  vh = vh + (1.0/srate) * ah;
  yh = yh + (1.0/srate) * vh;
  dy = - f_h + yh;
  fdy = ((dy > 0) ? (10^stiffness) * dy^stiffness_exp : 0);
  f_h = fdy;
) : (
  // No hammer
  delay = 1;
  delay ? (
    f_h = (1 + force_fb) * f_hn;
    f_h += spl0;
    f_h = -(f_h > 0 ? (10^stiffness) * f_h^stiffness_exp : 0);
  ) : (
    f_h = f_delay;
    f_delay = (1 + force_fb) * f_hn;
    f_delay += spl0;
    f_delay = -(f_delay > 0 ? (10^stiffness) * f_delay^stiffness_exp : 0);
  );
);

stft ? (
  f_delay = f_h = spl0;
  f_h = -(f_h > 0 ? (10^stiffness) * f_h^stiffness_exp : 0);
);

spl0 = spl1 = f_b;

@gfx
gfx_set(0, 0, 0, 1);
gfx_rect(0, 0, gfx_w, gfx_h);

gfx_set(0.3, 0.3, 0.7, 1);
ix = 0;
loop(string1.fft_size,
  yc = 0.5 * gfx_h * sqrt(string1.coeff_mem[2 * ix]^2 + string1.coeff_mem[2 * ix + 1]^2);
  gfx_rect(2 * ix, gfx_h - yc, 1, yc);
  ix += 1;
);

