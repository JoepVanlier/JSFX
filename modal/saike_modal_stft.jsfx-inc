@init
function fft_mem(freemem)
instance(prev_fft_size, fft_size
         overlap_factor,
         fft_interval,
         in_fft_mem, out_fft_mem,
         window_mem,
         coeff_mem, mix_mem,
         input_mem, output_mem,
         fft_idx, output_idx,
         fft_scaling_factor,
         buffer_size)
global()
local(i, r, a0, a1, a2, a3, a4)
(
  fft_size = 256;
  buffer_size = 65536;
  /* Make sure we start on a boundary */
  freemem = ceil(freemem / 65536) * 65536;
  freemem = (coeff_mem = freemem) + 2 * fft_size;
  freemem = (mix_mem = freemem) + fft_size;
  freemem = (in_fft_mem = freemem) + 2 * fft_size;
  freemem = (out_fft_mem = freemem) + 2 * fft_size;
  freemem = (window_mem = freemem) + 2 * fft_size;
  freemem = (input_mem = freemem) + buffer_size;
  freemem = (output_mem = freemem) + buffer_size;
  overlap_factor = 6;
  
  output_idx = 0;
  fft_idx = 0;
  fft_interval = 2 * fft_size/overlap_factor;
  fft_scaling_factor = 0.5 / overlap_factor/fft_size;
  
  // Hann
  a0 = 0.5;
  a1 = 0.5;
  a2 = a3 = a4 = 0;
  
  // Blackmann-Harris
  /*a0 = 0.35875;
  a1 = 0.48829;
  a2 = 0.14128;
  a3 = 0.01168;
  a4 = 0;*/
  
  fft_size != prev_fft_size ? (
    prev_fft_size = fft_size;
    
    i = 0;
    loop(2 * fft_size,
      r = (i + 0.5) / (2 * fft_size);
      window_mem[i] = sqrt(fft_scaling_factor) * (a0 - a1 * cos(2 * $pi * r) + a2 * cos(4 * $pi * r) - a3 * cos(6 * $pi * r) + a4 * cos(8 * $pi * r));
      i += 1;
    );
  );
  freemem
);

function set_pars_stft(f_0)
global(inharm, base_damp, f_damp, relative_position, soundboard_factor, srate, maxbin)
local(k, f_k, omega_k, advance, bin, irate, partials, damp)
instance(coeff_mem, mix_mem, win, wout, fft_size, fft_interval, overlap_factor, ticker)
(
  ticker += 1;
  ticker > 256 ? (
    memset(coeff_mem, 0, 2 * fft_size);
    memset(mix_mem, 0, fft_size);
    
    partials = floor(0.25 * srate / f_0);
    irate = fft_interval / srate;
    
    k = 1;
    loop(partials,
      f_k = f_0 * k * sqrt(1 + inharm * (k-1) * (k-1));
      (f_k < 0.5 * srate) ? (
        omega_k = 2.0 * $pi * f_k;
        
        advance = omega_k * fft_interval / srate;
        bin = 2 + 2 * floor((f_k / srate) * (2 * fft_size) - 0.5);
        
        maxbin = max(maxbin, f_k);
        damp = exp(- (base_damp + f_damp * omega_k) * irate);
        coeff_mem[bin] = cos(advance) * damp;
        coeff_mem[bin + 1] = sin(advance) * damp;
        
        mix_mem[0.5 * bin] = 0.000005 * sin(k * $pi * relative_position);// * (k * soundboard_factor);
      );
      
      k += 1;
    );
    ticker = 0;
  );
);

function process_block(in_fft_mem, out_fft_mem)
instance(fft_size, fft_interval, coeff_mem, mix_mem)
global(bin, srate, freq, advance)
local(f_bin, ix)
(
  fft_real(in_fft_mem, fft_size * 2);
  fft_permute(in_fft_mem, fft_size);
 
  ix = 0;
  loop(fft_size,
    in_fft_mem[2 * ix] *= mix_mem[ix];
    in_fft_mem[2 * ix + 1] *= mix_mem[ix];
    ix += 1;
  );
  
  
  //convolve_c(out_fft_mem, coeff_mem, fft_size);
  /*ix = 0;
  loop(fft_size,
    out_fft_mem[ix] += in_fft_mem[ix];
    out_fft_mem[ix + 1] += in_fft_mem[ix + 1];
    ix += 2;
  );*/
  
  
  
  ix = 0;
  loop(fft_size,
    in_fft_mem[ix] += coeff_mem[ix] * out_fft_mem[ix] - coeff_mem[ix + 1] * out_fft_mem[ix+1];
    in_fft_mem[ix+1] += coeff_mem[ix] * out_fft_mem[ix+1] + coeff_mem[ix + 1] * out_fft_mem[ix];
    ix += 2;
  );
  
  memcpy(out_fft_mem, in_fft_mem, fft_size * 2);
  
  
  fft_ipermute(out_fft_mem, fft_size);
  ifft_real(out_fft_mem, fft_size * 2);
);

function read_block(input_mem, input_idx, fft_loc, window_ptr, len, buffer_size)
local()
instance()
global()
(
  input_idx -= len;
  input_idx < 0 ? input_idx += buffer_size;
  loop(len,
    input_idx == buffer_size ? input_idx = 0;
    fft_loc[] = input_mem[input_idx] * window_ptr[];
    window_ptr += 1;
    input_idx += 1;
    fft_loc += 1;
  );
);

function write_block(output_mem, output_idx, fft_ptr, window_ptr, len, buffer_size)
local()
instance()
global()
(
  loop(len,
    (output_idx == buffer_size) ? output_idx = 0;
    output_mem[output_idx] += fft_ptr[] * window_ptr[];
    fft_ptr += 1;
    window_ptr += 1;
    output_idx += 1;
  );
);

function eval_string_stft(f_h)
instance(fft_idx,
         in_fft_mem, out_fft_mem, window_mem,
         fft_interval, fft_size, 
         input_mem, output_mem, buffer_size,
         input_idx, output_idx,
         f_hn, f_b)
global()
local(tmp)
(
  f_hn = f_b = 0;
  input_idx == buffer_size ? input_idx = 0;
  input_mem[input_idx] = f_h;

  (fft_idx >= fft_interval) ? (
    fft_idx = 0;
    read_block(input_mem, input_idx, in_fft_mem, window_mem, fft_size * 2, buffer_size);
    this.process_block(in_fft_mem, out_fft_mem);
    write_block(output_mem, output_idx, out_fft_mem, window_mem, fft_size * 2, buffer_size);
    tmp = in_fft_mem;
    in_fft_mem = out_fft_mem;
    out_fft_mem = tmp;
  );

  output_idx == buffer_size ? output_idx = 0;
  f_hn = f_b = output_mem[output_idx];
  output_mem[output_idx] = 0;

  fft_idx += 1;
  input_idx += 1;
  output_idx += 1;
);


