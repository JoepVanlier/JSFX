@init
function init_allpass(buffer, buffer_size)
instance(buffer)
(
  this.initBuffer(buffer, buffer + buffer_size);
  buffer + buffer_size + 1
);

function eval_allpass(x)
local(ap_sample, delayed_sample)
instance(gain, offset)
global()
(
  delayed_sample = this.readBuffer_fixed(offset);
  ap_sample = x + gain * delayed_sample;
  this.writeBuffer(ap_sample);
  
  delayed_sample - gain * ap_sample;
);

function eval_allpass_cst(x, gain)
local(ap_sample, delayed_sample)
instance(offset)
global()
(
  delayed_sample = this.readBuffer_fixed(offset);
  ap_sample = x + gain * delayed_sample;
  this.writeBuffer(ap_sample);
  
  delayed_sample - gain * ap_sample;
);

function eval_allpass_50(x)
local(ap_sample, delayed_sample)
instance(offset)
global()
(
  delayed_sample = this.readBuffer_fixed(offset);
  ap_sample = x + 0.5 * delayed_sample;
  this.writeBuffer(ap_sample);
  delayed_sample - 0.5 * ap_sample;
);

function reset_allpass()
local()
global()
instance(ap_sample, delayed_sample, buffer, buffer_max)
(
  ap_sample = delayed_sample = 0;
  memset(buffer, 0, buffer_max - buffer);
);

function eval_tpt_monopole(x)
instance(s, coeff)
global()
local(y, v)
(
  v = coeff*(x - s);
  y = v + s;
  s = y + v;
  y
);
  
function init_tpt_monopole(cutoff)
instance(coeff)
global(srate)
local(omega, sin_omega)
(
  // tan(pi/2) is slow
  // g = tan($pi*cutoff/srate);
  // coeff = g/(1+g);
  
  omega = $pi * cutoff/srate;
  sin_omega = sin(omega);
  coeff = sin_omega / (sin_omega + cos(omega));
);

function init_reverb(buffer_position)
global(srate)
local(buffer_size)
instance(diffuser1, diffuser2, diffuser3, diffuser4,
         lfo_diffuser_left, lfo_diffuser_right
         decay_diffuser_left, decay_diffuser_right,
         delay_left_1, delay_right_1,
         delay_left_2, delay_right_2,
         delay_right_2_offset, delay_left_2_offset, 
         delay_left_1_offset, delay_right_1_offset, 
         delay_left_2_offset, delay_right_2_offset,
         srate_scaling,
         out_delay1_left, out_delay2_left, out_delay3_left, out_delay4_left, out_delay5_left, out_delay6_left, out_delay7_left,
         out_delay1_right, out_delay2_right, out_delay3_right, out_delay4_right, out_delay5_right, out_delay6_right, out_delay7_right)
(
  // Datorro Reverb (1997)
  buffer_size = 8192;
  srate_scaling = srate / 29761;
  
  buffer_position = diffuser1.init_allpass(buffer_position, buffer_size);
  diffuser1.offset = 142 * srate_scaling;
  buffer_position = diffuser2.init_allpass(buffer_position, buffer_size);
  diffuser2.offset = 107 * srate_scaling;
  buffer_position = diffuser3.init_allpass(buffer_position, buffer_size);
  diffuser3.offset = 379 * srate_scaling;
  buffer_position = diffuser4.init_allpass(buffer_position, buffer_size);
  diffuser4.offset = 277 * srate_scaling;
  
  buffer_position = lfo_diffuser_left.init_allpass(buffer_position, buffer_size);
  lfo_diffuser_left.offset = 672 * srate_scaling;
  buffer_position = lfo_diffuser_right.init_allpass(buffer_position, buffer_size);
  lfo_diffuser_right.offset = 908 * srate_scaling;
  
  buffer_position = decay_diffuser_left.init_allpass(buffer_position, buffer_size);
  decay_diffuser_left.offset = 1800 * srate_scaling;
  buffer_position = decay_diffuser_right.init_allpass(buffer_position, buffer_size);
  decay_diffuser_right.offset = 2656 * srate_scaling;
  
  buffer_position = delay_left_1.init_allpass(buffer_position, buffer_size);
  buffer_position = delay_right_1.init_allpass(buffer_position, buffer_size);
  buffer_position = delay_left_2.init_allpass(buffer_position, buffer_size);
  buffer_position = delay_right_2.init_allpass(buffer_position, buffer_size);
  
  delay_right_2_offset = 3163 * srate_scaling;
  delay_left_2_offset = 3720 * srate_scaling;
  delay_left_1_offset = 4453 * srate_scaling;
  delay_right_1_offset = 4217 * srate_scaling;
  
  out_delay1_left = 266 * srate_scaling;
  out_delay2_left = 2974 * srate_scaling;
  out_delay3_left = 1913 * srate_scaling;
  out_delay4_left = 1996 * srate_scaling;
  out_delay5_left = 1990 * srate_scaling;
  out_delay6_left = 187 * srate_scaling;
  out_delay7_left = 1066 * srate_scaling;
  
  out_delay1_right = 353 * srate_scaling;
  out_delay2_right = 3627 * srate_scaling;
  out_delay3_right = 1228 * srate_scaling;
  out_delay4_right = 2673 * srate_scaling;
  out_delay5_right = 2111 * srate_scaling;
  out_delay6_right = 335 * srate_scaling;
  out_delay7_right = 121 * srate_scaling;  
  
  buffer_position
);

function update_reverb_settings(diffusion, decay, depth, freq, lowpass, highpass)
instance(diffuser1, diffuser2, diffuser3, diffuser4,
         lfo_diffuser_left, lfo_diffuser_right,
         decay_diffuser_left, decay_diffuser_right, fb,
         mod_depth, mod_rate,
         lp1, hp1, lp2, hp2,
         
         delay_left_1_offset, delay_left_2_offset, 
         delay_right_1_offset, delay_right_2_offset,
         srate_scaling,
         mod_p
         )
local()
global(srate, sample_clock, rs)
(
  diffuser1.gain = - 0.98684211 * diffusion; /* Decorrelate input signal */
  diffuser2.gain = - 0.98684211 * diffusion; /* Decorrelate input signal */
  diffuser3.gain = - 0.82236842 * diffusion; /* Decorrelate input signal */
  diffuser4.gain = - 0.82236842 * diffusion; /* Decorrelate input signal */
  lfo_diffuser_left.gain = 0.92105263 * diffusion;  /* Tail density */
  lfo_diffuser_right.gain = 0.92105263 * diffusion;  /* Tail density */
  decay_diffuser_left.gain = - 0.65789474 * diffusion;  /* Decorrelate tank signal */
  decay_diffuser_right.gain = - 0.65789474 * diffusion;  /* Decorrelate tank signal */
  fb = decay;
  mod_depth = 128 * depth;
  mod_rate = 2 * $pi * freq / srate;
  
  lp1.init_tpt_monopole(0.5 * srate * exp( (1.0 - lowpass) * log(20/22050) ));
  lp2.coeff = lp1.coeff;
  hp1.init_tpt_monopole(0.5 * srate * exp( (1.0 - highpass) * log(20/22050) ));
  hp2.coeff = hp1.coeff;
);

function tanh(x)
local()
global()
instance()
(
  (2/(1+exp(-2*x)) - 1)
);

function eval_reverb(l, r)
instance(diffuser1, diffuser2, diffuser3, diffuser4,
         lfo_diffuser_left, lfo_diffuser_right,
         decay_diffuser_left, decay_diffuser_right,
         delay_left_1, delay_right_1,
         delay_left_2, delay_right_2,
         delay_right_2_offset, delay_left_2_offset, 
         delay_left_1_offset, delay_right_1_offset, 
         delay_left_2_offset, delay_right_2_offset,
         fb, out_left, out_right, srate_scaling,
         out_delay1_left, out_delay2_left, out_delay3_left, out_delay4_left, out_delay5_left, out_delay6_left, out_delay7_left
         out_delay1_right, out_delay2_right, out_delay3_right, out_delay4_right, out_delay5_right, out_delay6_right, out_delay7_right,
         mod_rate, mod_depth, mod_p,
         lp1, lp2, hp1, hp2)
local(in, diffused, left_tank, right_tank, l_delay, r_delay, accumulator, rs)
global(sample_clock)
(
  in = 0.5 * (l + r);
  
  diffused = 
    diffuser4.eval_allpass(
      diffuser3.eval_allpass(
        diffuser2.eval_allpass(
          diffuser1.eval_allpass(
            in
          )
        )
      )
    );
  
  left_tank = right_tank = diffused;
  
  // Flipped on purpose!
  left_tank += fb * delay_right_2.readBuffer_fixed(delay_right_2_offset);
  right_tank += fb * delay_left_2.readBuffer_fixed(delay_left_2_offset);
  
  mod_p += mod_rate;
  lfo_diffuser_left.offset = (672 + mod_depth * sin(mod_p)) * srate_scaling;
  lfo_diffuser_right.offset = (908 + mod_depth * sin(mod_p)) * srate_scaling;

  delay_left_1.writeBuffer(lfo_diffuser_left.eval_allpass(left_tank));
  delay_right_1.writeBuffer(lfo_diffuser_right.eval_allpass(right_tank));
  
  // Damping here
  l_delay = lp1.eval_tpt_monopole(delay_left_1.readBuffer_fixed(delay_left_1_offset));
  r_delay = lp2.eval_tpt_monopole(delay_right_1.readBuffer_fixed(delay_right_1_offset)) ;
  
  l_delay = decay_diffuser_left.eval_allpass(l_delay);
  r_delay = decay_diffuser_right.eval_allpass(r_delay);
  
  delay_left_2.writeBuffer(l_delay);
  delay_right_2.writeBuffer(r_delay);
  
  l_delay = delay_left_2.readBuffer_fixed(delay_left_2_offset);
  r_delay = delay_right_2.readBuffer_fixed(delay_right_2_offset);
  
  // Left output
  accumulator = 0.6 * delay_right_1.readBuffer_fixed(out_delay1_left);
  accumulator += 0.6 * delay_right_1.readBuffer_fixed(out_delay2_left);
  accumulator -= 0.6 * decay_diffuser_right.readBuffer_fixed(out_delay3_left);
  accumulator += 0.6 * delay_right_2.readBuffer_fixed(out_delay4_left);
  accumulator -= 0.6 * delay_left_1.readBuffer_fixed(out_delay5_left);
  accumulator -= 0.6 * decay_diffuser_left.readBuffer_fixed(out_delay6_left);
  out_left = accumulator - 0.6 * delay_left_2.readBuffer_fixed(out_delay7_left);

  accumulator = 0.6 * delay_left_1.readBuffer_fixed(out_delay1_right);
  accumulator += 0.6 * delay_left_1.readBuffer_fixed(out_delay2_right);
  accumulator -= 0.6 * decay_diffuser_left.readBuffer_fixed(out_delay3_right);
  accumulator += 0.6 * delay_left_2.readBuffer_fixed(out_delay4_right);
  accumulator -= 0.6 * delay_right_1.readBuffer_fixed(out_delay5_right);
  accumulator -= 0.6 * decay_diffuser_right.readBuffer_fixed(out_delay6_right);
  out_right = accumulator - 0.6 * delay_right_2.readBuffer_fixed(out_delay7_right);
  
  out_left = out_left - hp1.eval_tpt_monopole(out_left);
  out_right = out_right - hp2.eval_tpt_monopole(out_right);
);


function init_worp(freemem)
global(srate)
local(buffer_size)
instance(allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10, 
         diffuser1, diffuser2, diffuser3, diffuser4,
         srate_scaling)
(
  buffer_size = 8192 * 8;
  freemem = allpass1.init_allpass(freemem, buffer_size);
  freemem = allpass2.init_allpass(freemem, buffer_size);
  freemem = allpass3.init_allpass(freemem, buffer_size);
  freemem = allpass4.init_allpass(freemem, buffer_size);
  freemem = allpass5.init_allpass(freemem, buffer_size);
  freemem = allpass6.init_allpass(freemem, buffer_size);
  freemem = allpass7.init_allpass(freemem, buffer_size);
  freemem = allpass8.init_allpass(freemem, buffer_size);
  freemem = allpass9.init_allpass(freemem, buffer_size);
  freemem = allpass10.init_allpass(freemem, buffer_size);
  
  buffer_size = 8192;
  srate_scaling = srate / 29761;
  freemem = diffuser1.init_allpass(freemem, buffer_size);
  diffuser1.offset = 142 * srate_scaling;
  freemem = diffuser2.init_allpass(freemem, buffer_size);
  diffuser2.offset = 107 * srate_scaling;
  freemem = diffuser3.init_allpass(freemem, buffer_size);
  diffuser3.offset = 379 * srate_scaling;
  freemem = diffuser4.init_allpass(freemem, buffer_size);
  diffuser4.offset = 277 * srate_scaling;  
  
  freemem
);

function reset_worp()
instance(allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10,
         diffuser1, diffuser2, diffuser3, diffuser4,
         lp1, hp1, lp2, hp2,
         u8, out_left, out_right,
)
local()
global()
(
  lp1.s = lp2.s = hp1.s = hp2.s = 0;
  u8 = out_left = out_right = 0;
  allpass1.reset_allpass();
  allpass2.reset_allpass();
  allpass3.reset_allpass();
  allpass4.reset_allpass();
  allpass5.reset_allpass();
  allpass6.reset_allpass();
  allpass7.reset_allpass();
  allpass8.reset_allpass();
  allpass9.reset_allpass();
  allpass10.reset_allpass();
  diffuser1.reset_allpass();
  diffuser2.reset_allpass();
  diffuser3.reset_allpass();
  diffuser4.reset_allpass();
);

//diffusion, decay, depth, freq, lowpass, highpass
function worp_update_settings(diffusion, decay, depth, freq, lowpass, highpass)
  instance(
    allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10,
    diffuser1, diffuser2, diffuser3, diffuser4,
    reso, K, gain,
    lp1, hp1, lp2, hp2,
    srate_scaling,
    mod_depth, mod_rate,
  )
  local()
  global(srate)
  (
    K = .942 * decay;
    gain = 1 / (1 + 2 * decay);
  
    srate_scaling = srate / 48000;
    mod_depth = 128 * depth;
    mod_rate = 2 * $pi * freq / srate;

    allpass1.offset = (200 + 4600 * diffusion) * srate_scaling;
    allpass2.offset = (360 + 8458 * diffusion) * srate_scaling;
    allpass3.offset = (140 + 12412 * diffusion) * srate_scaling;
    allpass4.offset = (380 + 17620 * diffusion) * srate_scaling;
    allpass5.offset = (230 + 6026 * diffusion) * srate_scaling;
    allpass6.offset = (490 + 10460 * diffusion) * srate_scaling;
    allpass7.offset = (140 + 14332 * diffusion) * srate_scaling;
    allpass8.offset = (2250 + 18020 * diffusion) * srate_scaling;
    allpass9.offset = allpass7.offset;
    allpass9.gain = 0.85;
    allpass10.offset = allpass8.offset;
    allpass10.gain = 0.85;
    
    diffuser1.gain = - 0.98684211 * diffusion; /* Decorrelate input signal */
    diffuser2.gain = - 0.98684211 * diffusion; /* Decorrelate input signal */
    diffuser3.gain = - 0.82236842 * diffusion; /* Decorrelate input signal */
    diffuser4.gain = - 0.82236842 * diffusion; /* Decorrelate input signal */
    
    lp1.init_tpt_monopole(0.5 * srate * exp( (1.0 - lowpass) * log(20/22050) ));
    lp2.coeff = lp1.coeff;
    hp1.init_tpt_monopole(0.5 * srate * exp( (1.0 - highpass) * log(20/22050) ));
    hp2.coeff = hp1.coeff;
  );
  
function eval_worp(l, r)
  instance(allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10,
           u8, K, gain,
           lp1, hp1, lp2, hp2,
           out_left, out_right,
           mod_depth, mod_rate, mod_p, srate_scaling,
           diffuser1, diffuser2, diffuser3, diffuser4)
  local(sample, u2, u4, u6, u1, u3, u5, u7, u9, u10)
  global()
  (
    sample = 0.5 * (l + r);
    
    u1  = allpass1.eval_allpass_50(sample + u8*K);
    u2  = allpass2.eval_allpass_50(u1);
    
    u3  = allpass3.eval_allpass_50(sample + u2*K);
    u4  = allpass4.eval_allpass_50(u3);

    u5  = allpass5.eval_allpass_50(lp1.eval_tpt_monopole(sample + u4*K));
    u6  = allpass6.eval_allpass_50(u5);
    
    u7  = allpass7.eval_allpass_50(lp2.eval_tpt_monopole(sample + u6*K));
    u8  = allpass8.eval_allpass_50(u7);
   
    mod_p += mod_rate;
    allpass9.offset = (allpass7.offset - 10 * mod_depth * sin(mod_p)) * srate_scaling;
    allpass10.offset = (allpass8.offset - 10 * mod_depth * sin(mod_p)) * srate_scaling;
    
    u9  = allpass9.eval_allpass(u7+u8);
    u10 = allpass10.eval_allpass(u2+u7);
   
    out_left = (u1 + u3 + u5 + u7 + u9) * gain;
    out_right = (u2 + u4 + u6 + u8 + u10) * gain;
    
    out_left = 1.5 * (out_left - hp1.eval_tpt_monopole(out_left));
    out_right = 1.5 * (out_right - hp2.eval_tpt_monopole(out_right));
  );
  
  
function eval_worp_eth(l, r)
  instance(allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10,
           u8, K, gain,
           lp1, hp1, lp2, hp2,
           out_left, out_right,
           mod_depth, mod_rate, mod_p, srate_scaling,
           diffuser1, diffuser2, diffuser3, diffuser4)
  local(sample, u2, u4, u6, u1, u3, u5, u7, u9, u10)
  global()
  (
    sample = 0.5 * (l + r);
    
    u1  = allpass1.eval_allpass_50(sample + 0.6 * u4*K - 0.25 * u8*K - 0.15 * out_right * K);
    u2  = allpass2.eval_allpass_50(u1);

    u2 = diffuser2.eval_allpass(diffuser1.eval_allpass(u2));
   
    u3  = allpass3.eval_allpass_50(lp1.eval_tpt_monopole(sample + u2*K));
    u4  = allpass4.eval_allpass_50(u3);

    u5  = allpass5.eval_allpass_50(sample + 0.6 * u8*K - 0.25 * u4*K - 0.15 * out_left * K);
    u6  = allpass6.eval_allpass_50(u5);

    u6 = diffuser4.eval_allpass(diffuser3.eval_allpass(u6));
    
    u7  = allpass7.eval_allpass_50(lp2.eval_tpt_monopole(sample + u6*K));
    u8  = allpass8.eval_allpass_50(u7);
    
    mod_p += mod_rate;
    allpass9.offset = (allpass7.offset - 10 * mod_depth * sin(mod_p)) * srate_scaling;
    allpass10.offset = (allpass8.offset - 10 * mod_depth * sin(mod_p)) * srate_scaling;
    
    u9  = allpass9.eval_allpass(u7+u8);
    u10 = allpass10.eval_allpass(u3+u4);
   
    out_left = (u1 + u3 - u5 - u7 + u9) * gain;
    out_right = (u2 + u4 + u6 + u8 + u10) * gain;
    
    out_left = 2.5 * (out_left - hp1.eval_tpt_monopole(out_left));
    out_right = 2.5 * (out_right - hp2.eval_tpt_monopole(out_right));
  );  


function eval_thin(l, r)
  instance(allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10,
           u8, K, gain,
           lp1, hp1, lp2, hp2,
           out_left, out_right,
           mod_p,
           mod_depth, mod_rate, diff, srate_scaling)
  local(sample, u2, u4, u6, u1, u3, u5, u7, u9, u10, mid)
  global()
  (
    sample = 0.5 * (l + r);
    
    mod_p += mod_rate;
    allpass9.offset = (allpass7.offset - 10 * mod_depth * sin(mod_p)) * srate_scaling;
    allpass10.offset = (allpass8.offset - 10 * mod_depth * sin(mod_p)) * srate_scaling;
    
    u1  = allpass1.eval_allpass_50(sample - u2*K);
    u2  = allpass2.eval_allpass_50(u1);
    
    u3  = allpass3.eval_allpass_50(sample - u4*K);
    u4  = allpass4.eval_allpass_50(u3);

    u5  = allpass5.eval_allpass_50(lp1.eval_tpt_monopole(sample - u6*K));
    u6  = allpass6.eval_allpass_50(u5);
    
    u7  = allpass7.eval_allpass_50(lp2.eval_tpt_monopole(sample - u8*K));
    u8  = allpass8.eval_allpass_50(u7);
    
    u9  = allpass9.eval_allpass(u7 + u8);
    u10 = allpass10.eval_allpass(u2 + u7);
   
    out_left = (u1 + u3 + u5 + u7 + u9) * gain;
    out_right = (u2 + u4 + u6 + u8 + u10) * gain;
    
    out_left = 2.2 * (out_left - hp1.eval_tpt_monopole(out_left));
    out_right = 2.2 * (out_right - hp2.eval_tpt_monopole(out_right)) ;
  );


function worp_metallic_settings(diffusion, decay, depth, freq, lowpass, highpass)
  instance(
    allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10,
    diffuser1, diffuser2, diffuser3, diffuser4,
    reso, K, gain,
    lp1, hp1, lp2, hp2,
  )
  local()
  global(srate)
  (
    K = .942 * decay;
    gain = 1 / (1 + 2 * decay);
  
    allpass1.offset = 5 + 137 * diffusion;
    allpass2.offset = 7 + 131 * diffusion;
    allpass3.offset = 13 + 27 * diffusion;
    allpass4.offset = 11 + 59 * diffusion;
    allpass5.offset = 25 + 12 * diffusion;
    allpass6.offset = 26 + 13 * diffusion;
    allpass7.offset = 27 + 14 * diffusion;
    allpass8.offset = 28 + 15 * diffusion;
    allpass9.offset = 1126;
    allpass9.gain = 0.85;
    allpass10.offset = 1262;
    allpass10.gain = 0.85;
    
    diffuser1.gain = - 0.98684211 * diffusion; /* Decorrelate input signal */
    diffuser2.gain = - 0.98684211 * diffusion; /* Decorrelate input signal */
    diffuser3.gain = - 0.82236842 * diffusion; /* Decorrelate input signal */
    diffuser4.gain = - 0.82236842 * diffusion; /* Decorrelate input signal */
    
    lp1.init_tpt_monopole(0.5 * srate * exp( (1.0 - lowpass) * log(20/22050) ));
    lp2.coeff = lp1.coeff;
    hp1.init_tpt_monopole(0.5 * srate * exp( (1.0 - highpass) * log(20/22050) ));
    hp2.coeff = hp1.coeff;
  );
  
  
function eval_metallic(l, r)
  instance(allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10,
           diffuser1, diffuser2, diffuser3, diffuser4,
           u8, K, gain,
           lp1, hp1, lp2, hp2,
           out_left, out_right)
  local(sample, u2, u4, u6, u1, u3, u5, u7, u9, u10)
  global()
  (
    sample = 0.5 * (l + r);
    
    sample = sample + 0.25 *  
      diffuser4.eval_allpass(
        diffuser3.eval_allpass(
          diffuser2.eval_allpass(
            diffuser1.eval_allpass(
              sample
            )
          )
        )
      );
    
    u1  = allpass1.eval_allpass_cst(sample + u8 * K, -0.99);
    u2  = allpass2.eval_allpass_cst(u1, -0.99);
    
    u3  = allpass3.eval_allpass_50(u2);
    u4  = allpass4.eval_allpass_50(u3);

    u5  = allpass5.eval_allpass_50(lp1.eval_tpt_monopole(u4));
    u6  = allpass6.eval_allpass_50(u5);
    
    u7  = allpass7.eval_allpass_50(lp2.eval_tpt_monopole(u6));
    u8  = allpass8.eval_allpass_50(u7);
    
    u9  = allpass9.eval_allpass(u7);
    u10 = allpass10.eval_allpass(u8);
   
    out_left = (- u2) * gain;
    out_right = (u9 - u1) * gain;
    
    out_left = 4 * (out_left - hp1.eval_tpt_monopole(out_left));
    out_right = 4 * (out_right - hp2.eval_tpt_monopole(out_right));
  );

