desc:Splash Verb (WIP)

slider1:time_ms=5<5,800,1>time_ms
slider2:seed=0<0,12311323,1>seed
slider3:mode=0<0,1,1>mode
slider4:shimmer=0<0,1,0.00001>shimmer
slider5:shifter_down=0<0,1,0.00001>down
slider6:freq_shift_amount=0<0,1,0.00001>f amount
slider7:freq_shift=0<10,440,0.00001>f shift
slider8:grain_mix=0<0, 2, 0.01>Grain mix
slider9:verb_mix=0<0, 1, 0.01>Verb mix
slider30:grain_algorithm=0<0,1,1>Grain algorithm

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import saike_splash_hadamard_diffusers.jsfx-inc
import saike_splash_pitchlib.jsfx-inc
import saike_splash_freq.jsfx-inc
import saike_splash_grainlib.jsfx-inc

options:maxmem=220000000

@init
function update_sample_position(time_ms, seed, mode)
(
  (mode == 0) ? (
    verb.in.in.in.set_sample_position_8(0.25 * time_ms / 1000, seed);
    verb.in.in.set_sample_position_8(0.5 * time_ms / 1000, seed + seed);
    verb.in.set_sample_position_8(0.75 * time_ms / 1000, seed + seed + seed);
    verb.set_sample_position_8(time_ms / 1000, seed + seed + seed + seed);
  ) : (
    verb.in.in.in.set_sample_position(0.25 * time_ms / 1000, seed);
    verb.in.in.set_sample_position(0.5 * time_ms / 1000, seed + seed);
    verb.in.set_sample_position(0.75 * time_ms / 1000, seed + seed + seed);
    verb.set_sample_position(time_ms / 1000, seed + seed + seed + seed);
  );
);

function sample_verb(mode)
(
  (mode == 0) ? (
    verb.in.in.in.hsample8();
    verb.in.in.hsample8();
    verb.in.hsample8();
    verb.hsample8();
  ) : (
    verb.in.in.in.hsample();
    verb.in.in.hsample();
    verb.in.hsample();
    verb.hsample();
  );
);

function alloc_shifter(freemem, pitch_block_size)
instance(fftmem1, fftmem2, pitch_shift_buffer)
local()
global()
(
  freemem = (fftmem1 = freemem) + pitch_block_size;
  freemem = (fftmem2 = freemem) + pitch_block_size;
  freemem = (pitch_shift_buffer = freemem) + pitch_block_size;
  freemem
);

function update_shifter()
global()
local(shifter_buffer_size, transition_region)
instance(pitch_shift_buffer, fftmem1, fftmem2)
(
  transition_region = 4096; //1024?
  shifter_buffer_size = 4 * transition_region;
  this.pitchShifter(1, pitch_shift_buffer, shifter_buffer_size, fftmem1, fftmem2, transition_region, 1);
);

//function 

freemem = 0;
verb.in.in.in.in.tip = 1;
freemem = verb.in.in.in.init_decorrelator(freemem, 32768);
freemem = verb.in.in.init_decorrelator(freemem, 2*32768);
freemem = verb.in.init_decorrelator(freemem, 4*32768);
freemem = verb.init_decorrelator(freemem, 8*32768);

pitch_block_size = 4*4096; /* We have 64 blocks of this */
freemem = shifter_shimmer.alloc_shifter(freemem, pitch_block_size);
freemem = shifter_down.alloc_shifter(freemem, pitch_block_size);

freemem = granulator.granulator_set_buffer_limits(freemem, 65536 * 4);

current_time = time_ms;
update_sample_position(current_time, seed, mode);
shifter_shimmer.update_shifter();
shifter_down.update_shifter();

semitones = 12;
shifter_shimmer.setPitchShifterSpeed(2*((2^(semitones/12))-1.0));

semitones = -12;
shifter_down.setPitchShifterSpeed(2*((2^(semitones/12))-1.0));

@slider

@block
freq_shifter.init_cheapest_freq_shifter(freq_shift);

beat_pos = beat_position;
dbeat = (tempo / 60) / srate;  // Beats per sample
samples_per_beat = 1.0 / dbeat;

@sample
cs += 1;

current_time = 0.99905 * current_time + 0.0005 * time_ms;
((current_time != last_time) || (current_seed != seed) || (current_mode != mode)) ? (
  (current_mode != mode) ? (
    verb.in.in.in.silence();
    verb.in.in.silence();
    verb.in.silence();
    verb.silence();
  );

  update_sample_position(current_time, seed, mode);
  last_time = current_time;
  current_seed = seed;
  current_mode = mode;
);

fb = 0.99;

semitones = 12 + 0.1 * sin(40 * cs / srate);
shifter_shimmer.setPitchShifterSpeed(2*((2^(semitones/12))-1.0));

in_gain = min(1.0, max(0.99999 * in_gain, 8 * max(spl0, spl1))); // TODO: Make srate dependent

granulator.granulator_in(spl0, spl1);

(grain_algorithm == 0) ? (
  beat_frac = beat_pos - floor(beat_pos);
  fire_grain = beat_frac < last_beat_frac;
  diff = beat_frac - last_beat_frac;
  last_beat_frac = beat_frac;
  beat_pos += dbeat;
  grain_samples = samples_per_beat;
  speed = 1 + floor(rand() * 2);
  pan_spread = 1;
  reverse_probability = 0.5;
) : (
  fire_grain = rand() < (1 / srate);
  grain_samples = 10000;
  speed = 1 + floor(rand() * 2);
  pan_spread = 1;
  reverse_probability = 1;
);

playing = 1;
grain_mix ? granulator.granulator_update(fire_grain, grain_samples, speed, pan_spread, reverse_probability, playing);

grain_mix > 1 ? (
  gmx = grain_mix - 1.0;
  spl0 = spl0 * (1.0 - gmx) + gmx * granulator.l;
  spl1 = spl1 * (1.0 - gmx) + gmx * granulator.r;
) : (
  spl0 += grain_mix * granulator.l;
  spl1 += grain_mix * granulator.r;
);

verb_mix ? (
  verb.in.in.in.in.s0 = spl0;
  verb.in.in.in.in.s1 = spl1;
  verb.in.in.in.in.s6 = fb1;
  verb.in.in.in.in.s7 = fb0;
  verb.in.in.in.in.s2 = in_gain * shimmer * shifter_shimmer.outL;
  verb.in.in.in.in.s3 = in_gain * shimmer * shifter_shimmer.outR;
  verb.in.in.in.in.s4 = in_gain * freq_shift_amount * freq_shifter.outL;
  verb.in.in.in.in.s5 = in_gain * freq_shift_amount * freq_shifter.outR;
  overall_scaling_factor = verb.in.in.in.scaling_factor * verb.in.in.scaling_factor * verb.in.scaling_factor * verb.scaling_factor;
  
  sample_verb(mode);
  out_left = verb.s0 * overall_scaling_factor;
  out_right = verb.s1 * overall_scaling_factor;
) : (
  out_left = 0;
  out_right = 0;
);

spl0 = spl0 * (1.0 - verb_mix) + verb_mix * out_left;
spl1 = spl1 * (1.0 - verb_mix) + verb_mix * out_right;

shimmer ? shifter_shimmer.pitchShifterUpdate(spl0, spl1);
//shimmer ? shifter_shimmer.pitchShifterUpdate(verb.in.in.in.scaling_factor * verb.in.in.in.s5, verb.in.in.in.scaling_factor * verb.in.in.in.s6);
shifter_down ? shifter_down.pitchShifterUpdate(spl0, spl1);

freq_shift_amount ? freq_shifter.eval_cheapest_freq_shifter(spl0, spl1);

fb0 = fb * spl0;
fb1 = fb * spl1;

spl0 += shifter_down * shifter_down.outL - 0.03 * shimmer * shifter_shimmer.outL;
spl1 += shifter_down * shifter_down.outL - 0.03 * shimmer * shifter_shimmer.outR;

@gfx
!loaded ? (
  loaded = gfx_loadimg(5, "./Splash_Dependencies/camp_0.png");
  loaded = gfx_loadimg(6, "./Splash_Dependencies/camp_1.png");
  loaded = gfx_loadimg(7, "./Splash_Dependencies/camp_2.png");
  loaded = gfx_loadimg(8, "./Splash_Dependencies/camp_3.png");
  loaded = gfx_loadimg(9, "./Splash_Dependencies/camp_4.png");
  loaded = gfx_loadimg(10, "./Splash_Dependencies/camp_5.png");
);

blit_scale = floor(max(gfx_h / 147, gfx_w / 256)); //3.2 * (1 + scaling);

x_offset = (gfx_w - blit_scale * 256) * 0.5;
y_offset = (gfx_h - blit_scale * 147) * 0.5;

gfx_x = x_offset; gfx_y = y_offset;

/* Background color */
gfx_mode = 4;
gfx_a = 0.7;
gfx_blit(5, blit_scale, 0);

/* bloop */
gfx_mode = 5;
gfx_a = 0.76;
gfx_blit(6, blit_scale, 0);


function lightning()
instance(lightState)
global()
local(lightProb)
(
  rand() > lightProb ? (
    lightState = 1-lightState;
  );
  lightState ? (
    lightProb = lightProb + .1;
    lightProb > .99 ? lightProb = .99;
  ) : (
    lightProb = .5;
  );
  (1.0 - lightState) * rand() * rand();
);

gfx_r = 0; gfx_b = 1; gfx_g = 0;

gfx_a = 0.3;
gfx_blit(6, blit_scale, 0);
gfx_a = lightning1.lightning();
gfx_blit(8, blit_scale, 0);
gfx_a = lightning2.lightning();
gfx_blit(9, blit_scale, 0);
gfx_a = lightning3.lightning();
gfx_blit(10, blit_scale, 0);

light1 = 0.7 * light1 + 0.1 * rand();
gfx_r = gfx_g = gfx_b = gfx_a = 1 + light1;
gfx_blit(7, blit_scale, 0);

gfx_x = x_offset + 5; gfx_y = y_offset + 5;
gfx_printf("VERB");

function draw_eyes(x, y, inc, spacing, alpha)
local()
global(x_offset, y_offset, blit_scale)
instance(timer)
(
  timer += inc;
  (timer > 1.0) ? timer = 0;
  (timer > 0.1) ? (
    gfx_set(0.574, 0.429, 0.503, alpha);
    gfx_rect(x_offset + x * blit_scale, y_offset + y * blit_scale, blit_scale, blit_scale);
    gfx_rect(x_offset + (x + spacing) * blit_scale, y_offset + y * blit_scale, blit_scale, blit_scale);
  );
);

eyes1.draw_eyes(60, 115, 0.003, 4, 0.8);
eyes2.draw_eyes(95, 95, 0.0024, 3, 0.8);
eyes3.draw_eyes(193, 109, 0.0013, 5, 0.8);
eyes3.draw_eyes(192, 109, 0.0013, 5, 1.0);

function draw_mosquito(x, y, diff)
local()
global(x_offset, y_offset, blit_scale)
instance(xc, yc)
(
  xc == 0 ? xc = x;
  yc == 0 ? yc = y;
  xc += diff * (rand() - 0.5) + 0.01 * (x - xc);
  yc += diff * (rand() - 0.5) + 0.01 * (y - yc);
  x = floor(xc);
  y = floor(yc);
  gfx_rect(x_offset + x * blit_scale, y_offset + y * blit_scale, blit_scale, blit_scale);
);

gfx_set(0, 0, 0, 1.0);
mosquito1.draw_mosquito(140, 110, 1.0);
mosquito2.draw_mosquito(140, 110, 1.0);
mosquito3.draw_mosquito(140, 110, 1.0);

mosquito4.draw_mosquito(120, 40, 1.0);
mosquito5.draw_mosquito(110, 70, 1.0);
mosquito6.draw_mosquito(120, 90, 1.0);

mosquito7.draw_mosquito(140, 70, 1.0);
mosquito8.draw_mosquito(140, 70, 1.0);

mosquito9.draw_mosquito(200, 70, 1.0);

gfx_set(1, 1, 0.9, 1.0);
firefly1.draw_mosquito(90, 117, 1.0);
firefly2.draw_mosquito(90, 117, 1.0);

granulator_error ? (
  gfx_x = 0;
  gfx_y = 0;
  gfx_printf("FATAL: REQUESTED TOO MANY SAMPLES");
);

