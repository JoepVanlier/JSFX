@init
function init_decorrelator(mem, buffer_size)
instance(ptr, buffer, len, buffer_end)
global()
local()
(
  buffer = mem;
  len = buffer_size * 16;
  (ptr < buffer) ? ptr = buffer;
  buffer_end = buffer + len
);

function seed_random(seed)
global()
local()
instance(a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15)
(
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_0 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_1 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_2 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_3 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_4 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_5 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_6 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_7 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_8 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_9 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_10 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_11 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_12 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_13 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_14 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_15 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
);

function set_sample_position(duration, seed, smooth)
global(srate)
local(td, interval, im1, ip1)
instance(scaling_factor, max_loc,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7, loc8, loc9, loc10, loc11, loc12, loc13, loc14, loc15
  a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15
)
(
  this.seed_random(seed);
  interval = (1 + 15 * smooth) * floor(duration * srate / 16);
  im1 = 16 * interval - 1;
  td = -1;
  loc0 = td - 16 * floor((interval - 1) * a_0);
  td -= im1;
  loc1 = td - 16 * floor((interval - 1) * a_1);
  td -= im1;
  loc2 = td - 16 * floor((interval - 1) * a_2);
  td -= im1;
  loc3 = td - 16 * floor((interval - 1) * a_3);
  td -= im1;
  loc4 = td - 16 * floor((interval - 1) * a_4);
  td -= im1;
  loc5 = td - 16 * floor((interval - 1) * a_5);
  td -= im1;
  loc6 = td - 16 * floor((interval - 1) * a_6);
  td -= im1;
  loc7 = td - 16 * floor((interval - 1) * a_7);
  td -= im1;
  loc8 = td - 16 * floor((interval - 1) * a_8);
  td -= im1;
  loc9 = td - 16 * floor((interval - 1) * a_9);
  td -= im1;
  loc10 = td - 16 * floor((interval - 1) * a_10);
  td -= im1;
  loc11 = td - 16 * floor((interval - 1) * a_11);
  td -= im1;
  loc12 = td - 16 * floor((interval - 1) * a_12);
  td -= im1;
  loc13 = td - 16 * floor((interval - 1) * a_13);
  td -= im1;
  loc14 = td - 16 * floor((interval - 1) * a_14);
  td -= im1;
  loc15 = td - 16 * floor((interval - 1) * a_15);
  td -= im1;

  max_loc = min(loc0, min(loc1, min(loc2, min(loc3, min(loc4, min(loc5, min(loc6, min(loc7, min(loc8, min(loc9, min(loc10, min(loc11, min(loc12, min(loc13, min(loc14, loc15)))))))))))))));

  scaling_factor = 0.25;
);

function set_sample_position_8(duration, seed, smooth)
global(srate)
local(td, interval, im1, ip1)
instance(scaling_factor, max_loc,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7
  a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8,
)
(
  this.seed_random(seed);
  interval = (1 + 7 * smooth) * floor(duration * srate / 8);
  im1 = 8 * interval - 1;
  td = -1;
  loc0 = td - 8 * floor((interval - 1) * a_0);
  td -= im1;
  loc1 = td - 8 * floor((interval - 1) * a_1);
  td -= im1;
  loc2 = td - 8 * floor((interval - 1) * a_2);
  td -= im1;
  loc3 = td - 8 * floor((interval - 1) * a_3);
  td -= im1;
  loc4 = td - 8 * floor((interval - 1) * a_4);
  td -= im1;
  loc5 = td - 8 * floor((interval - 1) * a_5);
  td -= im1;
  loc6 = td - 8 * floor((interval - 1) * a_6);
  td -= im1;
  loc7 = td - 8 * floor((interval - 1) * a_7);
  td -= im1;

  max_loc = min(loc0, min(loc1, min(loc2, min(loc3, min(loc4, min(loc5, min(loc6, loc7)))))));

  scaling_factor = 0.3535533905932738;
);

function set_sample_position_8_exp(duration, seed, smooth)
global(srate)
local(td, interval, im1, ip1, scale)
instance(scaling_factor, max_loc,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7
  a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8,
)
(
  this.seed_random(seed);
  scale = 0.5;
  td = -1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc0 = td - 8 * floor((interval - 1) * a_0);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc1 = td - 8 * floor((interval - 1) * a_1);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc2 = td - 8 * floor((interval - 1) * a_2);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc3 = td - 8 * floor((interval - 1) * a_3);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc4 = td - 8 * floor((interval - 1) * a_4);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc5 = td - 8 * floor((interval - 1) * a_5);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc6 = td - 8 * floor((interval - 1) * a_6);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc7 = td - 8 * floor((interval - 1) * a_7);
  td -= im1;

  max_loc = min(loc0, min(loc1, min(loc2, min(loc3, min(loc4, min(loc5, min(loc6, loc7)))))));

  scaling_factor = 0.3535533905932738;
);

function hsample()
global()
local(a, b, rel_idx)
instance(
  in, tip, max_loc,
  ptr, buffer, len, buffer_end,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7, loc8, loc9, loc10, loc11, loc12, loc13, loc14, loc15,
  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15,
)
(
  // Store current sample
  ptr[0] = in.s0; ptr[1] = in.s1; ptr[2] = in.s2; ptr[3] = in.s3; ptr[4] = in.s4; ptr[5] = in.s5; ptr[6] = in.s6; ptr[7] = in.s7; ptr[8] = in.s8; ptr[9] = in.s9; ptr[10] = in.s10; ptr[11] = in.s11; ptr[12] = in.s12; ptr[13] = in.s13; ptr[14] = in.s14; ptr[15] = in.s15;
  ptr += 16;
  ptr = (ptr == buffer_end) ? buffer : ptr;

  // Grab samples of interest
  (ptr + max_loc) > buffer ? (
    // Fast path (most of the time this is fine)
    s0 = ptr[loc0]; s1 = ptr[loc1]; s2 = ptr[loc2]; s3 = ptr[loc3]; s4 = ptr[loc4]; s5 = ptr[loc5]; s6 = ptr[loc6]; s7 = ptr[loc7]; s8 = ptr[loc8]; s9 = ptr[loc9]; s10 = ptr[loc10]; s11 = ptr[loc11]; s12 = ptr[loc12]; s13 = ptr[loc13]; s14 = ptr[loc14]; s15 = ptr[loc15];
  ) : (
    // Slow path
    rel_idx = - (ptr - buffer);
    s0 = ptr[loc0 < rel_idx ? loc0 + len : loc0]; s1 = ptr[loc1 < rel_idx ? loc1 + len : loc1]; s2 = ptr[loc2 < rel_idx ? loc2 + len : loc2]; s3 = ptr[loc3 < rel_idx ? loc3 + len : loc3]; s4 = ptr[loc4 < rel_idx ? loc4 + len : loc4]; s5 = ptr[loc5 < rel_idx ? loc5 + len : loc5]; s6 = ptr[loc6 < rel_idx ? loc6 + len : loc6]; s7 = ptr[loc7 < rel_idx ? loc7 + len : loc7]; s8 = ptr[loc8 < rel_idx ? loc8 + len : loc8]; s9 = ptr[loc9 < rel_idx ? loc9 + len : loc9]; s10 = ptr[loc10 < rel_idx ? loc10 + len : loc10]; s11 = ptr[loc11 < rel_idx ? loc11 + len : loc11]; s12 = ptr[loc12 < rel_idx ? loc12 + len : loc12]; s13 = ptr[loc13 < rel_idx ? loc13 + len : loc13]; s14 = ptr[loc14 < rel_idx ? loc14 + len : loc14]; s15 = ptr[loc15 < rel_idx ? loc15 + len : loc15];
  );
  
  // Mix
  a = s0; s0 = a + s1; s1 = a - s1; a = s2; s2 = a + s3; s3 = a - s3; a = s0; s0 = a + s2; s2 = a - s2; a = s1; s1 = a + s3; s3 = a - s3; a = s4; s4 = a + s5; s5 = a - s5; a = s6; s6 = a + s7; s7 = a - s7; a = s4; s4 = a + s6; s6 = a - s6; a = s5; s5 = a + s7; s7 = a - s7; a = s0; s0 = a + s4; s4 = a - s4; a = s1; s1 = a + s5; s5 = a - s5; a = s2; s2 = a + s6; s6 = a - s6; a = s3; s3 = a + s7; s7 = a - s7; a = s8; s8 = a + s9; s9 = a - s9; a = s10; s10 = a + s11; s11 = a - s11; a = s8; s8 = a + s10; s10 = a - s10; a = s9; s9 = a + s11; s11 = a - s11; a = s12; s12 = a + s13; s13 = a - s13; a = s14; s14 = a + s15; s15 = a - s15; a = s12; s12 = a + s14; s14 = a - s14; a = s13; s13 = a + s15; s15 = a - s15; a = s8; s8 = a + s12; s12 = a - s12; a = s9; s9 = a + s13; s13 = a - s13; a = s10; s10 = a + s14; s14 = a - s14; a = s11; s11 = a + s15; s15 = a - s15; a = s0; s0 = a + s8; s8 = a - s8; a = s1; s1 = a + s9; s9 = a - s9; a = s2; s2 = a + s10; s10 = a - s10; a = s3; s3 = a + s11; s11 = a - s11; a = s4; s4 = a + s12; s12 = a - s12; a = s5; s5 = a + s13; s13 = a - s13; a = s6; s6 = a + s14; s14 = a - s14; a = s7; s7 = a + s15; s15 = a - s15; 
);

function hsample8()
global()
local(a, b, rel_idx)
instance(
  in, max_loc,
  ptr, buffer, len, buffer_end,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7,
  s0, s1, s2, s3, s4, s5, s6, s7,
)
(
  // Store current sample
  ptr[0] = in.s0; ptr[1] = in.s1; ptr[2] = in.s2; ptr[3] = in.s3; ptr[4] = in.s4; ptr[5] = in.s5; ptr[6] = in.s6; ptr[7] = in.s7;
  ptr += 8;
  ptr = (ptr == buffer_end) ? buffer : ptr;

  // Grab samples of interest
  (ptr + max_loc) > buffer_end ? (
    // Fast path (most of the time this is fine)
    s0 = ptr[loc0]; s1 = ptr[loc1]; s2 = ptr[loc2]; s3 = ptr[loc3]; s4 = ptr[loc4]; s5 = ptr[loc5]; s6 = ptr[loc6]; s7 = ptr[loc7];
  ) : (
    // Slow path
    rel_idx = - (ptr - buffer);
    s0 = ptr[loc0 < rel_idx ? loc0 + len : loc0]; s1 = ptr[loc1 < rel_idx ? loc1 + len : loc1]; s2 = ptr[loc2 < rel_idx ? loc2 + len : loc2]; s3 = ptr[loc3 < rel_idx ? loc3 + len : loc3]; s4 = ptr[loc4 < rel_idx ? loc4 + len : loc4]; s5 = ptr[loc5 < rel_idx ? loc5 + len : loc5]; s6 = ptr[loc6 < rel_idx ? loc6 + len : loc6]; s7 = ptr[loc7 < rel_idx ? loc7 + len : loc7];
  );
  
  // Mix
  a = s0; s0 = a + s1; s1 = a - s1; a = s2; s2 = a + s3; s3 = a - s3; a = s0; s0 = a + s2; s2 = a - s2; a = s1; s1 = a + s3; s3 = a - s3; a = s4; s4 = a + s5; s5 = a - s5; a = s6; s6 = a + s7; s7 = a - s7; a = s4; s4 = a + s6; s6 = a - s6; a = s5; s5 = a + s7; s7 = a - s7; a = s0; s0 = a + s4; s4 = a - s4; a = s1; s1 = a + s5; s5 = a - s5; a = s2; s2 = a + s6; s6 = a - s6; a = s3; s3 = a + s7; s7 = a - s7; 
);

function silence()
instance(
  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15,
  buffer, len, buffer_end,
)
(
  s0 = s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = s9 = s10 = s11 = s12 = s13 = s14 = s15 = 0;
  memset(buffer, 0, buffer_end - buffer);
);

