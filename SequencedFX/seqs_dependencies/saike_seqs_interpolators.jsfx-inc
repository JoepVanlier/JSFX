@init
 function smooth_parameter(target)
  instance(s, coeff)
  global()
  local(y, v)
  (
    v = coeff*(target - s);
    y = v + s;
    s = y + v;
    y
  );
  
  function initialize_smoother(cutoff)
  instance(coeff)
  global(srate)
  local(g)
  ( 
    g = tan($pi*cutoff/srate);
    coeff = g/(1+g);  
  );

  function interpolator_init(slider_idx)
  instance(next_val, idx)
  local()
  global()
  (
    next_val = slider(slider_idx);
    idx = slider_idx;
  );

  function interpolator_block()
  instance(delta, next_changepoint_t, next_val, idx)
  local(next_changepoint_y)
  global(samplesblock)
  (
    next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
    next_changepoint_t > 0 ? 
    (
      next_val = slider(idx);
    ) : (
      next_changepoint_y = slider(idx);
      next_val = slider(idx);
      next_changepoint_t = samplesblock;
    );
    
    delta = (next_changepoint_y - next_val) / next_changepoint_t;
  );
  
  function interpolate()
  instance(delta, next_changepoint_t, next_val, idx, coeff)
  local(current_value, next_changepoint_y)
  global(current_sample)
  (
    current_value = next_val;
    current_sample == next_changepoint_t ? 
    (
      next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
      delta = next_changepoint_t > current_sample ? (next_changepoint_y - current_value) / (next_changepoint_t-current_sample) : 0;
    );
    
    next_val = current_value + delta;
    
    coeff > 0 ? this.smooth_parameter(current_value) : current_value
  );
