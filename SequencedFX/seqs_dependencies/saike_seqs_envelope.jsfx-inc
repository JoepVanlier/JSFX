@init
  // Update calc_times in @sample

  function envelopeTempo(cTime)
    instance(cRate, tempoLabel)
    local()
    global(tempo)
    (
    ( cTime < 0.0416667 ) ?
    (
      tempoLabel = "1/16";
      cRate = 0.0625;
    ) : ( cTime < 0.0833333 ) ?
    (
      tempoLabel = "1/12";
      cRate = 0.0833333;
    ) : ( cTime < 0.125 ) ?
    (
      tempoLabel = "1/8";
      cRate = 0.125;
    ) : ( cTime < 0.166667 ) ?
    (
      tempoLabel = "1/6";
      cRate = 0.166667;
    ) : ( cTime < 0.208333 ) ?
    (
      tempoLabel = "1/5";
      cRate = 0.2;
    ) : ( cTime < 0.25 ) ?
    (
      tempoLabel = "1/4";
      cRate = 0.25;
    ) : ( cTime < 0.291667 ) ?
    (
      tempoLabel = "1/3";
      cRate = 0.333333;
    ) : ( cTime < 0.333333 ) ?
    (
      tempoLabel = "1/2";
      cRate = 0.5;
    ) : ( cTime < 0.375 ) ?
    (
      tempoLabel = "1";
      cRate = 1;
    ) : ( cTime < 0.416667 ) ?
    (
      tempoLabel = "2";
      cRate = 2;
    ) : ( cTime < 0.458333 ) ?
    (
      tempoLabel = "3";
      cRate = 3;
    ) : ( cTime < 0.5 ) ?
    (
      tempoLabel = "4";
      cRate = 4;
    ) : ( cTime < 0.541667 ) ?
    (
      tempoLabel = "6";
      cRate = 6;
    ) : ( cTime < 0.583333 ) ?
    (
      tempoLabel = "7";
      cRate = 7;
    ) : ( cTime < 0.625 ) ?
    (
      tempoLabel = "8";
      cRate = 8;
    ) : ( cTime < 0.666667 ) ?
    (
      tempoLabel = "12";
      cRate = 12;
    ) : ( cTime < 0.708333 ) ?
    (
      tempoLabel = "16";
      cRate = 16;
    ) : ( cTime < 0.75 ) ?
    (
      tempoLabel = "24";
      cRate = 24;
    ) : ( cTime < 0.791667 ) ?
    (
      tempoLabel = "32";
      cRate = 32;
    ) : ( cTime < 0.833333 ) ?
    (
      tempoLabel = "64";
      cRate = 64;
    ) : ( cTime < 0.875 ) ?
    (
      tempoLabel = "128";
      cRate = 128;
    ) : ( cTime < 0.916667 ) ?
    (
      tempoLabel = "256";
      cRate = 256;
    ) : ( cTime < 0.958333 ) ?
    (
      tempoLabel = "512";
      cRate = 512;
    ) : ( 
      tempoLabel = "1024";
      cRate = 1024;
    );
    
    cRate = tempo *  (.25/60) / cRate;
  );
  
  function getFastEnvelopeRate(cTime)
    instance()
    local()
    global(tempo)
    (
      (cTime < 0.038461538461538464) ? ( tempo * 0.53333333333333332593184650249895640
      ) : (cTime < 0.07692307692307693) ? ( tempo * 0.26666666666666666296592325124947820
      ) : (cTime < 0.11538461538461539) ? ( tempo * 0.13333333333333333148296162562473910
      ) : (cTime < 0.15384615384615385) ? ( tempo * 0.06666666666666666574148081281236955
      ) : (cTime < 0.19230769230769232) ? ( tempo * 0.05000002000000799973200571457709884
      ) : (cTime < 0.23076923076923078) ? ( tempo * 0.03333333333333333287074040640618477
      ) : (cTime < 0.2692307692307692) ? ( tempo * 0.02499999999994999971830722529375635
      ) : (cTime < 0.3076923076923077) ? ( tempo * 0.01666666666666666643537020320309239
      ) : (cTime < 0.34615384615384615) ? ( tempo * 0.01250000000001249937653380328583808
      ) : (cTime < 0.38461538461538464) ? ( tempo * 0.00833333333333333321768510160154619
      ) : (cTime < 0.4230769230769231) ? ( tempo * 0.00624999999999687437524098498897729
      ) : (cTime < 0.46153846153846156) ? ( tempo * 0.00416666666666666660884255080077310
      ) : (cTime < 0.5) ? ( tempo * 0.00208333333333333330442127540038655
      ) : (cTime < 0.5384615384615384) ? ( tempo * 0.00138888888888888894189432843262466
      ) : (cTime < 0.5769230769230769) ? ( tempo * 0.00104166666666666665221063770019327
      ) : (cTime < 0.6153846153846154) ? ( tempo * 0.00069444444444444447094716421631233
      ) : (cTime < 0.6538461538461539) ? ( tempo * 0.00059523809523809518336884272216025
      ) : (cTime < 0.6923076923076923) ? ( tempo * 0.00052083333333333332610531885009664
      ) : (cTime < 0.7307692307692307) ? ( tempo * 0.00034722222222222223547358210815617
      ) : (cTime < 0.7692307692307693) ? ( tempo * 0.00026041666666666666305265942504832
      ) : (cTime < 0.8076923076923077) ? ( tempo * 0.00017361111111111111773679105407808
      ) : (cTime < 0.8461538461538461) ? ( tempo * 0.00013020833333333333152632971252416
      ) : (cTime < 0.8846153846153846) ? ( tempo * 0.00006510416666666666576316485626208
      ) : (cTime < 0.9230769230769231) ? ( tempo * 0.00003255208333333333288158242813104
      ) : (cTime < 0.9615384615384616) ? ( tempo * 0.00001627604166666666644079121406552
      ) : (cTime < 1.0) ? ( tempo * 0.00000813802083333333322039560703276)
  );
  
  
  function getFastEnvelopeLabel(cTime)
    local()
    global(tempo)
    (
      (cTime < 0.038461538461538464) ? ( "1/128"
      ) : (cTime < 0.07692307692307693) ? ( "1/64"
      ) : (cTime < 0.11538461538461539) ? ( "1/32"
      ) : (cTime < 0.15384615384615385) ? ( "1/16"
      ) : (cTime < 0.19230769230769232) ? ( "1/12"
      ) : (cTime < 0.23076923076923078) ? ( "1/8"
      ) : (cTime < 0.2692307692307692) ? ( "1/6"
      ) : (cTime < 0.3076923076923077) ? ( "1/4"
      ) : (cTime < 0.34615384615384615) ? ( "1/3"
      ) : (cTime < 0.38461538461538464) ? ( "1/2"
      ) : (cTime < 0.4230769230769231) ? ( "2/3"
      ) : (cTime < 0.46153846153846156) ? ( "1"
      ) : (cTime < 0.5) ? ( "2"
      ) : (cTime < 0.5384615384615384) ? ( "3"
      ) : (cTime < 0.5769230769230769) ? ( "4"
      ) : (cTime < 0.6153846153846154) ? ( "6"
      ) : (cTime < 0.6538461538461539) ? ( "7"
      ) : (cTime < 0.6923076923076923) ? ( "8"
      ) : (cTime < 0.7307692307692307) ? ( "12"
      ) : (cTime < 0.7692307692307693) ? ( "16"
      ) : (cTime < 0.8076923076923077) ? ( "24"
      ) : (cTime < 0.8461538461538461) ? ( "32"
      ) : (cTime < 0.8846153846153846) ? ( "64"
      ) : (cTime < 0.9230769230769231) ? ( "128"
      ) : (cTime < 0.9615384615384616) ? ( "256"
      ) : (cTime <= 1.0) ? ( "512" )
  );
  
  // k_rise, k_decay, k_glide
  // Convert from decay to tempo synced (approximately).
  // Note that for decay, correction_factor is 0.1.
  function to_synced(env, correction_factor)
  local(est, step, k_reference, last_k_distance, k_distance, k_rise, out)
  global()
  (
    k_reference = 1000 * 0.33 * correction_factor * exp(-4.605170185988092*env);  // Ranges between [1/3 and 1/300]
    k_distance = 1000000000000000;

    est = 0; step = .01;
    while(
      last_k_distance = k_distance;
      est += step;
      k_rise = getFastEnvelopeRate(est);
      k_distance = abs(k_reference - k_rise);
      
      last_k_distance >= k_distance && est < 1.0
    );
    est - step
  );
  
  
  function to_non_synced(env, correction_factor)
  local(k_reference)
  global()
  (
    k_reference = getFastEnvelopeRate(env);
    
    -log(k_reference / (1000 * .33 * correction_factor))/4.605170185988092;  // Ranges between [1/3 and 1/300]
  );
  
  
  function calc_k(k_time)
  local(time_factor)
  global(srate)
  (
    time_factor = 2302.58509299 / srate;  // 90% point in ms to samples
    time_factor * 0.33 * exp(-4.605170185988092*k_time)
  );
  
  function calc_k_tsync(k_time)
  local(time_factor)
  global(srate)
  (
    time_factor = 2.30258509299 / srate;  // 90% point in ms to samples
    time_factor * getFastEnvelopeRate(k_time);
  );

  // Calculate times in ms
  function calc_times(env_rise, env_decay, sustain)
  global(srate)
  local(time_factor, inverse_rise_time)
  instance(k_rise, k_decay, env_attack_samples, m_sustain)
  (
    time_factor = 2302.58509299 / srate; // - ln(0.1) * 1000 (since we want it in ms)
    
    // Decay time between 3 and 300 ms
    // Strange way to write 1 / (3 * 10^(2*env_decay))
    inverse_rise_time = 0.33 * exp(-4.605170185988092*env_rise);  // Ranges between [1/3 and 1/300]
    k_rise = time_factor * inverse_rise_time;
    k_decay = time_factor * 0.033 * exp(-4.605170185988092*env_decay); // Ranges between [1/30 and 1/3000]
    
    env_attack_samples = .001 * srate / inverse_rise_time;
    m_sustain = sustain;
  );
  
  // Calculate times in ms
  function calc_times_sync(env_rise, env_decay, sustain)
  global(srate)
  local(time_factor, inverse_rise_time)
  instance(k_rise, k_decay, env_attack_samples, m_sustain)
  (
    time_factor = 2.30258509299 / srate; // ln(0.1) * dt
    
    inverse_rise_time = getFastEnvelopeRate(env_rise);
    k_rise = time_factor * inverse_rise_time;
    k_decay = time_factor * getFastEnvelopeRate(env_decay);
    
    env_attack_samples = srate / inverse_rise_time;
    m_sustain = sustain;
  );  

  function reset_envelope(reset)
  instance(tEnvelope, env)
  local()
  global()
  (
    tEnvelope = 0;
    reset ? env = 0;
  );
  
  function update_envelope(holding)
  instance(k_rise, k_decay, env_attack_samples, tEnvelope, env, m_sustain)
  global()
  local()
  (
    tEnvelope < env_attack_samples ? (
      env += k_rise * (1.0 - env);
      tEnvelope += 1;
    ) : (
      env += k_decay * (holding * m_sustain - env);
    );
    
    env
  );
  
  function follower(rise)
  instance(k_rise, k_decay)
  (
    env += k_rise * (1.0 - env) * rise - k_decay * env * (1.0 - rise);
  );

