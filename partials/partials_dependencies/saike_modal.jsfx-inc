@init

// Very basic modal model
//
// Fundamental is given by:
//    f0 = (1 / 2L) * ct
// with L being the length, and ct being the transverse propagation speed, we opt for directly setting this for convenience
//
// Inharmonicity coefficient is given by:
//    B = kappa^2 * (ES / T0) * (pi / L) ** 2
//
// Here kappa^2 * ES reflects the stiffness and T0 the radius of gyration. We also just set it directly.

// Model of a single resonator is
//          b z^-1
// -------------------------
// 1 + a1 * z^-1 + a2 * z^-2
//
// pk = exp(2*pi*j*f/fs) exp(-1 / (tau * fs))

// Define: gamma_k = exp(-1 / (tau_k * fs))
// Given that 1 / tau_k = r_k = base_damp + f_damp * 2 * pi * fk
// We can rewrite gamma_k as exp(-r_k / fs)

// Define: omega_k = 2 * pi * f_k / fs

// bk = (A/fs) Im{pk} = (A/fs) * gamma_k * sin(omega_k)
// a1_k = -2 Re(pk) = -2 * gamma_k * cos(omega_k)
// a2_k = |pk|^2 = gamma_k

function update_global_parameters()
(
  //base_damp = 10^damp;
  //f_damp = 10^freq_damp;
  // rel_position = 0.1; // x_h / L
  //inharm = 10^inharmonic;
  soundboard_factor = $pi * 0.1; // $pi * T0 / L
  irate = 1.0 / srate;
  omega_base = 2 * $pi * irate;
  Adivfs = 1.0 / srate;
);

function calc_base_gain(f_0)
local()
global(Adivfs, legacy_gain)
instance()
(
  legacy_gain ? Adivfs : Adivfs * f_0 / 220;
);

function pars(f_0, k, norm_factor)
global(inharm, omega_base, base_damp, f_damp, irate, rel_position, soundboard_factor, srate)
local(f_k, omega_k, gamma_k, wb)
instance(b, a1, a2, win, wout)
(
  f_k = f_0 * k * sqrt(1 + inharm * (k-1) * (k-1));
  omega_k = f_k * omega_base;
  gamma_k = exp(- (base_damp + f_damp * 2.0 * $pi * f_k) * irate);
  
  wout = win = sin(k * $pi * rel_position);
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (f_k < 0.48 * srate) ? (
    b = norm_factor * gamma_k * sin(omega_k) / f_k;
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function pars_offset(f_0, k, offset, norm_factor)
global(inharm, omega_base, base_damp, f_damp, irate, rel_position, soundboard_factor, srate)
local(f_k, omega_k, gamma_k, wb)
instance(b, a1, a2, win, wout)
(
  f_k = f_0 * k * sqrt(1 + inharm * (k-1) * (k-1)) + offset * (1 + .05 * k * k) * (0.1 + rel_position);
  omega_k = f_k * omega_base;
  gamma_k = exp(- (base_damp + f_damp * 2.0 * $pi * f_k * (1 + f_k / 1000)) * irate);
  
  wout = win = (2 * floor(k / 2) != floor(k)) + 0.08;//sin(k * $pi * rel_position);
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (f_k < 0.48 * srate) ? (
    b = norm_factor * gamma_k * sin(omega_k) / f_k;
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function pars_beam(f_0, k, ratio, norm_factor)
global(inharm, omega_base, base_damp, f_damp, irate, rel_position, soundboard_factor, srate)
local(f_k, omega_k, gamma_k, wb, omk)
instance(b, a1, a2, win, wout)
(
  f_k = f_0 * ratio;
  f_k *= (1 + inharm * k);
  omega_k = f_k * omega_base;
  omk = 2.0 * $pi * f_k;
  gamma_k = exp(- (base_damp + (f_damp / 1000) * (omk * omk)) * irate);
  
  wout = win = sin(k * $pi * rel_position);
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (f_k < 0.48 * srate) ? (
    b = norm_factor * gamma_k * sin(omega_k) / f_k;
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function pars_drum(f_0, k, norm_factor)
global(inharm, omega_base, base_damp, f_damp, irate, rel_position, soundboard_factor, srate, bessel_roots)
local(f_k, omega_k, gamma_k, wb, omk)
instance(b, a1, a2, win, wout)
(
  f_k = f_0 * bessel_roots[k - 1] * (1 + inharm * k * k);
  
  omega_k = f_k * omega_base;
  omk = 2.0 * $pi * f_k;
  gamma_k = exp(- (base_damp + (10/k) + (f_damp / 1000) * (omk * omk)) * irate);
  
  wout = win = sin(k * $pi * rel_position);
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (f_k < 0.48 * srate) ? (
    b = norm_factor * gamma_k * sin(omega_k) / f_k;
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function pars_marimba(f_0, ratio, k, camp, norm_factor)
global(inharm, omega_base, base_damp, f_damp, irate, rel_position, soundboard_factor, srate)
local(f_k, omega_k, gamma_k, wb, omk)
instance(b, a1, a2, win, wout)
(
  f_k = ratio * f_0;
  f_k *= sqrt((1 + inharm * k * k));
  omega_k = f_k * omega_base;
  omk = 2.0 * $pi * f_k;
  gamma_k = exp(- (base_damp + (f_damp / 1000) * (omk * omk)) * irate);
  //gamma_k = exp(- (base_damp + (20/k) + (f_damp / 1000) * omk * omk) * irate);
  
  wout = win = camp;
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (f_k < 0.48 * srate) ? (
    b = norm_factor * gamma_k * sin(omega_k) / f_k;
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function pars_pan(f_0, ratio, k, camp, norm_factor)
global(inharm, omega_base, base_damp, f_damp, irate, rel_position, soundboard_factor, srate)
local(f_k, omega_k, gamma_k, wb, omk)
instance(b, a1, a2, win, wout)
(
  f_k = ratio * f_0;
  f_k *= sqrt((1 + (inharm - 0.0001) * k * k));
  camp *= 0.33;
  omega_k = f_k * omega_base;
  omk = 2.0 * $pi * f_k;
  gamma_k = exp(- (base_damp + (5/k) + (f_damp / 1000) * (omk * omk)) * irate);
  
  wout = win = camp;
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (f_k < 0.48 * srate) ? (
    b = norm_factor * gamma_k * sin(omega_k) / f_k;
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function pars_vowels(f_0, k, spectrum_a, spectrum_b, spectrum_frac)
global(inharm, omega_base, base_damp, f_damp, irate, soundboard_factor, Adivfs, srate)
local(f_k, camp, omega_k, gamma_k, wb, omk, tmp)
instance(b, a1, a2, win, wout)
(
  f_k = f_0 * k;
  f_k *= sqrt((1 + (inharm - 0.0001) * k * k));

  camp = f_k < 22050 ? (
    tmp = f_k - floor(f_k);
    (spectrum_a[f_k] * (1.0 - tmp) + spectrum_a[f_k + 1] * tmp) * (1 - spectrum_frac) +
    (spectrum_b[f_k] * (1.0 - tmp) + spectrum_b[f_k + 1] * tmp) * spectrum_frac
  ) : 0;
  
  omega_k = f_k * omega_base;
  omk = 2.0 * $pi * f_k;
  gamma_k = exp(- (base_damp + (f_damp / 1000) * (omk * omk)) * irate);
  
  wout = win = camp;
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (f_k < 0.48 * srate) ? (
    b = Adivfs * gamma_k * sin(omega_k) / (100 * wb);
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function pars_raw(f_0, k)
global(inharm, omega_base, base_damp, f_damp, irate, soundboard_factor, Adivfs, srate)
local(f_k, camp, omega_k, gamma_k, wb, omk, tmp)
instance(b, a1, a2, win, wout, new_freq, new_amp, new_damp)
(
  this.partial_func(f_0, k);
  
  omega_k = new_freq * omega_base;
  omk = 2.0 * $pi * new_freq;
  gamma_k = exp(- new_damp * irate);
  
  wout = win = new_amp;
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (new_freq < 0.48 * srate) ? (
    b = Adivfs * gamma_k * sin(omega_k) / (100 * wb);
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);


function pars_memory(f_0, k, rel_freq, abs_freq, amp, decay)
global(omega_base, base_damp, f_damp, irate, soundboard_factor, Adivfs, srate)
local(f_k, camp, omega_k, gamma_k, wb, omk, tmp, xsq, relative_freq, final_freq)
instance(b, a1, a2, win, wout)
(
  // Sensitivity feels better when mapping nonlinearly
  xsq = rel_freq * rel_freq;
  relative_freq = sign(rel_freq) * (3 * xsq - 2 * xsq * abs(rel_freq));
  
  final_freq = f_0 * (k + relative_freq) + abs_freq;
  decay = - (decay - 1);
  amp = amp > -71.999 ? pow(10, amp / 20) : 0;
  
  omega_k = final_freq * omega_base;
  omk = 2.0 * $pi * final_freq;
  gamma_k = exp(- decay * irate);
  
  wout = win = amp;
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (final_freq < 0.48 * srate) ? (
    b = Adivfs * gamma_k * sin(omega_k) / (100 * wb);
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function pars_memory_b(f_0, k, rel_freq, abs_freq, amp, decay)
global(inharm, rel_position, omega_base, base_damp, f_damp, irate, soundboard_factor, Adivfs, srate)
local(f_k, camp, omega_k, gamma_k, wb, omk, tmp, xsq, relative_freq, final_freq)
instance(b, a1, a2, win, wout)
(
  // Sensitivity feels better when mapping nonlinearly
  xsq = rel_freq * rel_freq;
  relative_freq = sign(rel_freq) * (3 * xsq - 2 * xsq * abs(rel_freq));
  
  final_freq = f_0 * sqrt((1 + inharm * k * k)) * (k + relative_freq) + abs_freq;
  decay = - (decay - 1);
  
  amp = amp > -71.999 ? pow(10, amp / 20) : 0;
  
  omega_k = final_freq * omega_base;
  omk = 2.0 * $pi * final_freq;
  gamma_k = exp(- (decay + base_damp + (f_damp / 1000) * omk * omk) * irate);
  
  wout = win = amp * sin(k * $pi * rel_position);
  wb = k * soundboard_factor;
  
  // Scale such that we don't have to multiply by wb_k on the output.
  win *= wb;
  wout /= wb;
  
  (final_freq < 0.48 * srate) ? (
    b = Adivfs * gamma_k * sin(omega_k) / (100 * wb);
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function tick(f_h)
instance(b, a1, a2, win, wout,
         y, yh)
local(hist)
global(f_hn, f_b)
(
  hist = yh; yh = y;
  y = win * b * f_h - a1 * y - a2 * hist;
  f_hn += wout * y;
  f_b += y;
);

function set_pars_td(f_0)
instance(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63,
         l1, l2, l3, l4, l5, l6, l7,
         used_partials)
local(spectrum_idx, spectrum_frac, spectrum_a, spectrum_b, current_vowel, norm_factor, ptr, inharm_01, damp_01)
global(model, vowel, female_vowel, note_onz
       rel_position, base_damp, f_damp, inharm,
       inharmonic, freq_damp,
       custom_partial_mem, MAX_CUSTOM_PARTIALS,
       m_freq_relative, m_freq_relative2,
       m_freq_abs, m_freq_abs2,
       m_decay, m_decay2,
       m_amplitude, m_amplitude2,
)
(
  used_partials = 0;
  // TODO: investigate a better way than globals for this
  // This makes me weep ;_____;
  rel_position = this.rel_position;
  base_damp = this.base_damp;
  f_damp = this.f_damp;
  inharm = this.inharm;
  norm_factor = calc_base_gain(f_0);

  (model == 0) ? (
    used_partials += f1.pars(f_0, 1, norm_factor);
    used_partials += f2.pars(f_0, 2, norm_factor);
    used_partials += f3.pars(f_0, 3, norm_factor);
    used_partials += f4.pars(f_0, 4, norm_factor);
    used_partials += f5.pars(f_0, 5, norm_factor);
    used_partials += f6.pars(f_0, 6, norm_factor);
    used_partials += f7.pars(f_0, 7, norm_factor);
    used_partials += f8.pars(f_0, 8, norm_factor);
    used_partials += f9.pars(f_0, 9, norm_factor);
    used_partials += f10.pars(f_0, 10, norm_factor);
    used_partials += f11.pars(f_0, 11, norm_factor);
    used_partials += f12.pars(f_0, 12, norm_factor);
    used_partials += f13.pars(f_0, 13, norm_factor);
    used_partials += f14.pars(f_0, 14, norm_factor);
    used_partials += f15.pars(f_0, 15, norm_factor);
    used_partials += f16.pars(f_0, 16, norm_factor);
    used_partials += f17.pars(f_0, 17, norm_factor);
    used_partials += f18.pars(f_0, 18, norm_factor);
    used_partials += f19.pars(f_0, 19, norm_factor);
    used_partials += f20.pars(f_0, 20, norm_factor);
    used_partials += f21.pars(f_0, 21, norm_factor);
    used_partials += f22.pars(f_0, 22, norm_factor);
    used_partials += f23.pars(f_0, 23, norm_factor);
    used_partials += f24.pars(f_0, 24, norm_factor);
    used_partials += f25.pars(f_0, 25, norm_factor);
    used_partials += f26.pars(f_0, 26, norm_factor);
    used_partials += f27.pars(f_0, 27, norm_factor);
    used_partials += f28.pars(f_0, 28, norm_factor);
    used_partials += f29.pars(f_0, 29, norm_factor);
    used_partials += f30.pars(f_0, 30, norm_factor);
    used_partials += f31.pars(f_0, 31, norm_factor);
    used_partials += f32.pars(f_0, 32, norm_factor);
    used_partials += f33.pars(f_0, 33, norm_factor);
    used_partials += f34.pars(f_0, 34, norm_factor);
    used_partials += f35.pars(f_0, 35, norm_factor);
    used_partials += f36.pars(f_0, 36, norm_factor);
    used_partials += f37.pars(f_0, 37, norm_factor);
    used_partials += f38.pars(f_0, 38, norm_factor);
    used_partials += f39.pars(f_0, 39, norm_factor);
    used_partials += f40.pars(f_0, 40, norm_factor);
    used_partials += f41.pars(f_0, 41, norm_factor);
    used_partials += f42.pars(f_0, 42, norm_factor);
    used_partials += f43.pars(f_0, 43, norm_factor);
    used_partials += f44.pars(f_0, 44, norm_factor);
    used_partials += f45.pars(f_0, 45, norm_factor);
    used_partials += f46.pars(f_0, 46, norm_factor);
    used_partials += f47.pars(f_0, 47, norm_factor);
    used_partials += f48.pars(f_0, 48, norm_factor);
    used_partials += f49.pars(f_0, 49, norm_factor);
    used_partials += f50.pars(f_0, 50, norm_factor);
    used_partials += f51.pars(f_0, 51, norm_factor);
    used_partials += f52.pars(f_0, 52, norm_factor);
    used_partials += f53.pars(f_0, 53, norm_factor);
    used_partials += f54.pars(f_0, 54, norm_factor);
    used_partials += f55.pars(f_0, 55, norm_factor);
    used_partials += f56.pars(f_0, 56, norm_factor);
    used_partials += f57.pars(f_0, 57, norm_factor);
    used_partials += f58.pars(f_0, 58, norm_factor);
    used_partials += f59.pars(f_0, 59, norm_factor);
    used_partials += f60.pars(f_0, 60, norm_factor);
    used_partials += f61.pars(f_0, 61, norm_factor);
    used_partials += f62.pars(f_0, 62, norm_factor);
    used_partials += f63.pars(f_0, 63, norm_factor);
  ) : (model == 1) ? (
    used_partials += f1.pars(f_0, 1, norm_factor);
    used_partials += f2.pars(f_0, 3, norm_factor);
    used_partials += f3.pars(f_0, 5, norm_factor);
    used_partials += f4.pars(f_0, 7, norm_factor);
    used_partials += f5.pars(f_0, 9, norm_factor);
    used_partials += f6.pars(f_0, 11, norm_factor);
    used_partials += f7.pars(f_0, 13, norm_factor);
    used_partials += f8.pars(f_0, 15, norm_factor);
    used_partials += f9.pars(f_0, 17, norm_factor);
    used_partials += f10.pars(f_0, 19, norm_factor);
    used_partials += f11.pars(f_0, 21, norm_factor);
    used_partials += f12.pars(f_0, 23, norm_factor);
    used_partials += f13.pars(f_0, 25, norm_factor);
    used_partials += f14.pars(f_0, 27, norm_factor);
    used_partials += f15.pars(f_0, 29, norm_factor);
    used_partials += f16.pars(f_0, 31, norm_factor);
    used_partials += f17.pars(f_0, 33, norm_factor);
    used_partials += f18.pars(f_0, 35, norm_factor);
    used_partials += f19.pars(f_0, 37, norm_factor);
    used_partials += f20.pars(f_0, 39, norm_factor);
    used_partials += f21.pars(f_0, 41, norm_factor);
    used_partials += f22.pars(f_0, 43, norm_factor);
    used_partials += f23.pars(f_0, 45, norm_factor);
    used_partials += f24.pars(f_0, 47, norm_factor);
    used_partials += f25.pars(f_0, 49, norm_factor);
    used_partials += f26.pars(f_0, 51, norm_factor);
    used_partials += f27.pars(f_0, 53, norm_factor);
    used_partials += f28.pars(f_0, 55, norm_factor);
    used_partials += f29.pars(f_0, 57, norm_factor);
    used_partials += f30.pars(f_0, 59, norm_factor);
    used_partials += f31.pars(f_0, 61, norm_factor);
    used_partials += f32.pars(f_0, 63, norm_factor);
    used_partials += f33.pars(f_0, 65, norm_factor);
    used_partials += f34.pars(f_0, 67, norm_factor);
    used_partials += f35.pars(f_0, 69, norm_factor);
    used_partials += f36.pars(f_0, 71, norm_factor);
    used_partials += f37.pars(f_0, 73, norm_factor);
    used_partials += f38.pars(f_0, 75, norm_factor);
    used_partials += f39.pars(f_0, 77, norm_factor);
    used_partials += f40.pars(f_0, 79, norm_factor);
    used_partials += f41.pars(f_0, 81, norm_factor);
    used_partials += f42.pars(f_0, 83, norm_factor);
    used_partials += f43.pars(f_0, 85, norm_factor);
    used_partials += f44.pars(f_0, 87, norm_factor);
    used_partials += f45.pars(f_0, 89, norm_factor);
    used_partials += f46.pars(f_0, 91, norm_factor);
    used_partials += f47.pars(f_0, 93, norm_factor);
    used_partials += f48.pars(f_0, 95, norm_factor);
    used_partials += f49.pars(f_0, 97, norm_factor);
    used_partials += f50.pars(f_0, 99, norm_factor);
    used_partials += f51.pars(f_0, 101, norm_factor);
    used_partials += f52.pars(f_0, 103, norm_factor);
    used_partials += f53.pars(f_0, 105, norm_factor);
    used_partials += f54.pars(f_0, 107, norm_factor);
    used_partials += f55.pars(f_0, 109, norm_factor);
    used_partials += f56.pars(f_0, 111, norm_factor);
    used_partials += f57.pars(f_0, 113, norm_factor);
    used_partials += f58.pars(f_0, 115, norm_factor);
    used_partials += f59.pars(f_0, 117, norm_factor);
    used_partials += f60.pars(f_0, 119, norm_factor);
    used_partials += f61.pars(f_0, 121, norm_factor);
    used_partials += f62.pars(f_0, 123, norm_factor);
    used_partials += f63.pars(f_0, 125, norm_factor);
  ) : (model == 2) ? (
    // Beating
    used_partials += f1.pars_offset(f_0, 1, 0, norm_factor);
    used_partials += f2.pars_offset(f_0, 1, 3, norm_factor);
    used_partials += f3.pars_offset(f_0, 2, 0, norm_factor);
    used_partials += f4.pars_offset(f_0, 2, 3, norm_factor);
    used_partials += f5.pars_offset(f_0, 3, 0, norm_factor);
    used_partials += f6.pars_offset(f_0, 3, 3, norm_factor);
    used_partials += f7.pars_offset(f_0, 4, 0, norm_factor);
    used_partials += f8.pars_offset(f_0, 4, 3, norm_factor);
    used_partials += f9.pars_offset(f_0, 5, 0, norm_factor);
    used_partials += f10.pars_offset(f_0, 5, 3, norm_factor);
    used_partials += f11.pars_offset(f_0, 6, 0, norm_factor);
    used_partials += f12.pars_offset(f_0, 6, 3, norm_factor);
    used_partials += f13.pars_offset(f_0, 7, 0, norm_factor);
    used_partials += f14.pars_offset(f_0, 7, 3, norm_factor);
    used_partials += f15.pars_offset(f_0, 8, 0, norm_factor);
    used_partials += f16.pars_offset(f_0, 8, 3, norm_factor);
    used_partials += f17.pars_offset(f_0, 9, 0, norm_factor);
    used_partials += f18.pars_offset(f_0, 9, 3, norm_factor);
    used_partials += f19.pars_offset(f_0, 10, 0, norm_factor);
    used_partials += f20.pars_offset(f_0, 10, 3, norm_factor);
    used_partials += f21.pars_offset(f_0, 11, 0, norm_factor);
    used_partials += f22.pars_offset(f_0, 11, 3, norm_factor);
    used_partials += f23.pars_offset(f_0, 12, 0, norm_factor);
    used_partials += f24.pars_offset(f_0, 12, 3, norm_factor);
    used_partials += f25.pars_offset(f_0, 13, 0, norm_factor);
    used_partials += f26.pars_offset(f_0, 13, 3, norm_factor);
    used_partials += f27.pars_offset(f_0, 14, 0, norm_factor);
    used_partials += f28.pars_offset(f_0, 14, 3, norm_factor);
    used_partials += f29.pars_offset(f_0, 15, 0, norm_factor);
    used_partials += f30.pars_offset(f_0, 15, 3, norm_factor);
    used_partials += f31.pars_offset(f_0, 16, 0, norm_factor);
    used_partials += f32.pars_offset(f_0, 16, 3, norm_factor);
    used_partials += f33.pars_offset(f_0, 17, 0, norm_factor);
    used_partials += f34.pars_offset(f_0, 17, 3, norm_factor);
    used_partials += f35.pars_offset(f_0, 18, 0, norm_factor);
    used_partials += f36.pars_offset(f_0, 18, 3, norm_factor);
    used_partials += f37.pars_offset(f_0, 19, 0, norm_factor);
    used_partials += f38.pars_offset(f_0, 19, 3, norm_factor);
    used_partials += f39.pars_offset(f_0, 20, 0, norm_factor);
    used_partials += f40.pars_offset(f_0, 20, 3, norm_factor);
    used_partials += f41.pars_offset(f_0, 21, 0, norm_factor);
    used_partials += f42.pars_offset(f_0, 21, 3, norm_factor);
    used_partials += f43.pars_offset(f_0, 22, 0, norm_factor);
    used_partials += f44.pars_offset(f_0, 22, 3, norm_factor);
    used_partials += f45.pars_offset(f_0, 23, 0, norm_factor);
    used_partials += f46.pars_offset(f_0, 23, 3, norm_factor);
    used_partials += f47.pars_offset(f_0, 24, 0, norm_factor);
    used_partials += f48.pars_offset(f_0, 24, 3, norm_factor);
    used_partials += f49.pars_offset(f_0, 25, 0, norm_factor);
    used_partials += f50.pars_offset(f_0, 25, 3, norm_factor);
    used_partials += f51.pars_offset(f_0, 26, 0, norm_factor);
    used_partials += f52.pars_offset(f_0, 26, 3, norm_factor);
    used_partials += f53.pars_offset(f_0, 27, 0, norm_factor);
    used_partials += f54.pars_offset(f_0, 27, 3, norm_factor);
    used_partials += f55.pars_offset(f_0, 28, 0, norm_factor);
    used_partials += f56.pars_offset(f_0, 28, 3, norm_factor);
    used_partials += f57.pars_offset(f_0, 29, 0, norm_factor);
    used_partials += f58.pars_offset(f_0, 29, 3, norm_factor);
    used_partials += f59.pars_offset(f_0, 30, 0, norm_factor);
    used_partials += f60.pars_offset(f_0, 30, 3, norm_factor);
    used_partials += f61.pars_offset(f_0, 31, 0, norm_factor);
    used_partials += f62.pars_offset(f_0, 31, 3, norm_factor);
    used_partials += f63.pars_offset(f_0, 32, 0, norm_factor);
  ) : (model == 3) ? (
    // Beam unclamped
    used_partials += f1.pars_beam(f_0, 1, 1.5056187, norm_factor);
    used_partials += f2.pars_beam(f_0, 2, 2.4997527, norm_factor);
    used_partials += f3.pars_beam(f_0, 3, 3.5000107, norm_factor);
    used_partials += f4.pars_beam(f_0, 4, 4.5, norm_factor);
    used_partials += f5.pars_beam(f_0, 5, 5.5, norm_factor);
    used_partials += f6.pars_beam(f_0, 6, 6.5, norm_factor);
    used_partials += f7.pars_beam(f_0, 7, 7.5, norm_factor);
    used_partials += f8.pars_beam(f_0, 8, 8.5, norm_factor);
    used_partials += f9.pars_beam(f_0, 9, 9.5, norm_factor);
    used_partials += f10.pars_beam(f_0, 10, 10.5, norm_factor);
    used_partials += f11.pars_beam(f_0, 11, 11.5, norm_factor);
    used_partials += f12.pars_beam(f_0, 12, 12.5, norm_factor);
    used_partials += f13.pars_beam(f_0, 13, 13.5, norm_factor);
    used_partials += f14.pars_beam(f_0, 14, 14.5, norm_factor);
    used_partials += f15.pars_beam(f_0, 15, 15.5, norm_factor);
    used_partials += f16.pars_beam(f_0, 16, 16.5, norm_factor);
    used_partials += f17.pars_beam(f_0, 17, 17.5, norm_factor);
    used_partials += f18.pars_beam(f_0, 18, 18.5, norm_factor);
    used_partials += f19.pars_beam(f_0, 19, 19.5, norm_factor);
    used_partials += f20.pars_beam(f_0, 20, 20.5, norm_factor);
    used_partials += f21.pars_beam(f_0, 21, 21.5, norm_factor);
    used_partials += f22.pars_beam(f_0, 22, 22.5, norm_factor);
    used_partials += f23.pars_beam(f_0, 23, 23.5, norm_factor);
    used_partials += f24.pars_beam(f_0, 24, 24.5, norm_factor);
    used_partials += f25.pars_beam(f_0, 25, 25.5, norm_factor);
    used_partials += f26.pars_beam(f_0, 26, 26.5, norm_factor);
    used_partials += f27.pars_beam(f_0, 27, 27.5, norm_factor);
    used_partials += f28.pars_beam(f_0, 28, 28.5, norm_factor);
    used_partials += f29.pars_beam(f_0, 29, 29.5, norm_factor);
    used_partials += f30.pars_beam(f_0, 30, 30.5, norm_factor);
    used_partials += f31.pars_beam(f_0, 31, 31.5, norm_factor);
    used_partials += f32.pars_beam(f_0, 32, 32.5, norm_factor);
    used_partials += f33.pars_beam(f_0, 33, 33.5, norm_factor);
    used_partials += f34.pars_beam(f_0, 34, 34.5, norm_factor);
    used_partials += f35.pars_beam(f_0, 35, 35.5, norm_factor);
    used_partials += f36.pars_beam(f_0, 36, 36.5, norm_factor);
    used_partials += f37.pars_beam(f_0, 37, 37.5, norm_factor);
    used_partials += f38.pars_beam(f_0, 38, 38.5, norm_factor);
    used_partials += f39.pars_beam(f_0, 39, 39.5, norm_factor);
    used_partials += f40.pars_beam(f_0, 40, 40.5, norm_factor);
    used_partials += f41.pars_beam(f_0, 41, 41.5, norm_factor);
    used_partials += f42.pars_beam(f_0, 42, 42.5, norm_factor);
    used_partials += f43.pars_beam(f_0, 43, 43.5, norm_factor);
    used_partials += f44.pars_beam(f_0, 44, 44.5, norm_factor);
    used_partials += f45.pars_beam(f_0, 45, 45.5, norm_factor);
    used_partials += f46.pars_beam(f_0, 46, 46.5, norm_factor);
    used_partials += f47.pars_beam(f_0, 47, 47.5, norm_factor);
    used_partials += f48.pars_beam(f_0, 48, 48.5, norm_factor);
    used_partials += f49.pars_beam(f_0, 49, 49.5, norm_factor);
    used_partials += f50.pars_beam(f_0, 50, 50.5, norm_factor);
    used_partials += f51.pars_beam(f_0, 51, 51.5, norm_factor);
    used_partials += f52.pars_beam(f_0, 52, 52.5, norm_factor);
    used_partials += f53.pars_beam(f_0, 53, 53.5, norm_factor);
    used_partials += f54.pars_beam(f_0, 54, 54.5, norm_factor);
    used_partials += f55.pars_beam(f_0, 55, 55.5, norm_factor);
    used_partials += f56.pars_beam(f_0, 56, 56.5, norm_factor);
    used_partials += f57.pars_beam(f_0, 57, 57.5, norm_factor);
    used_partials += f58.pars_beam(f_0, 58, 58.5, norm_factor);
    used_partials += f59.pars_beam(f_0, 59, 59.5, norm_factor);
    used_partials += f60.pars_beam(f_0, 60, 60.5, norm_factor);
    used_partials += f61.pars_beam(f_0, 61, 61.5, norm_factor);
    used_partials += f62.pars_beam(f_0, 62, 62.5, norm_factor);
    used_partials += f63.pars_beam(f_0, 63, 63.5, norm_factor);
  ) : (model == 4) ? (
    // Beam clamped
    used_partials += f1.pars_beam(f_0, 1, 0.5968642, norm_factor);
    used_partials += f2.pars_beam(f_0, 2, 1.4941756, norm_factor);
    used_partials += f3.pars_beam(f_0, 3, 2.5002469, norm_factor);
    used_partials += f4.pars_beam(f_0, 4, 3.4999893, norm_factor);
    used_partials += f5.pars_beam(f_0, 5, 4.5, norm_factor);
    used_partials += f6.pars_beam(f_0, 6, 5.5, norm_factor);
    used_partials += f7.pars_beam(f_0, 7, 6.5, norm_factor);
    used_partials += f8.pars_beam(f_0, 8, 7.5, norm_factor);
    used_partials += f9.pars_beam(f_0, 9, 8.5, norm_factor);
    used_partials += f10.pars_beam(f_0, 10, 9.5, norm_factor);
    used_partials += f11.pars_beam(f_0, 11, 10.5, norm_factor);
    used_partials += f12.pars_beam(f_0, 12, 11.5, norm_factor);
    used_partials += f13.pars_beam(f_0, 13, 12.5, norm_factor);
    used_partials += f14.pars_beam(f_0, 14, 13.5, norm_factor);
    used_partials += f15.pars_beam(f_0, 15, 14.5, norm_factor);
    used_partials += f16.pars_beam(f_0, 16, 15.5, norm_factor);
    used_partials += f17.pars_beam(f_0, 17, 16.5, norm_factor);
    used_partials += f18.pars_beam(f_0, 18, 17.5, norm_factor);
    used_partials += f19.pars_beam(f_0, 19, 18.5, norm_factor);
    used_partials += f20.pars_beam(f_0, 20, 19.5, norm_factor);
    used_partials += f21.pars_beam(f_0, 21, 20.5, norm_factor);
    used_partials += f22.pars_beam(f_0, 22, 21.5, norm_factor);
    used_partials += f23.pars_beam(f_0, 23, 22.5, norm_factor);
    used_partials += f24.pars_beam(f_0, 24, 23.5, norm_factor);
    used_partials += f25.pars_beam(f_0, 25, 24.5, norm_factor);
    used_partials += f26.pars_beam(f_0, 26, 25.5, norm_factor);
    used_partials += f27.pars_beam(f_0, 27, 26.5, norm_factor);
    used_partials += f28.pars_beam(f_0, 28, 27.5, norm_factor);
    used_partials += f29.pars_beam(f_0, 29, 28.5, norm_factor);
    used_partials += f30.pars_beam(f_0, 30, 29.5, norm_factor);
    used_partials += f31.pars_beam(f_0, 31, 30.5, norm_factor);
    used_partials += f32.pars_beam(f_0, 32, 31.5, norm_factor);
    used_partials += f33.pars_beam(f_0, 33, 32.5, norm_factor);
    used_partials += f34.pars_beam(f_0, 34, 33.5, norm_factor);
    used_partials += f35.pars_beam(f_0, 35, 34.5, norm_factor);
    used_partials += f36.pars_beam(f_0, 36, 35.5, norm_factor);
    used_partials += f37.pars_beam(f_0, 37, 36.5, norm_factor);
    used_partials += f38.pars_beam(f_0, 38, 37.5, norm_factor);
    used_partials += f39.pars_beam(f_0, 39, 38.5, norm_factor);
    used_partials += f40.pars_beam(f_0, 40, 39.5, norm_factor);
    used_partials += f41.pars_beam(f_0, 41, 40.5, norm_factor);
    used_partials += f42.pars_beam(f_0, 42, 41.5, norm_factor);
    used_partials += f43.pars_beam(f_0, 43, 42.5, norm_factor);
    used_partials += f44.pars_beam(f_0, 44, 43.5, norm_factor);
    used_partials += f45.pars_beam(f_0, 45, 44.5, norm_factor);
    used_partials += f46.pars_beam(f_0, 46, 45.5, norm_factor);
    used_partials += f47.pars_beam(f_0, 47, 46.5, norm_factor);
    used_partials += f48.pars_beam(f_0, 48, 47.5, norm_factor);
    used_partials += f49.pars_beam(f_0, 49, 48.5, norm_factor);
    used_partials += f50.pars_beam(f_0, 50, 49.5, norm_factor);
    used_partials += f51.pars_beam(f_0, 51, 50.5, norm_factor);
    used_partials += f52.pars_beam(f_0, 52, 51.5, norm_factor);
    used_partials += f53.pars_beam(f_0, 53, 52.5, norm_factor);
    used_partials += f54.pars_beam(f_0, 54, 53.5, norm_factor);
    used_partials += f55.pars_beam(f_0, 55, 54.5, norm_factor);
    used_partials += f56.pars_beam(f_0, 56, 55.5, norm_factor);
    used_partials += f57.pars_beam(f_0, 57, 56.5, norm_factor);
    used_partials += f58.pars_beam(f_0, 58, 57.5, norm_factor);
    used_partials += f59.pars_beam(f_0, 59, 58.5, norm_factor);
    used_partials += f60.pars_beam(f_0, 60, 59.5, norm_factor);
    used_partials += f61.pars_beam(f_0, 61, 60.5, norm_factor);
    used_partials += f62.pars_beam(f_0, 62, 61.5, norm_factor);
    used_partials += f63.pars_beam(f_0, 63, 62.5, norm_factor);
  ) : (model == 5) ? (
    used_partials += f1.pars_drum(f_0, 1, norm_factor);
    used_partials += f2.pars_drum(f_0, 2, norm_factor);
    used_partials += f3.pars_drum(f_0, 3, norm_factor);
    used_partials += f4.pars_drum(f_0, 4, norm_factor);
    used_partials += f5.pars_drum(f_0, 5, norm_factor);
    used_partials += f6.pars_drum(f_0, 6, norm_factor);
    used_partials += f7.pars_drum(f_0, 7, norm_factor);
    used_partials += f8.pars_drum(f_0, 8, norm_factor);
    used_partials += f9.pars_drum(f_0, 9, norm_factor);
    used_partials += f10.pars_drum(f_0, 10, norm_factor);
    used_partials += f11.pars_drum(f_0, 11, norm_factor);
    used_partials += f12.pars_drum(f_0, 12, norm_factor);
    used_partials += f13.pars_drum(f_0, 13, norm_factor);
    used_partials += f14.pars_drum(f_0, 14, norm_factor);
    used_partials += f15.pars_drum(f_0, 15, norm_factor);
    used_partials += f16.pars_drum(f_0, 16, norm_factor);
    used_partials += f17.pars_drum(f_0, 17, norm_factor);
    used_partials += f18.pars_drum(f_0, 18, norm_factor);
    used_partials += f19.pars_drum(f_0, 19, norm_factor);
    used_partials += f20.pars_drum(f_0, 20, norm_factor);
    used_partials += f21.pars_drum(f_0, 21, norm_factor);
    used_partials += f22.pars_drum(f_0, 22, norm_factor);
    used_partials += f23.pars_drum(f_0, 23, norm_factor);
    used_partials += f24.pars_drum(f_0, 24, norm_factor);
    used_partials += f25.pars_drum(f_0, 25, norm_factor);
    used_partials += f26.pars_drum(f_0, 26, norm_factor);
    used_partials += f27.pars_drum(f_0, 27, norm_factor);
    used_partials += f28.pars_drum(f_0, 28, norm_factor);
    used_partials += f29.pars_drum(f_0, 29, norm_factor);
    used_partials += f30.pars_drum(f_0, 30, norm_factor);
    used_partials += f31.pars_drum(f_0, 31, norm_factor);
    used_partials += f32.pars_drum(f_0, 32, norm_factor);
    used_partials += f33.pars_drum(f_0, 33, norm_factor);
    used_partials += f34.pars_drum(f_0, 34, norm_factor);
    used_partials += f35.pars_drum(f_0, 35, norm_factor);
    used_partials += f36.pars_drum(f_0, 36, norm_factor);
    used_partials += f37.pars_drum(f_0, 37, norm_factor);
    used_partials += f38.pars_drum(f_0, 38, norm_factor);
    used_partials += f39.pars_drum(f_0, 39, norm_factor);
    used_partials += f40.pars_drum(f_0, 40, norm_factor);
    used_partials += f41.pars_drum(f_0, 41, norm_factor);
    used_partials += f42.pars_drum(f_0, 42, norm_factor);
    used_partials += f43.pars_drum(f_0, 43, norm_factor);
    used_partials += f44.pars_drum(f_0, 44, norm_factor);
    used_partials += f45.pars_drum(f_0, 45, norm_factor);
    used_partials += f46.pars_drum(f_0, 46, norm_factor);
    used_partials += f47.pars_drum(f_0, 47, norm_factor);
    used_partials += f48.pars_drum(f_0, 48, norm_factor);
    used_partials += f49.pars_drum(f_0, 49, norm_factor);
    used_partials += f50.pars_drum(f_0, 50, norm_factor);
    used_partials += f51.pars_drum(f_0, 51, norm_factor);
    used_partials += f52.pars_drum(f_0, 52, norm_factor);
    used_partials += f53.pars_drum(f_0, 53, norm_factor);
    used_partials += f54.pars_drum(f_0, 54, norm_factor);
    used_partials += f55.pars_drum(f_0, 55, norm_factor);
    used_partials += f56.pars_drum(f_0, 56, norm_factor);
    used_partials += f57.pars_drum(f_0, 57, norm_factor);
    used_partials += f58.pars_drum(f_0, 58, norm_factor);
    used_partials += f59.pars_drum(f_0, 59, norm_factor);
    used_partials += f60.pars_drum(f_0, 60, norm_factor);
    used_partials += f61.pars_drum(f_0, 61, norm_factor);
    used_partials += f62.pars_drum(f_0, 62, norm_factor);
    used_partials += f63.pars_drum(f_0, 63, norm_factor);
  ) : ( model == 6 ) ? (
    used_partials += f1.pars_marimba(f_0, 1, 1, 1, norm_factor);
    used_partials += f2.pars_marimba(f_0, 1.911076, 2, 0.04 + 0.2 * rel_position, norm_factor);
    used_partials += f3.pars_marimba(f_0, 4, 3, 1, norm_factor);
    used_partials += f4.pars_marimba(f_0, 10.25, 4, 1, norm_factor);
    used_partials += f5.pars_marimba(f_0, 14.2511700468, 5, 0.04 + 0.3 * rel_position, norm_factor);
    used_partials += f6.pars_marimba(f_0, 17.745709828, 6, 0.04 + 0.3 * rel_position, norm_factor);
    used_partials += f7.pars_marimba(f_0, 19, 7, 0.09, norm_factor);
    used_partials += f8.pars_marimba(f_0, 24.352574, 8, 0.04 + 0.2 * rel_position, norm_factor);
    used_partials += f9.pars_marimba(f_0, 18, 9, 0.09, norm_factor);
    used_partials += f10.pars_marimba(f_0, 20, 10, 0.09, norm_factor);
    used_partials += f11.pars_marimba(f_0, 22, 11, 0.09, norm_factor);
    used_partials += f12.pars_marimba(f_0, 24, 12, 0.09, norm_factor);
    used_partials += f13.pars_marimba(f_0, 26, 13, 0.09, norm_factor);
    used_partials += f14.pars_marimba(f_0, 28, 14, 0.09, norm_factor);
    used_partials += f15.pars_marimba(f_0, 30, 15, 0.09, norm_factor);
    used_partials += f16.pars_marimba(f_0, 32, 16, 0.09, norm_factor);
    used_partials += f17.pars_marimba(f_0, 34, 17, 0.09, norm_factor);
    used_partials += f18.pars_marimba(f_0, 36, 18, 0.09, norm_factor);
    used_partials += f19.pars_marimba(f_0, 38, 19, 0.09, norm_factor);
    used_partials += f20.pars_marimba(f_0, 40, 20, 0.09, norm_factor);
    used_partials += f21.pars_marimba(f_0, 42, 21, 0.09, norm_factor);
    used_partials += f22.pars_marimba(f_0, 44, 22, 0.09, norm_factor);
    used_partials += f23.pars_marimba(f_0, 46, 23, 0.09, norm_factor);
    used_partials += f24.pars_marimba(f_0, 48, 24, 0.09, norm_factor);
    used_partials += f25.pars_marimba(f_0, 50, 25, 0.09, norm_factor);
    used_partials += f26.pars_marimba(f_0, 52, 26, 0.09, norm_factor);
    used_partials += f27.pars_marimba(f_0, 54, 27, 0.09, norm_factor);
    used_partials += f28.pars_marimba(f_0, 56, 28, 0.09, norm_factor);
    used_partials += f29.pars_marimba(f_0, 58, 29, 0.09, norm_factor);
    used_partials += f30.pars_marimba(f_0, 60, 30, 0.09, norm_factor);
    used_partials += f31.pars_marimba(f_0, 62, 31, 0.09, norm_factor);
    used_partials += f32.pars_marimba(f_0, 64, 32, 0.09, norm_factor);
    used_partials += f33.pars_marimba(f_0, 66, 33, 0.09, norm_factor);
    used_partials += f34.pars_marimba(f_0, 68, 34, 0.09, norm_factor);
    used_partials += f35.pars_marimba(f_0, 70, 35, 0.09, norm_factor);
    used_partials += f36.pars_marimba(f_0, 72, 36, 0.09, norm_factor);
    used_partials += f37.pars_marimba(f_0, 74, 37, 0.09, norm_factor);
    used_partials += f38.pars_marimba(f_0, 76, 38, 0.09, norm_factor);
    used_partials += f39.pars_marimba(f_0, 78, 39, 0.09, norm_factor);
    used_partials += f40.pars_marimba(f_0, 80, 40, 0.09, norm_factor);
    used_partials += f41.pars_marimba(f_0, 82, 41, 0.09, norm_factor);
    used_partials += f42.pars_marimba(f_0, 84, 42, 0.09, norm_factor);
    used_partials += f43.pars_marimba(f_0, 86, 43, 0.09, norm_factor);
    used_partials += f44.pars_marimba(f_0, 88, 44, 0.09, norm_factor);
    used_partials += f45.pars_marimba(f_0, 90, 45, 0.09, norm_factor);
    used_partials += f46.pars_marimba(f_0, 92, 46, 0.09, norm_factor);
    used_partials += f47.pars_marimba(f_0, 94, 47, 0.09, norm_factor);
    used_partials += f48.pars_marimba(f_0, 96, 48, 0.09, norm_factor);
    used_partials += f49.pars_marimba(f_0, 98, 49, 0.09, norm_factor);
    used_partials += f50.pars_marimba(f_0, 100, 50, 0.09, norm_factor);
    used_partials += f51.pars_marimba(f_0, 102, 51, 0.09, norm_factor);
    used_partials += f52.pars_marimba(f_0, 104, 52, 0.09, norm_factor);
    used_partials += f53.pars_marimba(f_0, 106, 53, 0.09, norm_factor);
    used_partials += f54.pars_marimba(f_0, 108, 54, 0.09, norm_factor);
    used_partials += f55.pars_marimba(f_0, 110, 55, 0.09, norm_factor);
    used_partials += f56.pars_marimba(f_0, 112, 56, 0.09, norm_factor);
    used_partials += f57.pars_marimba(f_0, 114, 57, 0.09, norm_factor);
    used_partials += f58.pars_marimba(f_0, 116, 58, 0.09, norm_factor);
    used_partials += f59.pars_marimba(f_0, 118, 59, 0.09, norm_factor);
    used_partials += f60.pars_marimba(f_0, 120, 60, 0.09, norm_factor);
    used_partials += f61.pars_marimba(f_0, 122, 61, 0.09, norm_factor);
    used_partials += f62.pars_marimba(f_0, 124, 62, 0.09, norm_factor);
    used_partials += f63.pars_marimba(f_0, 126, 63, 0.09, norm_factor);
  ) : ( model == 7 ) ? (
    // Pan  (f_0, ratio, k, camp)
    used_partials += f1.pars_pan(f_0, 1, 1, 3.5 - 1.0 * rel_position, norm_factor);
    used_partials += f2.pars_pan(f_0, 1.19672275218, 2, 0.05 + 0.26 * rel_position, norm_factor);
    used_partials += f3.pars_pan(f_0, 0.74899885, 3, 0.05 + 0.18 * rel_position, norm_factor);
    used_partials += f4.pars_pan(f_0, 1.57885, 4, 0.01 + 0.03 * rel_position, norm_factor);   /* Maybe muted ? */
    used_partials += f5.pars_pan(f_0, 2.000333953889411, 5, 0.025, norm_factor);
    used_partials += f6.pars_pan(f_0, 2.000333953889411 + 3.34 / used_partials += f_0, 6, 0.025, norm_factor);
    used_partials += f7.pars_pan(f_0, 2.23426319696, 7, 0.005 * rel_position, norm_factor);
    used_partials += f8.pars_pan(f_0, 3.0029642446, 8, 0.05, norm_factor);
    used_partials += f9.pars_pan(f_0, 3.5708, 9, 0.003 * rel_position, norm_factor);
    used_partials += f10.pars_pan(f_0, 3.997778188, 10, 0.03 * rel_position, norm_factor);
    used_partials += f11.pars_pan(f_0, 6.5, 11, 0.0005, norm_factor);
    used_partials += f12.pars_pan(f_0, 7.0, 12, 0.0005, norm_factor);
    used_partials += f13.pars_pan(f_0, 7.5, 13, 0.0005, norm_factor);
    used_partials += f14.pars_pan(f_0, 8.0, 14, 0.0005, norm_factor);
    used_partials += f15.pars_pan(f_0, 8.5, 15, 0.0005, norm_factor);
    used_partials += f16.pars_pan(f_0, 9.0, 16, 0.0005, norm_factor);
    used_partials += f17.pars_pan(f_0, 9.5, 17, 0.0005, norm_factor);
    used_partials += f18.pars_pan(f_0, 10.0, 18, 0.0005, norm_factor);
    used_partials += f19.pars_pan(f_0, 10.5, 19, 0.0005, norm_factor);
    used_partials += f20.pars_pan(f_0, 11.0, 20, 0.0005, norm_factor);
    used_partials += f21.pars_pan(f_0, 11.5, 21, 0.0005, norm_factor);
    used_partials += f22.pars_pan(f_0, 12.0, 22, 0.0005, norm_factor);
    used_partials += f23.pars_pan(f_0, 12.5, 23, 0.0005, norm_factor);
    used_partials += f24.pars_pan(f_0, 13.0, 24, 0.0005, norm_factor);
    used_partials += f25.pars_pan(f_0, 13.5, 25, 0.0005, norm_factor);
    used_partials += f26.pars_pan(f_0, 14.0, 26, 0.0005, norm_factor);
    used_partials += f27.pars_pan(f_0, 14.5, 27, 0.0005, norm_factor);
    used_partials += f28.pars_pan(f_0, 15.0, 28, 0.0005, norm_factor);
    used_partials += f29.pars_pan(f_0, 15.5, 29, 0.0005, norm_factor);
    used_partials += f30.pars_pan(f_0, 16.0, 30, 0.0005, norm_factor);
    used_partials += f31.pars_pan(f_0, 16.5, 31, 0.0005, norm_factor);
    used_partials += f32.pars_pan(f_0, 17.0, 32, 0.0005, norm_factor);
    used_partials += f33.pars_pan(f_0, 17.5, 33, 0.0005, norm_factor);
    used_partials += f34.pars_pan(f_0, 18.0, 34, 0.0005, norm_factor);
    used_partials += f35.pars_pan(f_0, 18.5, 35, 0.0005, norm_factor);
    used_partials += f36.pars_pan(f_0, 19.0, 36, 0.0005, norm_factor);
    used_partials += f37.pars_pan(f_0, 19.5, 37, 0.0005, norm_factor);
    used_partials += f38.pars_pan(f_0, 20.0, 38, 0.0005, norm_factor);
    used_partials += f39.pars_pan(f_0, 20.5, 39, 0.0005, norm_factor);
    used_partials += f40.pars_pan(f_0, 21.0, 40, 0.0005, norm_factor);
    used_partials += f41.pars_pan(f_0, 21.5, 41, 0.0005, norm_factor);
    used_partials += f42.pars_pan(f_0, 22.0, 42, 0.0005, norm_factor);
    used_partials += f43.pars_pan(f_0, 22.5, 43, 0.0005, norm_factor);
    used_partials += f44.pars_pan(f_0, 23.0, 44, 0.0005, norm_factor);
    used_partials += f45.pars_pan(f_0, 23.5, 45, 0.0005, norm_factor);
    used_partials += f46.pars_pan(f_0, 24.0, 46, 0.0005, norm_factor);
    used_partials += f47.pars_pan(f_0, 24.5, 47, 0.0005, norm_factor);
    used_partials += f48.pars_pan(f_0, 25.0, 48, 0.0005, norm_factor);
    used_partials += f49.pars_pan(f_0, 25.5, 49, 0.0005, norm_factor);
    used_partials += f50.pars_pan(f_0, 26.0, 50, 0.0005, norm_factor);
    used_partials += f51.pars_pan(f_0, 26.5, 51, 0.0005, norm_factor);
    used_partials += f52.pars_pan(f_0, 27.0, 52, 0.0005, norm_factor);
    used_partials += f53.pars_pan(f_0, 27.5, 53, 0.0005, norm_factor);
    used_partials += f54.pars_pan(f_0, 28.0, 54, 0.0005, norm_factor);
    used_partials += f55.pars_pan(f_0, 28.5, 55, 0.0005, norm_factor);
    used_partials += f56.pars_pan(f_0, 29.0, 56, 0.0005, norm_factor);
    used_partials += f57.pars_pan(f_0, 29.5, 57, 0.0005, norm_factor);
    used_partials += f58.pars_pan(f_0, 30.0, 58, 0.0005, norm_factor);
    used_partials += f59.pars_pan(f_0, 30.5, 59, 0.0005, norm_factor);
    used_partials += f60.pars_pan(f_0, 31.0, 60, 0.0005, norm_factor);
    used_partials += f61.pars_pan(f_0, 31.5, 61, 0.0005, norm_factor);
    used_partials += f62.pars_pan(f_0, 32.0, 62, 0.0005, norm_factor);
    used_partials += f63.pars_pan(f_0, 32.5, 63, 0.0005, norm_factor);
  ) : ( ( model == 8 ) || ( model == 9 ) ) ? (
    current_vowel = model == 8 ? vowel : used_partials += female_vowel;
    spectrum_idx = used_partials += floor(rel_position * 7);
    spectrum_frac = rel_position * 7 - spectrum_idx;
    spectrum_a = current_vowel + spectrum_idx * 22050;
    spectrum_b = spectrum_a + 22050;
    used_partials += f1.pars_vowels(f_0, 1, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f2.pars_vowels(f_0, 2, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f3.pars_vowels(f_0, 3, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f4.pars_vowels(f_0, 4, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f5.pars_vowels(f_0, 5, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f6.pars_vowels(f_0, 6, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f7.pars_vowels(f_0, 7, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f8.pars_vowels(f_0, 8, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f9.pars_vowels(f_0, 9, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f10.pars_vowels(f_0, 10, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f11.pars_vowels(f_0, 11, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f12.pars_vowels(f_0, 12, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f13.pars_vowels(f_0, 13, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f14.pars_vowels(f_0, 14, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f15.pars_vowels(f_0, 15, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f16.pars_vowels(f_0, 16, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f17.pars_vowels(f_0, 17, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f18.pars_vowels(f_0, 18, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f19.pars_vowels(f_0, 19, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f20.pars_vowels(f_0, 20, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f21.pars_vowels(f_0, 21, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f22.pars_vowels(f_0, 22, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f23.pars_vowels(f_0, 23, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f24.pars_vowels(f_0, 24, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f25.pars_vowels(f_0, 25, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f26.pars_vowels(f_0, 26, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f27.pars_vowels(f_0, 27, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f28.pars_vowels(f_0, 28, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f29.pars_vowels(f_0, 29, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f30.pars_vowels(f_0, 30, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f31.pars_vowels(f_0, 31, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f32.pars_vowels(f_0, 32, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f33.pars_vowels(f_0, 33, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f34.pars_vowels(f_0, 34, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f35.pars_vowels(f_0, 35, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f36.pars_vowels(f_0, 36, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f37.pars_vowels(f_0, 37, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f38.pars_vowels(f_0, 38, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f39.pars_vowels(f_0, 39, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f40.pars_vowels(f_0, 40, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f41.pars_vowels(f_0, 41, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f42.pars_vowels(f_0, 42, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f43.pars_vowels(f_0, 43, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f44.pars_vowels(f_0, 44, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f45.pars_vowels(f_0, 45, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f46.pars_vowels(f_0, 46, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f47.pars_vowels(f_0, 47, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f48.pars_vowels(f_0, 48, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f49.pars_vowels(f_0, 49, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f50.pars_vowels(f_0, 50, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f51.pars_vowels(f_0, 51, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f52.pars_vowels(f_0, 52, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f53.pars_vowels(f_0, 53, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f54.pars_vowels(f_0, 54, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f55.pars_vowels(f_0, 55, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f56.pars_vowels(f_0, 56, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f57.pars_vowels(f_0, 57, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f58.pars_vowels(f_0, 58, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f59.pars_vowels(f_0, 59, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f60.pars_vowels(f_0, 60, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f61.pars_vowels(f_0, 61, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f62.pars_vowels(f_0, 62, spectrum_a, spectrum_b, spectrum_frac);
    used_partials += f63.pars_vowels(f_0, 63, spectrum_a, spectrum_b, spectrum_frac);
  ) : ( model == 10 ) ? (
    used_partials += f1.pars_raw(f_0, 1);
    used_partials += f2.pars_raw(f_0, 2);
    used_partials += f3.pars_raw(f_0, 3);
    used_partials += f4.pars_raw(f_0, 4);
    used_partials += f5.pars_raw(f_0, 5);
    used_partials += f6.pars_raw(f_0, 6);
    used_partials += f7.pars_raw(f_0, 7);
    used_partials += f8.pars_raw(f_0, 8);
    used_partials += f9.pars_raw(f_0, 9);
    used_partials += f10.pars_raw(f_0, 10);
    used_partials += f11.pars_raw(f_0, 11);
    used_partials += f12.pars_raw(f_0, 12);
    used_partials += f13.pars_raw(f_0, 13);
    used_partials += f14.pars_raw(f_0, 14);
    used_partials += f15.pars_raw(f_0, 15);
    used_partials += f16.pars_raw(f_0, 16);
    used_partials += f17.pars_raw(f_0, 17);
    used_partials += f18.pars_raw(f_0, 18);
    used_partials += f19.pars_raw(f_0, 19);
    used_partials += f20.pars_raw(f_0, 20);
    used_partials += f21.pars_raw(f_0, 21);
    used_partials += f22.pars_raw(f_0, 22);
    used_partials += f23.pars_raw(f_0, 23);
    used_partials += f24.pars_raw(f_0, 24);
    used_partials += f25.pars_raw(f_0, 25);
    used_partials += f26.pars_raw(f_0, 26);
    used_partials += f27.pars_raw(f_0, 27);
    used_partials += f28.pars_raw(f_0, 28);
    used_partials += f29.pars_raw(f_0, 29);
    used_partials += f30.pars_raw(f_0, 30);
    used_partials += f31.pars_raw(f_0, 31);
    used_partials += f32.pars_raw(f_0, 32);
    used_partials += f33.pars_raw(f_0, 33);
    used_partials += f34.pars_raw(f_0, 34);
    used_partials += f35.pars_raw(f_0, 35);
    used_partials += f36.pars_raw(f_0, 36);
    used_partials += f37.pars_raw(f_0, 37);
    used_partials += f38.pars_raw(f_0, 38);
    used_partials += f39.pars_raw(f_0, 39);
    used_partials += f40.pars_raw(f_0, 40);
    used_partials += f41.pars_raw(f_0, 41);
    used_partials += f42.pars_raw(f_0, 42);
    used_partials += f43.pars_raw(f_0, 43);
    used_partials += f44.pars_raw(f_0, 44);
    used_partials += f45.pars_raw(f_0, 45);
    used_partials += f46.pars_raw(f_0, 46);
    used_partials += f47.pars_raw(f_0, 47);
    used_partials += f48.pars_raw(f_0, 48);
    used_partials += f49.pars_raw(f_0, 49);
    used_partials += f50.pars_raw(f_0, 50);
    used_partials += f51.pars_raw(f_0, 51);
    used_partials += f52.pars_raw(f_0, 52);
    used_partials += f53.pars_raw(f_0, 53);
    used_partials += f54.pars_raw(f_0, 54);
    used_partials += f55.pars_raw(f_0, 55);
    used_partials += f56.pars_raw(f_0, 56);
    used_partials += f57.pars_raw(f_0, 57);
    used_partials += f58.pars_raw(f_0, 58);
    used_partials += f59.pars_raw(f_0, 59);
    used_partials += f60.pars_raw(f_0, 60);
    used_partials += f61.pars_raw(f_0, 61);
    used_partials += f62.pars_raw(f_0, 62);
    used_partials += f63.pars_raw(f_0, 63);
  ) : ( model == 11 ) ? (
    /* Unpack data */
    ptr = custom_partial_mem;
    ptr = (m_freq_relative = ptr) + MAX_CUSTOM_PARTIALS;
    ptr = (m_freq_relative2 = ptr) + MAX_CUSTOM_PARTIALS;
    ptr = (m_freq_abs = ptr) + MAX_CUSTOM_PARTIALS;
    ptr = (m_freq_abs2 = ptr) + MAX_CUSTOM_PARTIALS;
    ptr = (m_decay = ptr) + MAX_CUSTOM_PARTIALS;
    ptr = (m_decay2 = ptr) + MAX_CUSTOM_PARTIALS;
    ptr = (m_amplitude = ptr) + MAX_CUSTOM_PARTIALS;
    ptr = (m_amplitude2 = ptr) + MAX_CUSTOM_PARTIALS;
    
    // Sorry devs who see this. Mistakes of the past ;_;
    inharm_01 = 0.25 * inharmonic + 1; // inharmonic - Value between -4 and 0 (linearly mapped) => [0, 1]
    damp_01 = 0.2 * freq_damp + 1.2; // freq_damp - Value between -6 and -1 (linearly mapped) => [0, 1]
    
    used_partials += f1.pars_memory(f_0, 1, m_freq_relative[0] * (1.0 - inharm_01) + m_freq_relative2[0] * inharm_01, m_freq_abs[0] * (1.0 - inharm_01) + m_freq_abs2[0] * inharm_01, m_amplitude[0] * (1.0 - rel_position) + m_amplitude2[0] * rel_position, m_decay[0] * (1.0 - damp_01) + m_decay2[0] * damp_01);
    used_partials += f2.pars_memory(f_0, 2, m_freq_relative[1] * (1.0 - inharm_01) + m_freq_relative2[1] * inharm_01, m_freq_abs[1] * (1.0 - inharm_01) + m_freq_abs2[1] * inharm_01, m_amplitude[1] * (1.0 - rel_position) + m_amplitude2[1] * rel_position, m_decay[1] * (1.0 - damp_01) + m_decay2[1] * damp_01);
    used_partials += f3.pars_memory(f_0, 3, m_freq_relative[2] * (1.0 - inharm_01) + m_freq_relative2[2] * inharm_01, m_freq_abs[2] * (1.0 - inharm_01) + m_freq_abs2[2] * inharm_01, m_amplitude[2] * (1.0 - rel_position) + m_amplitude2[2] * rel_position, m_decay[2] * (1.0 - damp_01) + m_decay2[2] * damp_01);
    used_partials += f4.pars_memory(f_0, 4, m_freq_relative[3] * (1.0 - inharm_01) + m_freq_relative2[3] * inharm_01, m_freq_abs[3] * (1.0 - inharm_01) + m_freq_abs2[3] * inharm_01, m_amplitude[3] * (1.0 - rel_position) + m_amplitude2[3] * rel_position, m_decay[3] * (1.0 - damp_01) + m_decay2[3] * damp_01);
    used_partials += f5.pars_memory(f_0, 5, m_freq_relative[4] * (1.0 - inharm_01) + m_freq_relative2[4] * inharm_01, m_freq_abs[4] * (1.0 - inharm_01) + m_freq_abs2[4] * inharm_01, m_amplitude[4] * (1.0 - rel_position) + m_amplitude2[4] * rel_position, m_decay[4] * (1.0 - damp_01) + m_decay2[4] * damp_01);
    used_partials += f6.pars_memory(f_0, 6, m_freq_relative[5] * (1.0 - inharm_01) + m_freq_relative2[5] * inharm_01, m_freq_abs[5] * (1.0 - inharm_01) + m_freq_abs2[5] * inharm_01, m_amplitude[5] * (1.0 - rel_position) + m_amplitude2[5] * rel_position, m_decay[5] * (1.0 - damp_01) + m_decay2[5] * damp_01);
    used_partials += f7.pars_memory(f_0, 7, m_freq_relative[6] * (1.0 - inharm_01) + m_freq_relative2[6] * inharm_01, m_freq_abs[6] * (1.0 - inharm_01) + m_freq_abs2[6] * inharm_01, m_amplitude[6] * (1.0 - rel_position) + m_amplitude2[6] * rel_position, m_decay[6] * (1.0 - damp_01) + m_decay2[6] * damp_01);
    used_partials += f8.pars_memory(f_0, 8, m_freq_relative[7] * (1.0 - inharm_01) + m_freq_relative2[7] * inharm_01, m_freq_abs[7] * (1.0 - inharm_01) + m_freq_abs2[7] * inharm_01, m_amplitude[7] * (1.0 - rel_position) + m_amplitude2[7] * rel_position, m_decay[7] * (1.0 - damp_01) + m_decay2[7] * damp_01);
    used_partials += f9.pars_memory(f_0, 9, m_freq_relative[8] * (1.0 - inharm_01) + m_freq_relative2[8] * inharm_01, m_freq_abs[8] * (1.0 - inharm_01) + m_freq_abs2[8] * inharm_01, m_amplitude[8] * (1.0 - rel_position) + m_amplitude2[8] * rel_position, m_decay[8] * (1.0 - damp_01) + m_decay2[8] * damp_01);
    used_partials += f10.pars_memory(f_0, 10, m_freq_relative[9] * (1.0 - inharm_01) + m_freq_relative2[9] * inharm_01, m_freq_abs[9] * (1.0 - inharm_01) + m_freq_abs2[9] * inharm_01, m_amplitude[9] * (1.0 - rel_position) + m_amplitude2[9] * rel_position, m_decay[9] * (1.0 - damp_01) + m_decay2[9] * damp_01);
    used_partials += f11.pars_memory(f_0, 11, m_freq_relative[10] * (1.0 - inharm_01) + m_freq_relative2[10] * inharm_01, m_freq_abs[10] * (1.0 - inharm_01) + m_freq_abs2[10] * inharm_01, m_amplitude[10] * (1.0 - rel_position) + m_amplitude2[10] * rel_position, m_decay[10] * (1.0 - damp_01) + m_decay2[10] * damp_01);
    used_partials += f12.pars_memory(f_0, 12, m_freq_relative[11] * (1.0 - inharm_01) + m_freq_relative2[11] * inharm_01, m_freq_abs[11] * (1.0 - inharm_01) + m_freq_abs2[11] * inharm_01, m_amplitude[11] * (1.0 - rel_position) + m_amplitude2[11] * rel_position, m_decay[11] * (1.0 - damp_01) + m_decay2[11] * damp_01);
    used_partials += f13.pars_memory(f_0, 13, m_freq_relative[12] * (1.0 - inharm_01) + m_freq_relative2[12] * inharm_01, m_freq_abs[12] * (1.0 - inharm_01) + m_freq_abs2[12] * inharm_01, m_amplitude[12] * (1.0 - rel_position) + m_amplitude2[12] * rel_position, m_decay[12] * (1.0 - damp_01) + m_decay2[12] * damp_01);
    used_partials += f14.pars_memory(f_0, 14, m_freq_relative[13] * (1.0 - inharm_01) + m_freq_relative2[13] * inharm_01, m_freq_abs[13] * (1.0 - inharm_01) + m_freq_abs2[13] * inharm_01, m_amplitude[13] * (1.0 - rel_position) + m_amplitude2[13] * rel_position, m_decay[13] * (1.0 - damp_01) + m_decay2[13] * damp_01);
    used_partials += f15.pars_memory(f_0, 15, m_freq_relative[14] * (1.0 - inharm_01) + m_freq_relative2[14] * inharm_01, m_freq_abs[14] * (1.0 - inharm_01) + m_freq_abs2[14] * inharm_01, m_amplitude[14] * (1.0 - rel_position) + m_amplitude2[14] * rel_position, m_decay[14] * (1.0 - damp_01) + m_decay2[14] * damp_01);
    used_partials += f16.pars_memory(f_0, 16, m_freq_relative[15] * (1.0 - inharm_01) + m_freq_relative2[15] * inharm_01, m_freq_abs[15] * (1.0 - inharm_01) + m_freq_abs2[15] * inharm_01, m_amplitude[15] * (1.0 - rel_position) + m_amplitude2[15] * rel_position, m_decay[15] * (1.0 - damp_01) + m_decay2[15] * damp_01);
    used_partials += f17.pars_memory(f_0, 17, m_freq_relative[16] * (1.0 - inharm_01) + m_freq_relative2[16] * inharm_01, m_freq_abs[16] * (1.0 - inharm_01) + m_freq_abs2[16] * inharm_01, m_amplitude[16] * (1.0 - rel_position) + m_amplitude2[16] * rel_position, m_decay[16] * (1.0 - damp_01) + m_decay2[16] * damp_01);
    used_partials += f18.pars_memory(f_0, 18, m_freq_relative[17] * (1.0 - inharm_01) + m_freq_relative2[17] * inharm_01, m_freq_abs[17] * (1.0 - inharm_01) + m_freq_abs2[17] * inharm_01, m_amplitude[17] * (1.0 - rel_position) + m_amplitude2[17] * rel_position, m_decay[17] * (1.0 - damp_01) + m_decay2[17] * damp_01);
    used_partials += f19.pars_memory(f_0, 19, m_freq_relative[18] * (1.0 - inharm_01) + m_freq_relative2[18] * inharm_01, m_freq_abs[18] * (1.0 - inharm_01) + m_freq_abs2[18] * inharm_01, m_amplitude[18] * (1.0 - rel_position) + m_amplitude2[18] * rel_position, m_decay[18] * (1.0 - damp_01) + m_decay2[18] * damp_01);
    used_partials += f20.pars_memory(f_0, 20, m_freq_relative[19] * (1.0 - inharm_01) + m_freq_relative2[19] * inharm_01, m_freq_abs[19] * (1.0 - inharm_01) + m_freq_abs2[19] * inharm_01, m_amplitude[19] * (1.0 - rel_position) + m_amplitude2[19] * rel_position, m_decay[19] * (1.0 - damp_01) + m_decay2[19] * damp_01);
    used_partials += f21.pars_memory(f_0, 21, m_freq_relative[20] * (1.0 - inharm_01) + m_freq_relative2[20] * inharm_01, m_freq_abs[20] * (1.0 - inharm_01) + m_freq_abs2[20] * inharm_01, m_amplitude[20] * (1.0 - rel_position) + m_amplitude2[20] * rel_position, m_decay[20] * (1.0 - damp_01) + m_decay2[20] * damp_01);
    used_partials += f22.pars_memory(f_0, 22, m_freq_relative[21] * (1.0 - inharm_01) + m_freq_relative2[21] * inharm_01, m_freq_abs[21] * (1.0 - inharm_01) + m_freq_abs2[21] * inharm_01, m_amplitude[21] * (1.0 - rel_position) + m_amplitude2[21] * rel_position, m_decay[21] * (1.0 - damp_01) + m_decay2[21] * damp_01);
    used_partials += f23.pars_memory(f_0, 23, m_freq_relative[22] * (1.0 - inharm_01) + m_freq_relative2[22] * inharm_01, m_freq_abs[22] * (1.0 - inharm_01) + m_freq_abs2[22] * inharm_01, m_amplitude[22] * (1.0 - rel_position) + m_amplitude2[22] * rel_position, m_decay[22] * (1.0 - damp_01) + m_decay2[22] * damp_01);
    used_partials += f24.pars_memory(f_0, 24, m_freq_relative[23] * (1.0 - inharm_01) + m_freq_relative2[23] * inharm_01, m_freq_abs[23] * (1.0 - inharm_01) + m_freq_abs2[23] * inharm_01, m_amplitude[23] * (1.0 - rel_position) + m_amplitude2[23] * rel_position, m_decay[23] * (1.0 - damp_01) + m_decay2[23] * damp_01);
    used_partials += f25.pars_memory(f_0, 25, m_freq_relative[24] * (1.0 - inharm_01) + m_freq_relative2[24] * inharm_01, m_freq_abs[24] * (1.0 - inharm_01) + m_freq_abs2[24] * inharm_01, m_amplitude[24] * (1.0 - rel_position) + m_amplitude2[24] * rel_position, m_decay[24] * (1.0 - damp_01) + m_decay2[24] * damp_01);
    used_partials += f26.pars_memory(f_0, 26, m_freq_relative[25] * (1.0 - inharm_01) + m_freq_relative2[25] * inharm_01, m_freq_abs[25] * (1.0 - inharm_01) + m_freq_abs2[25] * inharm_01, m_amplitude[25] * (1.0 - rel_position) + m_amplitude2[25] * rel_position, m_decay[25] * (1.0 - damp_01) + m_decay2[25] * damp_01);
    used_partials += f27.pars_memory(f_0, 27, m_freq_relative[26] * (1.0 - inharm_01) + m_freq_relative2[26] * inharm_01, m_freq_abs[26] * (1.0 - inharm_01) + m_freq_abs2[26] * inharm_01, m_amplitude[26] * (1.0 - rel_position) + m_amplitude2[26] * rel_position, m_decay[26] * (1.0 - damp_01) + m_decay2[26] * damp_01);
    used_partials += f28.pars_memory(f_0, 28, m_freq_relative[27] * (1.0 - inharm_01) + m_freq_relative2[27] * inharm_01, m_freq_abs[27] * (1.0 - inharm_01) + m_freq_abs2[27] * inharm_01, m_amplitude[27] * (1.0 - rel_position) + m_amplitude2[27] * rel_position, m_decay[27] * (1.0 - damp_01) + m_decay2[27] * damp_01);
    used_partials += f29.pars_memory(f_0, 29, m_freq_relative[28] * (1.0 - inharm_01) + m_freq_relative2[28] * inharm_01, m_freq_abs[28] * (1.0 - inharm_01) + m_freq_abs2[28] * inharm_01, m_amplitude[28] * (1.0 - rel_position) + m_amplitude2[28] * rel_position, m_decay[28] * (1.0 - damp_01) + m_decay2[28] * damp_01);
    used_partials += f30.pars_memory(f_0, 30, m_freq_relative[29] * (1.0 - inharm_01) + m_freq_relative2[29] * inharm_01, m_freq_abs[29] * (1.0 - inharm_01) + m_freq_abs2[29] * inharm_01, m_amplitude[29] * (1.0 - rel_position) + m_amplitude2[29] * rel_position, m_decay[29] * (1.0 - damp_01) + m_decay2[29] * damp_01);
    used_partials += f31.pars_memory(f_0, 31, m_freq_relative[30] * (1.0 - inharm_01) + m_freq_relative2[30] * inharm_01, m_freq_abs[30] * (1.0 - inharm_01) + m_freq_abs2[30] * inharm_01, m_amplitude[30] * (1.0 - rel_position) + m_amplitude2[30] * rel_position, m_decay[30] * (1.0 - damp_01) + m_decay2[30] * damp_01);
    used_partials += f32.pars_memory(f_0, 32, m_freq_relative[31] * (1.0 - inharm_01) + m_freq_relative2[31] * inharm_01, m_freq_abs[31] * (1.0 - inharm_01) + m_freq_abs2[31] * inharm_01, m_amplitude[31] * (1.0 - rel_position) + m_amplitude2[31] * rel_position, m_decay[31] * (1.0 - damp_01) + m_decay2[31] * damp_01);
    used_partials += f33.pars_memory(f_0, 33, m_freq_relative[32] * (1.0 - inharm_01) + m_freq_relative2[32] * inharm_01, m_freq_abs[32] * (1.0 - inharm_01) + m_freq_abs2[32] * inharm_01, m_amplitude[32] * (1.0 - rel_position) + m_amplitude2[32] * rel_position, m_decay[32] * (1.0 - damp_01) + m_decay2[32] * damp_01);
    used_partials += f34.pars_memory(f_0, 34, m_freq_relative[33] * (1.0 - inharm_01) + m_freq_relative2[33] * inharm_01, m_freq_abs[33] * (1.0 - inharm_01) + m_freq_abs2[33] * inharm_01, m_amplitude[33] * (1.0 - rel_position) + m_amplitude2[33] * rel_position, m_decay[33] * (1.0 - damp_01) + m_decay2[33] * damp_01);
    used_partials += f35.pars_memory(f_0, 35, m_freq_relative[34] * (1.0 - inharm_01) + m_freq_relative2[34] * inharm_01, m_freq_abs[34] * (1.0 - inharm_01) + m_freq_abs2[34] * inharm_01, m_amplitude[34] * (1.0 - rel_position) + m_amplitude2[34] * rel_position, m_decay[34] * (1.0 - damp_01) + m_decay2[34] * damp_01);
    used_partials += f36.pars_memory(f_0, 36, m_freq_relative[35] * (1.0 - inharm_01) + m_freq_relative2[35] * inharm_01, m_freq_abs[35] * (1.0 - inharm_01) + m_freq_abs2[35] * inharm_01, m_amplitude[35] * (1.0 - rel_position) + m_amplitude2[35] * rel_position, m_decay[35] * (1.0 - damp_01) + m_decay2[35] * damp_01);
    used_partials += f37.pars_memory(f_0, 37, m_freq_relative[36] * (1.0 - inharm_01) + m_freq_relative2[36] * inharm_01, m_freq_abs[36] * (1.0 - inharm_01) + m_freq_abs2[36] * inharm_01, m_amplitude[36] * (1.0 - rel_position) + m_amplitude2[36] * rel_position, m_decay[36] * (1.0 - damp_01) + m_decay2[36] * damp_01);
    used_partials += f38.pars_memory(f_0, 38, m_freq_relative[37] * (1.0 - inharm_01) + m_freq_relative2[37] * inharm_01, m_freq_abs[37] * (1.0 - inharm_01) + m_freq_abs2[37] * inharm_01, m_amplitude[37] * (1.0 - rel_position) + m_amplitude2[37] * rel_position, m_decay[37] * (1.0 - damp_01) + m_decay2[37] * damp_01);
    used_partials += f39.pars_memory(f_0, 39, m_freq_relative[38] * (1.0 - inharm_01) + m_freq_relative2[38] * inharm_01, m_freq_abs[38] * (1.0 - inharm_01) + m_freq_abs2[38] * inharm_01, m_amplitude[38] * (1.0 - rel_position) + m_amplitude2[38] * rel_position, m_decay[38] * (1.0 - damp_01) + m_decay2[38] * damp_01);
    used_partials += f40.pars_memory(f_0, 40, m_freq_relative[39] * (1.0 - inharm_01) + m_freq_relative2[39] * inharm_01, m_freq_abs[39] * (1.0 - inharm_01) + m_freq_abs2[39] * inharm_01, m_amplitude[39] * (1.0 - rel_position) + m_amplitude2[39] * rel_position, m_decay[39] * (1.0 - damp_01) + m_decay2[39] * damp_01);
    used_partials += f41.pars_memory(f_0, 41, m_freq_relative[40] * (1.0 - inharm_01) + m_freq_relative2[40] * inharm_01, m_freq_abs[40] * (1.0 - inharm_01) + m_freq_abs2[40] * inharm_01, m_amplitude[40] * (1.0 - rel_position) + m_amplitude2[40] * rel_position, m_decay[40] * (1.0 - damp_01) + m_decay2[40] * damp_01);
    used_partials += f42.pars_memory(f_0, 42, m_freq_relative[41] * (1.0 - inharm_01) + m_freq_relative2[41] * inharm_01, m_freq_abs[41] * (1.0 - inharm_01) + m_freq_abs2[41] * inharm_01, m_amplitude[41] * (1.0 - rel_position) + m_amplitude2[41] * rel_position, m_decay[41] * (1.0 - damp_01) + m_decay2[41] * damp_01);
    used_partials += f43.pars_memory(f_0, 43, m_freq_relative[42] * (1.0 - inharm_01) + m_freq_relative2[42] * inharm_01, m_freq_abs[42] * (1.0 - inharm_01) + m_freq_abs2[42] * inharm_01, m_amplitude[42] * (1.0 - rel_position) + m_amplitude2[42] * rel_position, m_decay[42] * (1.0 - damp_01) + m_decay2[42] * damp_01);
    used_partials += f44.pars_memory(f_0, 44, m_freq_relative[43] * (1.0 - inharm_01) + m_freq_relative2[43] * inharm_01, m_freq_abs[43] * (1.0 - inharm_01) + m_freq_abs2[43] * inharm_01, m_amplitude[43] * (1.0 - rel_position) + m_amplitude2[43] * rel_position, m_decay[43] * (1.0 - damp_01) + m_decay2[43] * damp_01);
    used_partials += f45.pars_memory(f_0, 45, m_freq_relative[44] * (1.0 - inharm_01) + m_freq_relative2[44] * inharm_01, m_freq_abs[44] * (1.0 - inharm_01) + m_freq_abs2[44] * inharm_01, m_amplitude[44] * (1.0 - rel_position) + m_amplitude2[44] * rel_position, m_decay[44] * (1.0 - damp_01) + m_decay2[44] * damp_01);
    used_partials += f46.pars_memory(f_0, 46, m_freq_relative[45] * (1.0 - inharm_01) + m_freq_relative2[45] * inharm_01, m_freq_abs[45] * (1.0 - inharm_01) + m_freq_abs2[45] * inharm_01, m_amplitude[45] * (1.0 - rel_position) + m_amplitude2[45] * rel_position, m_decay[45] * (1.0 - damp_01) + m_decay2[45] * damp_01);
    used_partials += f47.pars_memory(f_0, 47, m_freq_relative[46] * (1.0 - inharm_01) + m_freq_relative2[46] * inharm_01, m_freq_abs[46] * (1.0 - inharm_01) + m_freq_abs2[46] * inharm_01, m_amplitude[46] * (1.0 - rel_position) + m_amplitude2[46] * rel_position, m_decay[46] * (1.0 - damp_01) + m_decay2[46] * damp_01);
    used_partials += f48.pars_memory(f_0, 48, m_freq_relative[47] * (1.0 - inharm_01) + m_freq_relative2[47] * inharm_01, m_freq_abs[47] * (1.0 - inharm_01) + m_freq_abs2[47] * inharm_01, m_amplitude[47] * (1.0 - rel_position) + m_amplitude2[47] * rel_position, m_decay[47] * (1.0 - damp_01) + m_decay2[47] * damp_01);
    used_partials += f49.pars_memory(f_0, 49, m_freq_relative[48] * (1.0 - inharm_01) + m_freq_relative2[48] * inharm_01, m_freq_abs[48] * (1.0 - inharm_01) + m_freq_abs2[48] * inharm_01, m_amplitude[48] * (1.0 - rel_position) + m_amplitude2[48] * rel_position, m_decay[48] * (1.0 - damp_01) + m_decay2[48] * damp_01);
    used_partials += f50.pars_memory(f_0, 50, m_freq_relative[49] * (1.0 - inharm_01) + m_freq_relative2[49] * inharm_01, m_freq_abs[49] * (1.0 - inharm_01) + m_freq_abs2[49] * inharm_01, m_amplitude[49] * (1.0 - rel_position) + m_amplitude2[49] * rel_position, m_decay[49] * (1.0 - damp_01) + m_decay2[49] * damp_01);
    used_partials += f51.pars_memory(f_0, 51, m_freq_relative[50] * (1.0 - inharm_01) + m_freq_relative2[50] * inharm_01, m_freq_abs[50] * (1.0 - inharm_01) + m_freq_abs2[50] * inharm_01, m_amplitude[50] * (1.0 - rel_position) + m_amplitude2[50] * rel_position, m_decay[50] * (1.0 - damp_01) + m_decay2[50] * damp_01);
    used_partials += f52.pars_memory(f_0, 52, m_freq_relative[51] * (1.0 - inharm_01) + m_freq_relative2[51] * inharm_01, m_freq_abs[51] * (1.0 - inharm_01) + m_freq_abs2[51] * inharm_01, m_amplitude[51] * (1.0 - rel_position) + m_amplitude2[51] * rel_position, m_decay[51] * (1.0 - damp_01) + m_decay2[51] * damp_01);
    used_partials += f53.pars_memory(f_0, 53, m_freq_relative[52] * (1.0 - inharm_01) + m_freq_relative2[52] * inharm_01, m_freq_abs[52] * (1.0 - inharm_01) + m_freq_abs2[52] * inharm_01, m_amplitude[52] * (1.0 - rel_position) + m_amplitude2[52] * rel_position, m_decay[52] * (1.0 - damp_01) + m_decay2[52] * damp_01);
    used_partials += f54.pars_memory(f_0, 54, m_freq_relative[53] * (1.0 - inharm_01) + m_freq_relative2[53] * inharm_01, m_freq_abs[53] * (1.0 - inharm_01) + m_freq_abs2[53] * inharm_01, m_amplitude[53] * (1.0 - rel_position) + m_amplitude2[53] * rel_position, m_decay[53] * (1.0 - damp_01) + m_decay2[53] * damp_01);
    used_partials += f55.pars_memory(f_0, 55, m_freq_relative[54] * (1.0 - inharm_01) + m_freq_relative2[54] * inharm_01, m_freq_abs[54] * (1.0 - inharm_01) + m_freq_abs2[54] * inharm_01, m_amplitude[54] * (1.0 - rel_position) + m_amplitude2[54] * rel_position, m_decay[54] * (1.0 - damp_01) + m_decay2[54] * damp_01);
    used_partials += f56.pars_memory(f_0, 56, m_freq_relative[55] * (1.0 - inharm_01) + m_freq_relative2[55] * inharm_01, m_freq_abs[55] * (1.0 - inharm_01) + m_freq_abs2[55] * inharm_01, m_amplitude[55] * (1.0 - rel_position) + m_amplitude2[55] * rel_position, m_decay[55] * (1.0 - damp_01) + m_decay2[55] * damp_01);
    used_partials += f57.pars_memory(f_0, 57, m_freq_relative[56] * (1.0 - inharm_01) + m_freq_relative2[56] * inharm_01, m_freq_abs[56] * (1.0 - inharm_01) + m_freq_abs2[56] * inharm_01, m_amplitude[56] * (1.0 - rel_position) + m_amplitude2[56] * rel_position, m_decay[56] * (1.0 - damp_01) + m_decay2[56] * damp_01);
    used_partials += f58.pars_memory(f_0, 58, m_freq_relative[57] * (1.0 - inharm_01) + m_freq_relative2[57] * inharm_01, m_freq_abs[57] * (1.0 - inharm_01) + m_freq_abs2[57] * inharm_01, m_amplitude[57] * (1.0 - rel_position) + m_amplitude2[57] * rel_position, m_decay[57] * (1.0 - damp_01) + m_decay2[57] * damp_01);
    used_partials += f59.pars_memory(f_0, 59, m_freq_relative[58] * (1.0 - inharm_01) + m_freq_relative2[58] * inharm_01, m_freq_abs[58] * (1.0 - inharm_01) + m_freq_abs2[58] * inharm_01, m_amplitude[58] * (1.0 - rel_position) + m_amplitude2[58] * rel_position, m_decay[58] * (1.0 - damp_01) + m_decay2[58] * damp_01);
    used_partials += f60.pars_memory(f_0, 60, m_freq_relative[59] * (1.0 - inharm_01) + m_freq_relative2[59] * inharm_01, m_freq_abs[59] * (1.0 - inharm_01) + m_freq_abs2[59] * inharm_01, m_amplitude[59] * (1.0 - rel_position) + m_amplitude2[59] * rel_position, m_decay[59] * (1.0 - damp_01) + m_decay2[59] * damp_01);
    used_partials += f61.pars_memory(f_0, 61, m_freq_relative[60] * (1.0 - inharm_01) + m_freq_relative2[60] * inharm_01, m_freq_abs[60] * (1.0 - inharm_01) + m_freq_abs2[60] * inharm_01, m_amplitude[60] * (1.0 - rel_position) + m_amplitude2[60] * rel_position, m_decay[60] * (1.0 - damp_01) + m_decay2[60] * damp_01);
    used_partials += f62.pars_memory(f_0, 62, m_freq_relative[61] * (1.0 - inharm_01) + m_freq_relative2[61] * inharm_01, m_freq_abs[61] * (1.0 - inharm_01) + m_freq_abs2[61] * inharm_01, m_amplitude[61] * (1.0 - rel_position) + m_amplitude2[61] * rel_position, m_decay[61] * (1.0 - damp_01) + m_decay2[61] * damp_01);
    used_partials += f63.pars_memory(f_0, 63, m_freq_relative[62] * (1.0 - inharm_01) + m_freq_relative2[62] * inharm_01, m_freq_abs[62] * (1.0 - inharm_01) + m_freq_abs2[62] * inharm_01, m_amplitude[62] * (1.0 - rel_position) + m_amplitude2[62] * rel_position, m_decay[62] * (1.0 - damp_01) + m_decay2[62] * damp_01);
  ) : ( model == 12 ) ? (
    /* Unpack data */
    ptr = custom_partial_mem;
    ptr = (m_freq_relative = ptr) + 2 * MAX_CUSTOM_PARTIALS;
    ptr = (m_freq_abs = ptr) + 2 * MAX_CUSTOM_PARTIALS;
    ptr = (m_decay = ptr) + 2 * MAX_CUSTOM_PARTIALS;
    ptr = (m_amplitude = ptr) + 2 * MAX_CUSTOM_PARTIALS;
    
    used_partials += f1.pars_memory_b(f_0, 1, m_freq_relative[0], m_freq_abs[0], m_amplitude[0], m_decay[0]);
    used_partials += f2.pars_memory_b(f_0, 2, m_freq_relative[1], m_freq_abs[1], m_amplitude[1], m_decay[1]);
    used_partials += f3.pars_memory_b(f_0, 3, m_freq_relative[2], m_freq_abs[2], m_amplitude[2], m_decay[2]);
    used_partials += f4.pars_memory_b(f_0, 4, m_freq_relative[3], m_freq_abs[3], m_amplitude[3], m_decay[3]);
    used_partials += f5.pars_memory_b(f_0, 5, m_freq_relative[4], m_freq_abs[4], m_amplitude[4], m_decay[4]);
    used_partials += f6.pars_memory_b(f_0, 6, m_freq_relative[5], m_freq_abs[5], m_amplitude[5], m_decay[5]);
    used_partials += f7.pars_memory_b(f_0, 7, m_freq_relative[6], m_freq_abs[6], m_amplitude[6], m_decay[6]);
    used_partials += f8.pars_memory_b(f_0, 8, m_freq_relative[7], m_freq_abs[7], m_amplitude[7], m_decay[7]);
    used_partials += f9.pars_memory_b(f_0, 9, m_freq_relative[8], m_freq_abs[8], m_amplitude[8], m_decay[8]);
    used_partials += f10.pars_memory_b(f_0, 10, m_freq_relative[9], m_freq_abs[9], m_amplitude[9], m_decay[9]);
    used_partials += f11.pars_memory_b(f_0, 11, m_freq_relative[10], m_freq_abs[10], m_amplitude[10], m_decay[10]);
    used_partials += f12.pars_memory_b(f_0, 12, m_freq_relative[11], m_freq_abs[11], m_amplitude[11], m_decay[11]);
    used_partials += f13.pars_memory_b(f_0, 13, m_freq_relative[12], m_freq_abs[12], m_amplitude[12], m_decay[12]);
    used_partials += f14.pars_memory_b(f_0, 14, m_freq_relative[13], m_freq_abs[13], m_amplitude[13], m_decay[13]);
    used_partials += f15.pars_memory_b(f_0, 15, m_freq_relative[14], m_freq_abs[14], m_amplitude[14], m_decay[14]);
    used_partials += f16.pars_memory_b(f_0, 16, m_freq_relative[15], m_freq_abs[15], m_amplitude[15], m_decay[15]);
    used_partials += f17.pars_memory_b(f_0, 17, m_freq_relative[16], m_freq_abs[16], m_amplitude[16], m_decay[16]);
    used_partials += f18.pars_memory_b(f_0, 18, m_freq_relative[17], m_freq_abs[17], m_amplitude[17], m_decay[17]);
    used_partials += f19.pars_memory_b(f_0, 19, m_freq_relative[18], m_freq_abs[18], m_amplitude[18], m_decay[18]);
    used_partials += f20.pars_memory_b(f_0, 20, m_freq_relative[19], m_freq_abs[19], m_amplitude[19], m_decay[19]);
    used_partials += f21.pars_memory_b(f_0, 21, m_freq_relative[20], m_freq_abs[20], m_amplitude[20], m_decay[20]);
    used_partials += f22.pars_memory_b(f_0, 22, m_freq_relative[21], m_freq_abs[21], m_amplitude[21], m_decay[21]);
    used_partials += f23.pars_memory_b(f_0, 23, m_freq_relative[22], m_freq_abs[22], m_amplitude[22], m_decay[22]);
    used_partials += f24.pars_memory_b(f_0, 24, m_freq_relative[23], m_freq_abs[23], m_amplitude[23], m_decay[23]);
    used_partials += f25.pars_memory_b(f_0, 25, m_freq_relative[24], m_freq_abs[24], m_amplitude[24], m_decay[24]);
    used_partials += f26.pars_memory_b(f_0, 26, m_freq_relative[25], m_freq_abs[25], m_amplitude[25], m_decay[25]);
    used_partials += f27.pars_memory_b(f_0, 27, m_freq_relative[26], m_freq_abs[26], m_amplitude[26], m_decay[26]);
    used_partials += f28.pars_memory_b(f_0, 28, m_freq_relative[27], m_freq_abs[27], m_amplitude[27], m_decay[27]);
    used_partials += f29.pars_memory_b(f_0, 29, m_freq_relative[28], m_freq_abs[28], m_amplitude[28], m_decay[28]);
    used_partials += f30.pars_memory_b(f_0, 30, m_freq_relative[29], m_freq_abs[29], m_amplitude[29], m_decay[29]);
    used_partials += f31.pars_memory_b(f_0, 31, m_freq_relative[30], m_freq_abs[30], m_amplitude[30], m_decay[30]);
    used_partials += f32.pars_memory_b(f_0, 32, m_freq_relative[31], m_freq_abs[31], m_amplitude[31], m_decay[31]);
    used_partials += f33.pars_memory_b(f_0, 33, m_freq_relative[32], m_freq_abs[32], m_amplitude[32], m_decay[32]);
    used_partials += f34.pars_memory_b(f_0, 34, m_freq_relative[33], m_freq_abs[33], m_amplitude[33], m_decay[33]);
    used_partials += f35.pars_memory_b(f_0, 35, m_freq_relative[34], m_freq_abs[34], m_amplitude[34], m_decay[34]);
    used_partials += f36.pars_memory_b(f_0, 36, m_freq_relative[35], m_freq_abs[35], m_amplitude[35], m_decay[35]);
    used_partials += f37.pars_memory_b(f_0, 37, m_freq_relative[36], m_freq_abs[36], m_amplitude[36], m_decay[36]);
    used_partials += f38.pars_memory_b(f_0, 38, m_freq_relative[37], m_freq_abs[37], m_amplitude[37], m_decay[37]);
    used_partials += f39.pars_memory_b(f_0, 39, m_freq_relative[38], m_freq_abs[38], m_amplitude[38], m_decay[38]);
    used_partials += f40.pars_memory_b(f_0, 40, m_freq_relative[39], m_freq_abs[39], m_amplitude[39], m_decay[39]);
    used_partials += f41.pars_memory_b(f_0, 41, m_freq_relative[40], m_freq_abs[40], m_amplitude[40], m_decay[40]);
    used_partials += f42.pars_memory_b(f_0, 42, m_freq_relative[41], m_freq_abs[41], m_amplitude[41], m_decay[41]);
    used_partials += f43.pars_memory_b(f_0, 43, m_freq_relative[42], m_freq_abs[42], m_amplitude[42], m_decay[42]);
    used_partials += f44.pars_memory_b(f_0, 44, m_freq_relative[43], m_freq_abs[43], m_amplitude[43], m_decay[43]);
    used_partials += f45.pars_memory_b(f_0, 45, m_freq_relative[44], m_freq_abs[44], m_amplitude[44], m_decay[44]);
    used_partials += f46.pars_memory_b(f_0, 46, m_freq_relative[45], m_freq_abs[45], m_amplitude[45], m_decay[45]);
    used_partials += f47.pars_memory_b(f_0, 47, m_freq_relative[46], m_freq_abs[46], m_amplitude[46], m_decay[46]);
    used_partials += f48.pars_memory_b(f_0, 48, m_freq_relative[47], m_freq_abs[47], m_amplitude[47], m_decay[47]);
    used_partials += f49.pars_memory_b(f_0, 49, m_freq_relative[48], m_freq_abs[48], m_amplitude[48], m_decay[48]);
    used_partials += f50.pars_memory_b(f_0, 50, m_freq_relative[49], m_freq_abs[49], m_amplitude[49], m_decay[49]);
    used_partials += f51.pars_memory_b(f_0, 51, m_freq_relative[50], m_freq_abs[50], m_amplitude[50], m_decay[50]);
    used_partials += f52.pars_memory_b(f_0, 52, m_freq_relative[51], m_freq_abs[51], m_amplitude[51], m_decay[51]);
    used_partials += f53.pars_memory_b(f_0, 53, m_freq_relative[52], m_freq_abs[52], m_amplitude[52], m_decay[52]);
    used_partials += f54.pars_memory_b(f_0, 54, m_freq_relative[53], m_freq_abs[53], m_amplitude[53], m_decay[53]);
    used_partials += f55.pars_memory_b(f_0, 55, m_freq_relative[54], m_freq_abs[54], m_amplitude[54], m_decay[54]);
    used_partials += f56.pars_memory_b(f_0, 56, m_freq_relative[55], m_freq_abs[55], m_amplitude[55], m_decay[55]);
    used_partials += f57.pars_memory_b(f_0, 57, m_freq_relative[56], m_freq_abs[56], m_amplitude[56], m_decay[56]);
    used_partials += f58.pars_memory_b(f_0, 58, m_freq_relative[57], m_freq_abs[57], m_amplitude[57], m_decay[57]);
    used_partials += f59.pars_memory_b(f_0, 59, m_freq_relative[58], m_freq_abs[58], m_amplitude[58], m_decay[58]);
    used_partials += f60.pars_memory_b(f_0, 60, m_freq_relative[59], m_freq_abs[59], m_amplitude[59], m_decay[59]);
    used_partials += f61.pars_memory_b(f_0, 61, m_freq_relative[60], m_freq_abs[60], m_amplitude[60], m_decay[60]);
    used_partials += f62.pars_memory_b(f_0, 62, m_freq_relative[61], m_freq_abs[61], m_amplitude[61], m_decay[61]);
    used_partials += f63.pars_memory_b(f_0, 63, m_freq_relative[62], m_freq_abs[62], m_amplitude[62], m_decay[62]);
  );
);

function eval_strizng_td()
global(f_h, f_hn, f_b)
instance(
  f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16,
  f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32,
  f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48,
  f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63,
)
local(hist)
(
  f1.tick(f_h);
  f2.tick(f_h);
  f3.tick(f_h);
  f4.tick(f_h);
  f5.tick(f_h);
  f6.tick(f_h);
  f7.tick(f_h);
  f8.tick(f_h);
  f9.tick(f_h);
  f10.tick(f_h);
  f11.tick(f_h);
  f12.tick(f_h);
  f13.tick(f_h);
  f14.tick(f_h);
  f15.tick(f_h);
  f16.tick(f_h);
  f17.tick(f_h);
  f18.tick(f_h);
  f19.tick(f_h);
  f20.tick(f_h);
  f21.tick(f_h);
  f22.tick(f_h);
  f23.tick(f_h);
  f24.tick(f_h);
  f25.tick(f_h);
  f26.tick(f_h);
  f27.tick(f_h);
  f28.tick(f_h);
  f29.tick(f_h);
  f30.tick(f_h);
  f31.tick(f_h);
  f32.tick(f_h);
  f33.tick(f_h);
  f34.tick(f_h);
  f35.tick(f_h);
  f36.tick(f_h);
  f37.tick(f_h);
  f38.tick(f_h);
  f39.tick(f_h);
  f40.tick(f_h);
  f41.tick(f_h);
  f42.tick(f_h);
  f43.tick(f_h);
  f44.tick(f_h);
  f45.tick(f_h);
  f46.tick(f_h);
  f47.tick(f_h);
  f48.tick(f_h);
  f49.tick(f_h);
  f50.tick(f_h);
  f51.tick(f_h);
  f52.tick(f_h);
  f53.tick(f_h);
  f54.tick(f_h);
  f55.tick(f_h);
  f56.tick(f_h);
  f57.tick(f_h);
  f58.tick(f_h);
  f59.tick(f_h);
  f60.tick(f_h);
  f61.tick(f_h);
  f62.tick(f_h);
  f63.tick(f_h);
);

function eval_string_td(f_h)
global(partials)
instance(
  f1u, f2u, f3u,
  f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63,
  f_hn, f_b, active,
)
local(hist)
(
  /*
  f1u.tick(f_h);
  f2u.tick(f_h);
  f3u.tick(f_h);
  */
  active = max(0.999 * active, max(f_hn, abs(f_h)));
  
  (active > 0.00000001) ? (
    f_hn = f_b = 0;
    hist = f1.yh; f1.yh = f1.y; f1.y = f1.win * f1.b * f_h - f1.a1 * f1.y - f1.a2 * hist; f_hn += f1.wout * f1.y; f_b += f1.y;
    hist = f2.yh; f2.yh = f2.y; f2.y = f2.win * f2.b * f_h - f2.a1 * f2.y - f2.a2 * hist; f_hn += f2.wout * f2.y; f_b += f2.y;
    hist = f3.yh; f3.yh = f3.y; f3.y = f3.win * f3.b * f_h - f3.a1 * f3.y - f3.a2 * hist; f_hn += f3.wout * f3.y; f_b += f3.y;
    hist = f4.yh; f4.yh = f4.y; f4.y = f4.win * f4.b * f_h - f4.a1 * f4.y - f4.a2 * hist; f_hn += f4.wout * f4.y; f_b += f4.y;
    hist = f5.yh; f5.yh = f5.y; f5.y = f5.win * f5.b * f_h - f5.a1 * f5.y - f5.a2 * hist; f_hn += f5.wout * f5.y; f_b += f5.y;
    hist = f6.yh; f6.yh = f6.y; f6.y = f6.win * f6.b * f_h - f6.a1 * f6.y - f6.a2 * hist; f_hn += f6.wout * f6.y; f_b += f6.y;
    hist = f7.yh; f7.yh = f7.y; f7.y = f7.win * f7.b * f_h - f7.a1 * f7.y - f7.a2 * hist; f_hn += f7.wout * f7.y; f_b += f7.y;
    hist = f8.yh; f8.yh = f8.y; f8.y = f8.win * f8.b * f_h - f8.a1 * f8.y - f8.a2 * hist; f_hn += f8.wout * f8.y; f_b += f8.y;
    hist = f9.yh; f9.yh = f9.y; f9.y = f9.win * f9.b * f_h - f9.a1 * f9.y - f9.a2 * hist; f_hn += f9.wout * f9.y; f_b += f9.y;
    hist = f10.yh; f10.yh = f10.y; f10.y = f10.win * f10.b * f_h - f10.a1 * f10.y - f10.a2 * hist; f_hn += f10.wout * f10.y; f_b += f10.y;
    hist = f11.yh; f11.yh = f11.y; f11.y = f11.win * f11.b * f_h - f11.a1 * f11.y - f11.a2 * hist; f_hn += f11.wout * f11.y; f_b += f11.y;
    hist = f12.yh; f12.yh = f12.y; f12.y = f12.win * f12.b * f_h - f12.a1 * f12.y - f12.a2 * hist; f_hn += f12.wout * f12.y; f_b += f12.y;
    hist = f13.yh; f13.yh = f13.y; f13.y = f13.win * f13.b * f_h - f13.a1 * f13.y - f13.a2 * hist; f_hn += f13.wout * f13.y; f_b += f13.y;
    hist = f14.yh; f14.yh = f14.y; f14.y = f14.win * f14.b * f_h - f14.a1 * f14.y - f14.a2 * hist; f_hn += f14.wout * f14.y; f_b += f14.y;
    hist = f15.yh; f15.yh = f15.y; f15.y = f15.win * f15.b * f_h - f15.a1 * f15.y - f15.a2 * hist; f_hn += f15.wout * f15.y; f_b += f15.y;
    hist = f16.yh; f16.yh = f16.y; f16.y = f16.win * f16.b * f_h - f16.a1 * f16.y - f16.a2 * hist; f_hn += f16.wout * f16.y; f_b += f16.y;
    (partials > 16) ? (
      hist = f17.yh; f17.yh = f17.y; f17.y = f17.win * f17.b * f_h - f17.a1 * f17.y - f17.a2 * hist; f_hn += f17.wout * f17.y; f_b += f17.y;
      hist = f18.yh; f18.yh = f18.y; f18.y = f18.win * f18.b * f_h - f18.a1 * f18.y - f18.a2 * hist; f_hn += f18.wout * f18.y; f_b += f18.y;
      hist = f19.yh; f19.yh = f19.y; f19.y = f19.win * f19.b * f_h - f19.a1 * f19.y - f19.a2 * hist; f_hn += f19.wout * f19.y; f_b += f19.y;
      hist = f20.yh; f20.yh = f20.y; f20.y = f20.win * f20.b * f_h - f20.a1 * f20.y - f20.a2 * hist; f_hn += f20.wout * f20.y; f_b += f20.y;
      hist = f21.yh; f21.yh = f21.y; f21.y = f21.win * f21.b * f_h - f21.a1 * f21.y - f21.a2 * hist; f_hn += f21.wout * f21.y; f_b += f21.y;
      hist = f22.yh; f22.yh = f22.y; f22.y = f22.win * f22.b * f_h - f22.a1 * f22.y - f22.a2 * hist; f_hn += f22.wout * f22.y; f_b += f22.y;
      hist = f23.yh; f23.yh = f23.y; f23.y = f23.win * f23.b * f_h - f23.a1 * f23.y - f23.a2 * hist; f_hn += f23.wout * f23.y; f_b += f23.y;
      hist = f24.yh; f24.yh = f24.y; f24.y = f24.win * f24.b * f_h - f24.a1 * f24.y - f24.a2 * hist; f_hn += f24.wout * f24.y; f_b += f24.y;
      hist = f25.yh; f25.yh = f25.y; f25.y = f25.win * f25.b * f_h - f25.a1 * f25.y - f25.a2 * hist; f_hn += f25.wout * f25.y; f_b += f25.y;
      hist = f26.yh; f26.yh = f26.y; f26.y = f26.win * f26.b * f_h - f26.a1 * f26.y - f26.a2 * hist; f_hn += f26.wout * f26.y; f_b += f26.y;
      hist = f27.yh; f27.yh = f27.y; f27.y = f27.win * f27.b * f_h - f27.a1 * f27.y - f27.a2 * hist; f_hn += f27.wout * f27.y; f_b += f27.y;
      hist = f28.yh; f28.yh = f28.y; f28.y = f28.win * f28.b * f_h - f28.a1 * f28.y - f28.a2 * hist; f_hn += f28.wout * f28.y; f_b += f28.y;
      hist = f29.yh; f29.yh = f29.y; f29.y = f29.win * f29.b * f_h - f29.a1 * f29.y - f29.a2 * hist; f_hn += f29.wout * f29.y; f_b += f29.y;
      hist = f30.yh; f30.yh = f30.y; f30.y = f30.win * f30.b * f_h - f30.a1 * f30.y - f30.a2 * hist; f_hn += f30.wout * f30.y; f_b += f30.y;
      hist = f31.yh; f31.yh = f31.y; f31.y = f31.win * f31.b * f_h - f31.a1 * f31.y - f31.a2 * hist; f_hn += f31.wout * f31.y; f_b += f31.y;
      hist = f32.yh; f32.yh = f32.y; f32.y = f32.win * f32.b * f_h - f32.a1 * f32.y - f32.a2 * hist; f_hn += f32.wout * f32.y; f_b += f32.y;
      (partials > 32) ? (
        hist = f33.yh; f33.yh = f33.y; f33.y = f33.win * f33.b * f_h - f33.a1 * f33.y - f33.a2 * hist; f_hn += f33.wout * f33.y; f_b += f33.y;
        hist = f34.yh; f34.yh = f34.y; f34.y = f34.win * f34.b * f_h - f34.a1 * f34.y - f34.a2 * hist; f_hn += f34.wout * f34.y; f_b += f34.y;
        hist = f35.yh; f35.yh = f35.y; f35.y = f35.win * f35.b * f_h - f35.a1 * f35.y - f35.a2 * hist; f_hn += f35.wout * f35.y; f_b += f35.y;
        hist = f36.yh; f36.yh = f36.y; f36.y = f36.win * f36.b * f_h - f36.a1 * f36.y - f36.a2 * hist; f_hn += f36.wout * f36.y; f_b += f36.y;
        hist = f37.yh; f37.yh = f37.y; f37.y = f37.win * f37.b * f_h - f37.a1 * f37.y - f37.a2 * hist; f_hn += f37.wout * f37.y; f_b += f37.y;
        hist = f38.yh; f38.yh = f38.y; f38.y = f38.win * f38.b * f_h - f38.a1 * f38.y - f38.a2 * hist; f_hn += f38.wout * f38.y; f_b += f38.y;
        hist = f39.yh; f39.yh = f39.y; f39.y = f39.win * f39.b * f_h - f39.a1 * f39.y - f39.a2 * hist; f_hn += f39.wout * f39.y; f_b += f39.y;
        hist = f40.yh; f40.yh = f40.y; f40.y = f40.win * f40.b * f_h - f40.a1 * f40.y - f40.a2 * hist; f_hn += f40.wout * f40.y; f_b += f40.y;
        hist = f41.yh; f41.yh = f41.y; f41.y = f41.win * f41.b * f_h - f41.a1 * f41.y - f41.a2 * hist; f_hn += f41.wout * f41.y; f_b += f41.y;
        hist = f42.yh; f42.yh = f42.y; f42.y = f42.win * f42.b * f_h - f42.a1 * f42.y - f42.a2 * hist; f_hn += f42.wout * f42.y; f_b += f42.y;
        hist = f43.yh; f43.yh = f43.y; f43.y = f43.win * f43.b * f_h - f43.a1 * f43.y - f43.a2 * hist; f_hn += f43.wout * f43.y; f_b += f43.y;
        hist = f44.yh; f44.yh = f44.y; f44.y = f44.win * f44.b * f_h - f44.a1 * f44.y - f44.a2 * hist; f_hn += f44.wout * f44.y; f_b += f44.y;
        hist = f45.yh; f45.yh = f45.y; f45.y = f45.win * f45.b * f_h - f45.a1 * f45.y - f45.a2 * hist; f_hn += f45.wout * f45.y; f_b += f45.y;
        hist = f46.yh; f46.yh = f46.y; f46.y = f46.win * f46.b * f_h - f46.a1 * f46.y - f46.a2 * hist; f_hn += f46.wout * f46.y; f_b += f46.y;
        hist = f47.yh; f47.yh = f47.y; f47.y = f47.win * f47.b * f_h - f47.a1 * f47.y - f47.a2 * hist; f_hn += f47.wout * f47.y; f_b += f47.y;
        hist = f48.yh; f48.yh = f48.y; f48.y = f48.win * f48.b * f_h - f48.a1 * f48.y - f48.a2 * hist; f_hn += f48.wout * f48.y; f_b += f48.y;
        (partials > 48) ? (
          hist = f49.yh; f49.yh = f49.y; f49.y = f49.win * f49.b * f_h - f49.a1 * f49.y - f49.a2 * hist; f_hn += f49.wout * f49.y; f_b += f49.y;
          hist = f50.yh; f50.yh = f50.y; f50.y = f50.win * f50.b * f_h - f50.a1 * f50.y - f50.a2 * hist; f_hn += f50.wout * f50.y; f_b += f50.y;
          hist = f51.yh; f51.yh = f51.y; f51.y = f51.win * f51.b * f_h - f51.a1 * f51.y - f51.a2 * hist; f_hn += f51.wout * f51.y; f_b += f51.y;
          hist = f52.yh; f52.yh = f52.y; f52.y = f52.win * f52.b * f_h - f52.a1 * f52.y - f52.a2 * hist; f_hn += f52.wout * f52.y; f_b += f52.y;
          hist = f53.yh; f53.yh = f53.y; f53.y = f53.win * f53.b * f_h - f53.a1 * f53.y - f53.a2 * hist; f_hn += f53.wout * f53.y; f_b += f53.y;
          hist = f54.yh; f54.yh = f54.y; f54.y = f54.win * f54.b * f_h - f54.a1 * f54.y - f54.a2 * hist; f_hn += f54.wout * f54.y; f_b += f54.y;
          hist = f55.yh; f55.yh = f55.y; f55.y = f55.win * f55.b * f_h - f55.a1 * f55.y - f55.a2 * hist; f_hn += f55.wout * f55.y; f_b += f55.y;
          hist = f56.yh; f56.yh = f56.y; f56.y = f56.win * f56.b * f_h - f56.a1 * f56.y - f56.a2 * hist; f_hn += f56.wout * f56.y; f_b += f56.y;
          hist = f57.yh; f57.yh = f57.y; f57.y = f57.win * f57.b * f_h - f57.a1 * f57.y - f57.a2 * hist; f_hn += f57.wout * f57.y; f_b += f57.y;
          hist = f58.yh; f58.yh = f58.y; f58.y = f58.win * f58.b * f_h - f58.a1 * f58.y - f58.a2 * hist; f_hn += f58.wout * f58.y; f_b += f58.y;
          hist = f59.yh; f59.yh = f59.y; f59.y = f59.win * f59.b * f_h - f59.a1 * f59.y - f59.a2 * hist; f_hn += f59.wout * f59.y; f_b += f59.y;
          hist = f60.yh; f60.yh = f60.y; f60.y = f60.win * f60.b * f_h - f60.a1 * f60.y - f60.a2 * hist; f_hn += f60.wout * f60.y; f_b += f60.y;
          hist = f61.yh; f61.yh = f61.y; f61.y = f61.win * f61.b * f_h - f61.a1 * f61.y - f61.a2 * hist; f_hn += f61.wout * f61.y; f_b += f61.y;
          hist = f62.yh; f62.yh = f62.y; f62.y = f62.win * f62.b * f_h - f62.a1 * f62.y - f62.a2 * hist; f_hn += f62.wout * f62.y; f_b += f62.y;
          hist = f63.yh; f63.yh = f63.y; f63.y = f63.win * f63.b * f_h - f63.a1 * f63.y - f63.a2 * hist; f_hn += f63.wout * f63.y; f_b += f63.y;
        );
      );
    );
  );
);


function init_linearSVF(freq, res)
  global(srate, slider54)
  local(g)
  instance(k, a1, a2, a3)
  (
    g = tan(.5 * freq);
    k = 2 - 2*res;
    
    a1 = 1/(1+g*(g+k));
    a2 = g*a1;
    a3 = g*a2;
  ); 


function eval_linearSVF_HP6(v0)
  global()
  local(v1, v2, v3)
  instance(ic1eq, ic2eq, ic3eq, ic4eq, ic5eq, ic6eq, ic7eq, ic8eq, ic9eq, ic10eq, ic11eq, ic12eq, k, a1, a2, a3)
  (
    v3 = v0 - ic2eq;
    v1 = a1 * ic1eq + a2 * v3;
    v2 = ic2eq + a2 * ic1eq + a3*v3;
    ic1eq = 2*v1 - ic1eq;
    ic2eq = 2*v2 - ic2eq;    
    
    v0 = v0 - k*v1 - v2;
    
    v3 = v0 - ic4eq;
    v1 = a1 * ic3eq + a2 * v3;
    v2 = ic4eq + a2 * ic3eq + a3*v3;
    ic3eq = 2*v1 - ic3eq;
    ic4eq = 2*v2 - ic4eq;    
    
    v0 = v0 - k*v1 - v2;
    
    v3 = v0 - ic6eq;
    v1 = a1 * ic5eq + a2 * v3;
    v2 = ic6eq + a2 * ic5eq + a3*v3;
    ic5eq = 2*v1 - ic5eq;
    ic6eq = 2*v2 - ic6eq;    
    
    v0 = v0 - k*v1 - v2;
    
    v3 = v0 - ic8eq;
    v1 = a1 * ic7eq + a2 * v3;
    v2 = ic8eq + a2 * ic7eq + a3*v3;
    ic7eq = 2*v1 - ic7eq;
    ic8eq = 2*v2 - ic8eq;    
    
    v0 = v0 - k*v1 - v2;
    
    v3 = v0 - ic10eq;
    v1 = a1 * ic9eq + a2 * v3;
    v2 = ic10eq + a2 * ic9eq + a3*v3;
    ic9eq = 2*v1 - ic9eq;
    ic10eq = 2*v2 - ic10eq;
    
    v0 = v0 - k*v1 - v2;
    
    v3 = v0 - ic12eq;
    v1 = a1 * ic11eq + a2 * v3;
    v2 = ic12eq + a2 * ic11eq + a3*v3;
    ic11eq = 2*v1 - ic11eq;
    ic12eq = 2*v2 - ic12eq;
    
    v0 - k*v1 - v2;
  );

