@init
function partial_func(f_0, partial_idx)
instance(new_freq, new_amp, new_damp)
local()
global(relative_position, base_damp, damp, freq_damp, f_damp, inharmonic, inharm, rel_position)
(
  // Input parameters are:
  //    f_0           - Fundamental
  //    partial_idx   - Index of this partial
  //
  // You can access the slider values from globals
  //
  //  Log slider comes in two flavors (can choose which one to use)
  //  The following variables are intended for use in presets. They are mapped to logarithmic
  //  values and take into account MIDI velocity.
  //    rel_position - Value between 0 and 1.
  //    base_damp - Value between 0.01 and 100 (logarithmically mapped)
  //    f_damp - Value between 0.000001 and 0.1 (logarithmically mapped)
  //    inharm - Stiffness/inharmonicity, value between 0.0001 and 1 (logarithmically mapped)
  //
  //  The following are also available, but never affected by velocity.
  //    relative_position - Value between 0 and 1 tied to the first knob
  //    damp - Value between -2 and 2 (linearly mapped)
  //    freq_damp - Value between -6 and -1 (linearly mapped)
  //    inharmonic - Value between -4 and 0 (linearly mapped)
  //
  // This function should set new_freq, new_amp and new_decay which will
  // be copied into the data structure used for synthesis. Note that Partials 
  // will not modify new_freq, new_amp or new_decay, so if you need access
  // to the last value of freq, amp or decay, you can just use that variable.
  new_amp = 1.0 / partial_idx * (0.5 + 0.5 * cos(10 * sqrt(1 + rel_position * partial_idx)));
  new_freq = f_0 * (partial_idx * pow(partial_idx, inharm));
  new_damp = base_damp + f_damp * new_freq * (1 + partial_idx / 1000);
);

