@init
//   max_partial = 1024;
function alloc_model_memory_block(freemem, max_partials)
instance()
global()
local(ptr, ds, ix)
(
  // Memory Layout is as follows: 
  //   Frequency Ratio (x2) | Abs Frequency Shift (x2) | Decay (x2) | Amplitude (x2)
  freemem[max_partials * 8 + 1] == 0 ? (
    /* Uninitialized, initialize it now */
    memset(freemem, max_partials * 2, 0);
    memset(freemem + max_partials * 2, max_partials * 2, 0);
    
    // Decays
    ds = 1 / (max_partials * 2);
    ptr = freemem + max_partials * 4;
    ix = 0; loop(max_partials, ptr[ix] = -2 - 80 * ds * ix; ix += 1; );
    ptr = freemem + max_partials * 5;
    ix = 0; loop(max_partials, ptr[ix] = -1 - ds * ix; ix += 1; );
    
    // Amplitudes
    ptr = freemem + max_partials * 6;
    ix = 0; loop(max_partials, ptr[ix] = - 1000 * ds * ix - 3 * ds * ix * ix; ix += 1; );
    ptr = freemem + max_partials * 7;
    ix = 0; loop(max_partials, ptr[ix] = - 1000 * ds * ix - 3 * ds * ix * ix; ix += 1; );
//    ptr = freemem + max_partials * 7;
//    ix = 1; loop(max_partials / 2, ptr[ix] = - 1000 * ds * ix - 30; ix += 2; );
    
    freemem[max_partials * 8 + 1] = 1;
  );
  freemem + max_partials * 8 + 64  
);


function _draw_array_draw_block(xc, yc, hc, bin_width, bin_count, idx, memory_block, memory_block2, min_value, inv_range, y_bottom, name, a1, a2)
local(xp, idx, value, value2)
global(gfx_a, gfx_x, gfx_y)
instance()
(
  xp = floor(xc);
  bin_width = floor(bin_width);
  y_bottom = floor(y_bottom);
  loop(bin_count,
    colormodel(idx / bin_count);
    gfx_a = 0.1;
    gfx_rect(xp, yc, bin_width - 2, hc, 1);
    // gfx_a = 0.6;
    // gfx_rect(xp, yc, bin_width - 2, hc, 0);
    
    memory_block2 ? (
      value2 = floor(min(hc, max(0, (memory_block2[idx] - min_value) * inv_range)));
      gfx_a = a2;
      gfx_rect(xp, y_bottom - value2, bin_width - 2, value2, 0);
      gfx_a = 0.15 * a2;
      gfx_rect(xp, y_bottom - value2, max(4, 0.3 * bin_width) - 2, value2, 1);
    );
    
    gfx_a = a1;
    value = floor(min(hc, max(0, (memory_block[idx] - min_value) * inv_range)));
    gfx_rect(xp, y_bottom - value, bin_width - 2, value, 1);
    
    memory_block2 ? (
      gfx_a = a2;
      
      value2 > value ? (
        //gfx_rect(xp, y_bottom - value2, bin_width - 2, value2 - value, 0);
        gfx_rect(xp, y_bottom - value2, bin_width - 2, value2, 0);
       
        gfx_set(0, 0, 0, 0.2);
        gfx_line(xp + 1, y_bottom - 2, xp + 1, y_bottom - value + 2, 0);
      ) : (
        gfx_set(0, 0, 0, 0.6);
        gfx_rect(xp, y_bottom - value, bin_width - 2, - (value2 - value), 0);
        
        gfx_set(0, 0, 0, 0.2);
        gfx_line(xp + 1, y_bottom - 2, xp + 1, y_bottom - value2 + 2, 0);
      );
    );
    
    idx += 1;
    xp += bin_width;
  );
  
  gfx_setfont(12, "Arial", hc);
  colormodel(0.2); gfx_a = 0.23;
  gfx_x = xc + bin_width; gfx_y = yc; gfx_printf(name);
);

function draw_array(me, xc, yc, wc, hc, bin_width, offset, min_value, max_value, memory_block, max_partial, name, alpha1, alpha2, hint)
local(
  bins, idx, value, xp, range, inv_range, y_bottom,
  increments, lx, ly, dx, dy, mem_loc, over
)
global(
  gfx_a, mouse_x, mouse_y, mouse_cap, captured, settings_changed, hinter.sethint
)
instance(
  bin_count, m_idx, last_x, last_y
)
(
  over = ((mouse_x > xc) && (mouse_y > yc) && (mouse_x < (xc + wc)) && (mouse_y < (yc + hc)));
  bin_count = floor(wc / bin_width);
  range = (max_value - min_value) / hc;
  inv_range = 1.0 / range;
  y_bottom = yc + hc;
  
  //_draw_array_draw_block(xc, yc, hc, bin_width, bin_count, idx, memory_block, 0, min_value, inv_range, y_bottom);
  _draw_array_draw_block(xc, yc, hc, bin_width, bin_count, offset, memory_block, memory_block + max_partial, min_value, inv_range, y_bottom, name, alpha1, alpha2);
  
  // Are we in here?
  ((captured == 0) || (captured == me)) ? (
    over || (captured == me) ? (
      ((mouse_cap & 1 == 1) || (mouse_cap & 2 == 2)) ? (
        captured = me;
        
        mem_loc = (mouse_cap == 1) ? memory_block : memory_block + max_partial;
        // Smaller increments than mouse movement to increase precision and
        // not miss bins when the user moves fast.
        lx = last_x;
        ly = last_y;
        dx = mouse_x - lx;
        increments = ceil(abs(dx) / (bin_width / 2));
        dx /= increments;
        dy = (mouse_y - ly) / increments;
        loop(increments + 1,
          m_idx = (lx - xc) / bin_width;        
          mem_loc[m_idx + offset] = min(max_value, max(min_value, (yc + hc - ly) * range + min_value));
          lx += dx;
          ly += dy;
        );
        settings_changed = 1;
      );
    );
  );
  ((mouse_cap == 0) && (captured == me)) ? captured = 0;
  
  over && (mouse_cap == 0) ? (
    hinter.sethint(hint);
  );
  
  last_x = mouse_x;
  last_y = mouse_y;
);

function handle_scrollbar(me, xc, yc, width, height, viewport_fraction)
local(inner_width, scrollbar_width, movement_extent, scroll_position)
global(gfx_a, mouse_x, mouse_y, mouse_cap, last_cap, captured, lx)
instance(over)
(
  colormodel(1.0);
  gfx_rect(xc, yc, width, height, 0);
  inner_width = width - 4;
  scrollbar_width = viewport_fraction * inner_width;
  movement_extent = inner_width - scrollbar_width;
  
  over = (mouse_x > (xc + 2 + scroll_position)) && 
         (mouse_x < (xc + 2 + scroll_position + scrollbar_width)) &&
         (mouse_y > (yc + 2)) && 
         (mouse_y < (yc + height - 4));
  
  gfx_a = 0.6 - 0.1 * over * abs(cos(2 * time_precise()));
  gfx_rect(xc + 2 + scroll_position, yc + 2, scrollbar_width, height - 4, 1);
  
  (mouse_cap == 1) ? (
    ((last_cap == 0) && over) ? (
      captured = me;
    ) : (
      (captured == me) ? (
        scroll_position += (mouse_x - lx);
      );
    );
  );
  
  ((mouse_cap == 0) && (captured == me)) ? (
    captured = 0;
  );
  
  lx = mouse_x;
  scroll_position = min(movement_extent, max(0, scroll_position));
);

function draw_custom_partial_ui(xc, yc, wc, hc, memory_block, max_partials, partials_used)
local(
  vert_step, vert_size,
  bin_width, scale, bins_in_view,
  bin_offset, scroll_position,
  alpha1, alpha2, tmp,
)
global(gfx_a, mouse_wheel, mouse_x, mouse_y, mouse_cap,
       relative_position, inharmonic, freq_damp)
instance(a1, a2, a3, a4, scroll, continuous_binwidth, over)
(
  continuous_binwidth == 0 ? continuous_binwidth = 12;
  scale = 1.0;
  bin_width = floor(continuous_binwidth);
  gfx_set(0, 0, 0, 0.8);
  gfx_rect(xc, yc, wc, hc);
  vert_size = floor((hc - 8 - 20 * scale) / 4);
  vert_step = vert_size + 2;

  bins_in_view = floor(wc / bin_width);
  scroll_position = scroll.handle_scrollbar(110, xc, yc + 4 * vert_step, bins_in_view * bin_width, floor(20 * scale), bins_in_view / max_partials);
  
  bin_offset = floor(scroll_position * bins_in_view / max_partials);
  
  colormodel(0); gfx_a = 0.2;
  gfx_rect(xc, yc, min(wc, bin_width * (partials_used - bin_offset)), 5);
  
  alpha1 = 0.2 + 0.7 * (1 - relative_position);
  alpha2 = 0.3 + 0.7 * relative_position;
  a1.draw_array(103, xc, yc, wc, vert_size, bin_width, bin_offset, -72, 0, memory_block + max_partials * 6, max_partials, "AMPLITUDE", alpha1, alpha2,
"Amplitude

Set the amplitude for each partial. Each column 
represents a different partial. Partials interpolates 
between two user defined amplitude spectra. The 
interpolation position is set by modulating the 
relative position parameter (button with the arrow 
pointing towards a line).

You can set the amplitude of each partial for spectrum 
A with the left mouse button and B with the right 
mouse button. The small indicator at the top indicates 
how many partials are currently being played. Note that 
unless you play very low notes, you will not hear the 
entire partial spectrum.

Scrollwheel can be used to zoom, while the scroll-bar 
can be used to pan.
"
  );

  tmp = 0.25 * inharmonic + 1;  // inharmonic - Value between -4 and 0 (linearly mapped) => [0, 1]
  alpha1 = 0.2 + 0.7 * (1 - tmp);
  alpha2 = 0.3 + 0.7 * tmp;
  a2.draw_array(100, xc, yc + vert_step, wc, vert_size, bin_width, bin_offset, -1, 1, memory_block, max_partials, "REL FREQ", alpha1, alpha2,
"Relative frequency

Set the relative frequency for each partial. Each 
column represents a different partial. Partials 
interpolates between two user defined frequency 
spectra. The interpolation position is set by 
modulating the relative inharmonicity parameter 
(button with the spring).

In this spectrum frequencies are set relative to 
the fundamental. Each bar indicates a range from 
k - df to k + df meaning that placing all frequencies
at the center would produce a regular partial spectrum.
If you want two partials to end up at the same 
frequency, you can set one to the middle, and the 
next one to the bottom for instance. This can be 
used to obtain ringing effects.

You can set the relative frequency of each partial 
with the left mouse button (spectrum A) or the right 
mouse button (spectrum B).

Scrollwheel can be used to zoom, while the scroll-bar 
can be used to pan.
"
  ); /* Freq */
  a3.draw_array(101, xc, yc + 2 * vert_step, wc, vert_size, bin_width, bin_offset, -50, 50, memory_block + max_partials * 2, max_partials, "ABS FREQ", alpha1, alpha2,
"Absolute frequency

Set the absolute frequency shift for each partial.
Each column represents a different partial. 
Partials interpolates between two user defined 
frequency shifts. The interpolation position is 
set by modulating the relative inharmonicity 
parameter (button with the spring).

In this spectrum frequencies are set absolutely.
This means that as you play different partials, the 
shift specified will always be the same. You can 
use this to attain ringing effects. For instance, if 
you place two partials at the same frequency and 
then specify a small shift, you will hear a modulation 
of that partial. This modulation frequency will be 
the same no matter what note is played.

You can set the relative frequency of each partial 
with the left mouse button (spectrum A) or the right 
mouse button (spectrum B).

Scrollwheel can be used to zoom, while the scroll-bar 
can be used to pan.
"  
  ); /* Freq */

  tmp = 0.2 * freq_damp + 1.2; // freq_damp - Value between -6 and -1 (linearly mapped) => [0, 1]
  alpha1 = 0.2 + 0.7 * (1 - tmp);
  alpha2 = 0.3 + 0.7 * tmp;
  a4.draw_array(102, xc, yc + 3 * vert_step, wc, vert_size, bin_width, bin_offset, -3, 0, memory_block + max_partials * 4, max_partials, "DECAY", alpha1, alpha2,
"Decay

Set the decay time for each partial.Each column 
represents a different partial. Partials interpolates 
between two user defined frequency shifts. The 
interpolation position is set by modulating the 
frequency dependent parameter (button that resembles
a lowpass).

You can set the relative decay of each partial 
with the left mouse button (spectrum A) or the right 
mouse button (spectrum B).

Scrollwheel can be used to zoom, while the scroll-bar 
can be used to pan.
"); /* Decay */
  
  over = (mouse_x > xc) && (mouse_x < (xc + wc)) && (mouse_y > yc) && (mouse_y < (yc + hc));
  ((mouse_cap == 0) && over) ? (
    (abs(mouse_wheel) > 0) ? (
      continuous_binwidth = min(max(6, continuous_binwidth + 0.01 * mouse_wheel), 24);
      mouse_wheel = 0;
    );
  );
);

