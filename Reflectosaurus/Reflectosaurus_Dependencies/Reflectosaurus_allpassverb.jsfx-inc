@init
function allpassVerbAPReset()
instance(outL, outR, yL, yR)
local()
global()
(
  outL = outR = yL = yR = 0;
);

function initializeAllpassBuffers(memoryLocation)
instance(allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10,
         otmL, itmL, otmR, itmR)
local(Fs, os)
global(srate, cD)
(
  os = 2 * srate/48000;
  cD = memoryLocation;
  Fs = 2*(floor(os*4050*.5) + 1); // Based on f8
  allpass1.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass2.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass3.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass4.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass5.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass6.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass7.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass8.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass9.initBuffer(cD, cD+Fs); cD+=Fs+2;
  allpass10.initBuffer(cD, cD+Fs); cD+=Fs+2;
  
  allpass1.allpassVerbAPReset();
  allpass2.allpassVerbAPReset();
  allpass3.allpassVerbAPReset();
  allpass4.allpassVerbAPReset();
  allpass5.allpassVerbAPReset();
  allpass6.allpassVerbAPReset();
  allpass7.allpassVerbAPReset();
  allpass8.allpassVerbAPReset();
  allpass9.allpassVerbAPReset();
  allpass10.allpassVerbAPReset();
  
  otmL = itmL = otmR = itmR = 0;
  
  ceil(cD/65536)*65536
);

// At maximum size, this takes 81010 at 48 kHz samplerate and scales linearly with samplerate
function allpassverbInit(size, decay, a)
  instance(allpass1, allpass2, allpass3, allpass4, allpass5, allpass6, allpass7, allpass8, allpass9, allpass10, allpassVerbK, allpassVerbGain)
  local(os, r,
        f1, f2, f3, f4, f5, f6, f7, f8, f9, f10,
        a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,
        hq_active)
  global(srate)
  (
    allpassVerbK = .942*decay;
    allpassVerbGain = 1/(1+2*decay);
    
    r  = 11.11111111111111111*(decay-.9)*(decay>.9);
    r  = r*r;
  
    size = 2*size;
    f1 = 200    + 200*size;
    f2 = 360    + 424*size;
    f3 = 140    + 606*size;
    f4 = 380    + 860*size;
    f5 = 230    + 303*size;
    f6 = 490    + 530*size;
    f7 = 140.4  + 716*size;
    f8 = 2250   + 900*size;
    f9 = f7;
    f10 = f8;

    os = 0.000041666667 * srate; // 2 / 48000
    f1 *= os;
    f2 *= os;
    f3 *= os;
    f4 *= os;
    f5 *= os;
    f6 *= os;
    f7 *= os;
    f8 *= os;
    f9 *= os;
    f10 *= os;
    
    a9 = .85;
    a10 = .85;
 
    hq_active = 1;
    allpass1.setOffset(f1, hq_active);
    allpass1.a = a;
    
    allpass2.setOffset(f2, hq_active);
    allpass2.a = a;
    
    allpass3.setOffset(f3, hq_active);
    allpass3.a = a;
        
    allpass4.setOffset(f4, hq_active);
    allpass4.a = a;
    
    allpass5.setOffset(f5, hq_active);
    allpass5.a = a;
    
    allpass6.setOffset(f6, hq_active);
    allpass6.a = a;
    
    allpass7.setOffset(f7, hq_active);
    allpass7.a = a;
    
    allpass8.setOffset(f8, hq_active);
    allpass8.a = a;
    
    allpass9.setOffset(f9, hq_active);
    allpass9.a = a9;
    
    allpass10.setOffset(f10, hq_active);
    allpass10.a = a10;
  );

// Outputs on instance variable yL, yR
function verbAllpass(left, right)
  local(xhatL, xhatR)
  instance(a, outL, outR, yL, yR)
  global()
  (
    this.readBuffer2_HQ();
    
    xhatL = left + a * outL;
    xhatR = right + a * outR;
    
    this.updateBuffer2(xhatL, xhatR);
    
    yL = outL - a * xhatL;
    yR = outR - a * xhatR;
  );

function evaluateAllpassVerb2(left, right)
  instance(allpass1, allpass2, allpass3, allpass4, allpass5,
           allpass6, allpass7, allpass8, allpass9, allpass10,
           otmL, itmL,
           otmR, itmR,
           allpassVerbK, allpassVerbGain,
           verbLeft, verbRight)
  local(cD, v, K)
  global()
  (
    K = allpassVerbK;
    allpass1.verbAllpass(left + K * allpass8.yL, right + K * allpass8.yR);
    allpass2.verbAllpass(allpass1.yL, allpass1.yR);
    
    allpass3.verbAllpass(left + K * allpass2.yL, right + K * allpass2.yR);
    allpass4.verbAllpass(allpass3.yL, allpass3.yR);
    
    allpass5.verbAllpass(left + K * allpass4.yL, right + K * allpass4.yR);
    allpass6.verbAllpass(allpass5.yL, allpass5.yR);
    
    allpass7.verbAllpass(left + K * allpass6.yL, right + K * allpass6.yR);
    allpass8.verbAllpass(allpass7.yL, allpass7.yR);
    
    allpass9.verbAllpass(allpass4.yL, allpass4.yR);
    allpass10.verbAllpass(allpass5.yL, allpass5.yR);
    
    verbLeft = allpass2.yL + allpass4.yL + allpass6.yL - allpass8.yL - allpass10.yL + allpass9.yL;
    verbRight = allpass2.yR + allpass4.yR + allpass6.yR - allpass8.yR - allpass10.yR + allpass9.yR;
    
    verbLeft *= .33*allpassVerbGain;
    verbRight *= .33*allpassVerbGain;
    
    // Small single pole highpass to prevent DC blowups.
    otmL=0.999*otmL + verbLeft - itmL;
    itmL=verbLeft;
    
    otmR=0.999*otmR + verbRight - itmR;
    itmR=verbRight;
    
    verbLeft = otmL;
    verbRight = otmR;
  );
  
function evaluateAllpassVerb(left, right)
  instance(allpass1, allpass2, allpass3, allpass4, allpass5,
           allpass6, allpass7, allpass8, allpass9, allpass10,
           otmL, itmL,
           otmR, itmR,
           allpassVerbK, allpassVerbGain,
           verbLeft, verbRight)
  local(cD, v, K)
  global()
  (
    K = allpassVerbK;
    
    allpass1.verbAllpass(left + K * allpass8.yL, right + K * allpass8.yR);
    allpass2.verbAllpass(allpass1.yL, allpass1.yR);
    
    allpass3.verbAllpass(left + K * allpass2.yL, right + K * allpass2.yR);
    allpass4.verbAllpass(allpass3.yL, allpass3.yR);
    
    allpass5.verbAllpass(left + K * allpass4.yL, right + K * allpass4.yR);
    allpass6.verbAllpass(allpass5.yL, allpass5.yR);
    
    allpass7.verbAllpass(left + K * allpass6.yL, right + K * allpass6.yR);
    allpass8.verbAllpass(allpass7.yL, allpass7.yR);
    
    allpass9.verbAllpass(allpass7.yL + allpass8.yL, allpass7.yR + allpass8.yR);
    allpass10.verbAllpass(allpass2.yL + allpass7.yL, allpass2.yR + allpass7.yR);
    
    verbLeft = allpass2.yL + allpass4.yL + allpass6.yL + allpass8.yL + allpass10.yL + allpass9.yR;
    verbRight = allpass2.yR + allpass4.yR + allpass6.yR + allpass8.yR + allpass10.yR + allpass9.yL;
    
    verbLeft *= .2*allpassVerbGain;
    verbRight *= .2*allpassVerbGain;
    
    // Small single pole highpass to prevent DC blowups.
    otmL=0.999*otmL + verbLeft - itmL;
    itmL=verbLeft;
    
    otmR=0.999*otmR + verbRight - itmR;
    itmR=verbRight;
    
    verbLeft = otmL;
    verbRight = otmR;
  );

