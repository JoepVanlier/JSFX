@init
function initBuffer(scopebuffer_in, scopebuffermax_in)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer)
  (
    scopebuffer     = scopebuffer_in;
    scopebuffermax  = scopebuffermax_in;
    
    scopeptr < scopebuffer ? (
      scopeptr = scopebuffer 
    ) : ( scopeptr > scopebuffermax ) ? scopeptr = scopebuffer    
  );
  
function resetBuffer()
  local()
  global()
  instance(scopebuffermax, scopebuffer)
  (
    memset(scopebuffer, 0, scopebuffermax - scopebuffer + 1);
  );
  
function draw_buffer(x, y, w, h, mul, fill)
  instance(scopeptr, scopebuffer, scopebuffermax)
  globals(gfx_x, gfx_y)
  local(len, scopeptr2, lx, ly, xx, dx, lptr, yy, lastx, lasty, isc, yref)
  (
    xx = x;
    len = scopebuffermax-scopebuffer;
    dx = floor(len/w);
    scopeptr2 = scopeptr;
    
    lptr = floor((scopeptr2)/dx)*dx;
    gfx_x = xx;
    gfx_y = y+h;
    isc = h;
    yref = y+h;
    ly = y+h;
    loop((scopebuffermax-scopeptr2)/dx - 1,
      yy = yref - h*min(1,lptr[]);
      
      lptr += dx;
      
      fill ? (
        gfx_triangle( xx-1, y+h,
                      xx-1, ly,
                      xx, y+h,
                      xx, yy);
      ) : (
        gfx_lineto(xx, yy);
      );
      
      ly = yy;
      xx += 1;
    );
    
    lptr = floor((scopebuffer)/dx)*dx;
    loop((scopeptr2 - scopebuffer)/dx - 1,
      lptr += dx;
      yy = yref - h*min(1,lptr[]);
      
      fill ? (
        gfx_triangle( xx-1, y+h,
                      xx-1, ly,
                      xx, y+h,
                      xx, yy);
      ) : (
        gfx_lineto(xx, yy);
      );
      
      ly = yy;
      xx += 1;
    );
  );  
  
function setOffset(current_dtime, hq_active)
  local(offset)
  global()
  instance(scopeptr, readptr, scopebuffermax, scopebuffer, frac, hd,
           a0, a1, a2, a3, a4, t, tm1, tm2, tm3, tm4, tm5, tm1tm2, tm3tm4)
  (
    readptr   = scopeptr;
    
    hd = current_dtime * .5;
    offset = current_dtime - floor(current_dtime) + floor(hd)*2;
    
    frac      = hd - floor(hd);
    
    hq_active ? (
      readptr  -= floor(offset) + 2;
      frac += 2;
      
      /* Lagrangian interpolation */
      t = frac;
      tm1 = t-1.0;
      tm2 = t-2.0;
      tm3 = t-3.0;
      tm4 = t-4.0;
      
      tm1tm2 = tm1*tm2;
      tm3tm4 = tm3*tm4;
      a0 = tm1tm2 * tm3tm4 * 0.04166666666666666666666666666667; // 1/24
      a1 = - t * tm2 * tm3tm4 * 0.16666666666666666666666666666667; //1/6
      a2 = t * tm1 * tm3tm4 * 0.25;
      tm1tm2 = t*tm1tm2;
      a3 = - tm1tm2 * tm4 * 0.16666666666666666666666666666667;
      a4 = tm1tm2 * tm3 * 0.04166666666666666666666666666667; // 1/24
    ) : (
      readptr -= floor(offset);
    );
    readptr < scopebuffer ? readptr += (scopebuffermax-scopebuffer);
  );
   
function readBuffer()
  local(c1, c2)
  global()
  instance(readptr, scopebuffermax, scopebuffer, frac)
  (
    c1 = readptr[];
    readptr += 2;
    readptr > scopebuffermax ? readptr = scopebuffer;
    
    c2 = readptr[];
    readptr -= 1;
    
    c2 * (1.0-frac) + c1 * frac
  );
  
function readBuffer2()
  local(c1l, c2l, c1r, c2r)
  global()
  instance(readptr, scopebuffermax, scopebuffer, frac, outL, outR)
  (
    c1l = readptr[];
    c1r = readptr[1];
    readptr += 2;
    
    readptr > scopebuffermax ? readptr = scopebuffer;

    c2l = readptr[];
    c2r = readptr[1];

    outL = c2l * (1.0-frac) + c1l * frac;
    outR = c2r * (1.0-frac) + c1r * frac;
  );
  
function readBuffer2_HQ()
  local()
  global()
  instance(readptr, scopebuffermax, scopebuffer, frac, outL, outR,
           a0, a1, a2, a3, a4,
           d0l, d1l, d2l, d3l, d4l,
           d0r, d1r, d2r, d3r, d4r,     
           )
  (
    d4l = readptr[];
    d4r = readptr[1];
    
    readptr += 2;
    readptr > scopebuffermax ? readptr = scopebuffer;
    
    d3l = readptr[];
    d3r = readptr[1];
    
    readptr += 2;
    readptr > scopebuffermax ? readptr = scopebuffer;
    
    d2l = readptr[];
    d2r = readptr[1];
    
    readptr += 2;
    readptr > scopebuffermax ? readptr = scopebuffer;
    
    d1l = readptr[];
    d1r = readptr[1];
    
    readptr += 2;
    readptr > scopebuffermax ? readptr = scopebuffer;
    
    d0l = readptr[];
    d0r = readptr[1];
    
    readptr -= 6;
    readptr < scopebuffer ? readptr += (scopebuffermax-scopebuffer+2);
     
    outL = a0 * d0l + a1 * d1l + a2 * d2l + a3 * d3l + a4 * d4l;
    outR = a0 * d0r + a1 * d1r + a2 * d2r + a3 * d3r + a4 * d4r;
  );
  
function updateBuffer2(ll, rr)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer)
  (
    scopeptr[] = ll;
    scopeptr[1] = rr;
    scopeptr += 2;
    scopeptr > scopebuffermax ? scopeptr = scopebuffer;
  );
  
