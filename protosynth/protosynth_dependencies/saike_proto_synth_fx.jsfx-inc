@init
function naive_triangle(t)
(
  t -= floor(t);
  t <= 0.5 ? (
    (4.0 * t - 1.0)
  ) : (
    (3.0 - 4.0 * t)
  )
);

function simple_buffer(buffer_in, buffer_max_in)
local()
global()
instance(write_ptr, buffer_max, buffer)
(
  buffer      = buffer_in;
  buffer_max  = buffer_max_in;
  
  write_ptr < buffer ? (
    write_ptr = buffer 
  ) : ( write_ptr > buffer_max ) ? write_ptr = buffer
);
  
function reset_buffer()
local()
global()
instance(buffer_max, buffer)
(
  memset(buffer, 0, buffer_max - buffer + 1);
);
  
function write_simple_buffer(sample)
local()
global()
instance(write_ptr, buffer, buffer_max)
(
  write_ptr[] = sample;
  write_ptr += 1;
  write_ptr > buffer_max ? write_ptr = buffer;
);
  
function read_simple_buffer(offset)
local(id0, id1, id2, id3, ism1, is0, is1, is2, frac)
global()
instance(read_ptr, write_ptr, buffer, buffer_max)
(
  read_ptr = write_ptr - offset - 3;
  
  frac = read_ptr - floor(read_ptr);
  read_ptr = floor(read_ptr);
  read_ptr < buffer ? read_ptr += (buffer_max - buffer + 1);    

  ism1 = read_ptr[];
  read_ptr += 1; read_ptr > buffer_max ? read_ptr = buffer;
  is0 = read_ptr[];
  read_ptr += 1; read_ptr > buffer_max ? read_ptr = buffer;
  is1 = read_ptr[];
  read_ptr += 1; read_ptr > buffer_max ? read_ptr = buffer;    
  is2 = read_ptr[];
  
  id0 = is0;
  id1 = 0.5*(is1 - ism1);
  id2 = ism1 - 2.5*is0 + 2*is1 - 0.5*is2;
  id3 = 0.5*(is2 - ism1) + 1.5 * (is0 - is1);
  ((id3*frac+id2)*frac+id1)*frac+id0;
);

function init_chorus(freemem, crossover_freq) // 340
local()
global()
instance(l_delay, r_delay, l_delay_filt, r_delay_filt)
(
  // Chorus materials
  l_delay.simple_buffer(freemem, freemem + 2048); freemem += 2048;
  r_delay.simple_buffer(freemem, freemem + 2048); freemem += 2048;
  l_delay_filt.init_linearSVF_absolute(crossover_freq, 0);
  r_delay_filt.init_linearSVF_absolute(crossover_freq, 0);
  
  freemem
);

function apply_chorus(chorus_amount)
local(chorus_tri, l_offset, r_offset)
global(spl0, spl1, srate, israte)
instance(csample, ch_cur, l_delay, r_delay, l_delay_filt, r_delay_filt)
(
  (ch_cur + chorus_amount) > .01 ? (
    // Subtle bass preserving chorus
    l_delay.write_simple_buffer(l_delay_filt.eval_linearSVF_HP(spl0));
    r_delay.write_simple_buffer(r_delay_filt.eval_linearSVF_HP(spl1));
    
    csample += 1;
    chorus_tri = naive_triangle(csample * israte * .25);
    ch_cur = chorus_amount * .001 + ch_cur * .999;
    l_offset = ch_cur * (0.0075 + 0.002 * chorus_tri) * srate;
    r_offset = ch_cur * (0.0075 - 0.002 * chorus_tri) * srate;
    
    spl0 = spl0 - .5 * r_delay.read_simple_buffer(r_offset);
    spl1 = spl1 - .5 * l_delay.read_simple_buffer(l_offset);
  );
);


function quick_ellip(x)
local()
instance(y, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)
global()
(
  // Elliptical filter at 0.25
  y = 0.03974403712835188 * x + s1;
  s1 = 0.11443117839583584 * x - -1.2209793606380654 * y + s2;
  s2 = 0.4102732984609602 * x - 6.918940386446262 * y + s3;
  s3 = 0.8255281436307241 * x - -7.438409047076798 * y + s4;
  s4 = 1.6689828207164152 * x - 20.47654014058037 * y + s5;
  s5 = 2.5256753272317622 * x - -19.21733444638215 * y + s6;
  s6 = 3.6193770241123127 * x - 33.69411950162771 * y + s7;
  s7 = 4.250403515943048 * x - -27.235417392156258 * y + s8;
  s8 = 4.641846929462009 * x - 33.46680351213294 * y + s9;
  s9 = 4.25040351594302 * x - -22.8021725145997 * y + s10;
  s10 = 3.6193770241123016 * x - 20.29444701618275 * y + s11;
  s11 = 2.525675327231766 * x - -11.231790923026374 * y + s12;
  s12 = 1.6689828207164181 * x - 7.173357397659418 * y + s13;
  s13 = 0.8255281436307251 * x - -2.9956603900306376 * y + s14;
  s14 = 0.41027329846095995 * x - 1.2866484319363045 * y + s15;
  s15 = 0.11443117839583594 * x - -0.3305293493933626 * y + s16;
  s16 = 0.0397440371283519 * x - 0.07745428581611816 * y;
  
  y
);
/*
function init_cheapest_freq_shifter(shift)
instance(osc_coeff_t1, osc_coeff_t2,
         cos_t1_1, cos_t1_2, sin_t1_1, sin_t1_2,
         cos_t2_1, cos_t2_2, sin_t2_1, sin_t2_2,
         t1,  t2, dt1, dt2)
local(ip, piblock, w)
global(tpiT)
(
  piblock = 628.32; // 200 * $pi;
  dt1 = 1.5771;  // oscillating at srate / 4 (2.0 * $pi * 0.251)
  dt2 = dt1 + tpiT * shift;
  (t1 > piblock) ? t1 -= piblock;
  (t2 > piblock) ? t2 -= piblock;
  
  w = dt1;
  osc_coeff_t1 = 2.0 * cos(w);
  t1 += dt1;
  cos_t1_1 = sin(- w + t1);
  cos_t1_2 = sin(- 2.0*w + t1);
  sin_t1_1 = - cos(- w + t1);
  sin_t1_2 = - cos(- 2.0*w + t1);
  t1 -= dt1;
  
  w = dt2;
  osc_coeff_t2 = 2.0 * cos(w);
  t2 += dt2;
  cos_t2_1 = sin(- w + t2);
  cos_t2_2 = sin(- 2.0 * w + t2);
  sin_t2_1 = - cos(- w + t2);
  sin_t2_2 = - cos(- 2.0 * w + t2);
  t2 -= dt2;
);
*/

function init_freq_shift_modulator()
global(
  fs.osc_coeff_t1,
  fs.cos_t1_1, fs.cos_t1_2,
  fs.sin_t1_1, fs.sin_t1_2,
)
local(dt1)
(
  dt1 = 1.5771;
  fs.osc_coeff_t1 = 2.0 * cos(dt1);
  fs.cos_t1_1 = sin(- dt1);
  fs.cos_t1_2 = sin(- 2.0 * dt1);
  fs.sin_t1_1 = - cos(- dt1);
  fs.sin_t1_2 = - cos(- 2.0 * dt1);
);

function freq_shift_modulator_sample()
global(
  fs.ct1, fs.st1,
  fs.osc_coeff_t1,
  fs.cos_t1_1, fs.cos_t1_2,
  fs.sin_t1_1, fs.sin_t1_2,
)
(
  fs.ct1 = fs.osc_coeff_t1 * fs.cos_t1_1 - fs.cos_t1_2;
  fs.cos_t1_2 = fs.cos_t1_1;
  fs.cos_t1_1 = fs.ct1;
  
  fs.st1 = fs.osc_coeff_t1 * fs.sin_t1_1 - fs.sin_t1_2;
  fs.sin_t1_2 = fs.sin_t1_1;
  fs.sin_t1_1 = fs.st1;
);


function freq_shift_audio_rate(in, shift)
instance(
  fs_l1, fs_r1, fs_l2, fs_r2,
  dt2, t2,
)
local(ct2, st2)
global(tpiT, fs.ct1, fs.st1)
(
  t2 += 1.5771 + tpiT * shift; // oscillating at srate / 4 (2.0 * $pi * 0.251)
  (t2 > 628.32) ? t2 -= 628.32; // 200 * $pi;
  
  fs_l1.quick_ellip(in * fs.ct1) * cos(t2) + fs_l2.quick_ellip(in * fs.st1) * sin(t2)
);

