@init
seed = 9860959.345567;

function init_decorrelator(mem, buffer_size)
instance(ptr, buffer, len, buffer_end)
global()
local()
(
  buffer = mem;
  len = buffer_size * 16;  // Critical that buffers are a multiple of 16 (since we store in blocks of 16).
  (ptr < buffer) ? ptr = buffer;
  buffer_end = buffer + len
);

function seed_random(seed)
global()
local()
instance(a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15)
(
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_0 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_1 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_2 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_3 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_4 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_5 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_6 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_7 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_8 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_9 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_10 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_11 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_12 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_13 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_14 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
  seed = seed * 48271 + ((seed * 0.000022477936010098986327476744406794750830158591270446777344)|0) * -2147483647;
  a_15 = seed * 0.000000000465661287958260561303802660404471680521965026855469;
);

function set_sample_position(duration, seed)
global(srate)
local(td, interval, im1, ip1)
instance(scaling_factor, max_loc,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7, loc8, loc9, loc10, loc11, loc12, loc13, loc14, loc15
  a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15
)
(
  this.seed_random(seed);
  interval = floor(duration * srate / 16);
  im1 = 16 * interval - 1;
  td = -1;
  loc0 = td - 16 * floor((interval - 1) * a_0);
  td -= im1;
  loc1 = td - 16 * floor((interval - 1) * a_1);
  td -= im1;
  loc2 = td - 16 * floor((interval - 1) * a_2);
  td -= im1;
  loc3 = td - 16 * floor((interval - 1) * a_3);
  td -= im1;
  loc4 = td - 16 * floor((interval - 1) * a_4);
  td -= im1;
  loc5 = td - 16 * floor((interval - 1) * a_5);
  td -= im1;
  loc6 = td - 16 * floor((interval - 1) * a_6);
  td -= im1;
  loc7 = td - 16 * floor((interval - 1) * a_7);
  td -= im1;
  loc8 = td - 16 * floor((interval - 1) * a_8);
  td -= im1;
  loc9 = td - 16 * floor((interval - 1) * a_9);
  td -= im1;
  loc10 = td - 16 * floor((interval - 1) * a_10);
  td -= im1;
  loc11 = td - 16 * floor((interval - 1) * a_11);
  td -= im1;
  loc12 = td - 16 * floor((interval - 1) * a_12);
  td -= im1;
  loc13 = td - 16 * floor((interval - 1) * a_13);
  td -= im1;
  loc14 = td - 16 * floor((interval - 1) * a_14);
  td -= im1;
  loc15 = td - 16 * floor((interval - 1) * a_15);
  td -= im1;

  max_loc = min(loc0, min(loc1, min(loc2, min(loc3, min(loc4, min(loc5, min(loc6, min(loc7, min(loc8, min(loc9, min(loc10, min(loc11, min(loc12, min(loc13, min(loc14, loc15)))))))))))))));

  scaling_factor = 0.25;
);

function set_sample_position_8(duration, seed)
global(srate)
local(td, interval, im1, ip1)
instance(scaling_factor, max_loc,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7
  a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8,
)
(
  this.seed_random(seed);
  interval = floor(duration * srate / 8);
  im1 = 8 * interval - 1;
  td = -1;
  loc0 = td - 8 * floor((interval - 1) * a_0);
  td -= im1;
  loc1 = td - 8 * floor((interval - 1) * a_1);
  td -= im1;
  loc2 = td - 8 * floor((interval - 1) * a_2);
  td -= im1;
  loc3 = td - 8 * floor((interval - 1) * a_3);
  td -= im1;
  loc4 = td - 8 * floor((interval - 1) * a_4);
  td -= im1;
  loc5 = td - 8 * floor((interval - 1) * a_5);
  td -= im1;
  loc6 = td - 8 * floor((interval - 1) * a_6);
  td -= im1;
  loc7 = td - 8 * floor((interval - 1) * a_7);
  td -= im1;

  max_loc = min(loc0, min(loc1, min(loc2, min(loc3, min(loc4, min(loc5, min(loc6, loc7)))))));

  scaling_factor = 0.3535533905932738;
);

function set_sample_position_8_exp(duration, seed)
global(srate)
local(td, interval, im1, ip1, scale)
instance(scaling_factor, max_loc,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7
  a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8,
)
(
  this.seed_random(seed);
  scale = 0.5;
  td = -1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc0 = td - 8 * floor((interval - 1) * a_0);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc1 = td - 8 * floor((interval - 1) * a_1);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc2 = td - 8 * floor((interval - 1) * a_2);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc3 = td - 8 * floor((interval - 1) * a_3);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc4 = td - 8 * floor((interval - 1) * a_4);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc5 = td - 8 * floor((interval - 1) * a_5);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc6 = td - 8 * floor((interval - 1) * a_6);
  td -= im1;
  interval = 8 * floor(duration * srate / 8); im1 = 8 * interval - 1; duration *= scale;
  loc7 = td - 8 * floor((interval - 1) * a_7);
  td -= im1;

  max_loc = min(loc0, min(loc1, min(loc2, min(loc3, min(loc4, min(loc5, min(loc6, loc7)))))));

  scaling_factor = 0.3535533905932738;
);

function hsample(damping_factor)
global()
local(a, b, rel_idx)
instance(
  in, tip, max_loc,
  ptr, buffer, len, buffer_end,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7, loc8, loc9, loc10, loc11, loc12, loc13, loc14, loc15,
  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15,
  ls9, ls10, ls11, ls12, ls13, ls14, ls15,
)
(
  // Store current sample
  ptr[0] = in.s0; ptr[1] = in.s1; ptr[2] = in.s2; ptr[3] = in.s3; ptr[4] = in.s4; ptr[5] = in.s5; ptr[6] = in.s6; ptr[7] = in.s7; ptr[8] = in.s8; ptr[9] = in.s9; ptr[10] = in.s10; ptr[11] = in.s11; ptr[12] = in.s12; ptr[13] = in.s13; ptr[14] = in.s14; ptr[15] = in.s15;
  ptr += 16;
  ptr = (ptr == buffer_end) ? buffer : ptr;

  // Grab samples of interest
  (ptr + max_loc) > buffer ? (
    // Fast path (most of the time this is fine)
    s0 = ptr[loc0]; s1 = ptr[loc1]; s2 = ptr[loc2]; s3 = ptr[loc3]; s4 = ptr[loc4]; s5 = ptr[loc5]; s6 = ptr[loc6]; s7 = ptr[loc7]; s8 = ptr[loc8]; s9 = ptr[loc9]; s10 = ptr[loc10]; s11 = ptr[loc11]; s12 = ptr[loc12]; s13 = ptr[loc13]; s14 = ptr[loc14]; s15 = ptr[loc15];
  ) : (
    // Slow path
    rel_idx = - (ptr - buffer);
    s0 = ptr[loc0 < rel_idx ? loc0 + len : loc0]; s1 = ptr[loc1 < rel_idx ? loc1 + len : loc1]; s2 = ptr[loc2 < rel_idx ? loc2 + len : loc2]; s3 = ptr[loc3 < rel_idx ? loc3 + len : loc3]; s4 = ptr[loc4 < rel_idx ? loc4 + len : loc4]; s5 = ptr[loc5 < rel_idx ? loc5 + len : loc5]; s6 = ptr[loc6 < rel_idx ? loc6 + len : loc6]; s7 = ptr[loc7 < rel_idx ? loc7 + len : loc7]; s8 = ptr[loc8 < rel_idx ? loc8 + len : loc8]; s9 = ptr[loc9 < rel_idx ? loc9 + len : loc9]; s10 = ptr[loc10 < rel_idx ? loc10 + len : loc10]; s11 = ptr[loc11 < rel_idx ? loc11 + len : loc11]; s12 = ptr[loc12 < rel_idx ? loc12 + len : loc12]; s13 = ptr[loc13 < rel_idx ? loc13 + len : loc13]; s14 = ptr[loc14 < rel_idx ? loc14 + len : loc14]; s15 = ptr[loc15 < rel_idx ? loc15 + len : loc15];
  );
  
  damping_factor > 0 ? (
    s9 = ls9 = (1.0 - damping_factor) * s9 + damping_factor * ls9;
    s10 = ls10 = (1.0 - damping_factor) * s10 + damping_factor * ls10;
    s11 = ls11 = (1.0 - damping_factor) * s11 + damping_factor * ls11;
    s12 = ls12 = (1.0 - damping_factor) * s12 + damping_factor * ls12;
    s13 = ls13 = (1.0 - damping_factor) * s13 + damping_factor * ls13;
    s14 = ls14 = (1.0 - damping_factor) * s14 + damping_factor * ls14;
    s15 = ls15 = (1.0 - damping_factor) * s15 + damping_factor * ls15;
  );
  
  // Mix
  a = s0; s0 = a + s1; s1 = a - s1; a = s2; s2 = a + s3; s3 = a - s3; a = s0; s0 = a + s2; s2 = a - s2; a = s1; s1 = a + s3; s3 = a - s3; a = s4; s4 = a + s5; s5 = a - s5; a = s6; s6 = a + s7; s7 = a - s7; a = s4; s4 = a + s6; s6 = a - s6; a = s5; s5 = a + s7; s7 = a - s7; a = s0; s0 = a + s4; s4 = a - s4; a = s1; s1 = a + s5; s5 = a - s5; a = s2; s2 = a + s6; s6 = a - s6; a = s3; s3 = a + s7; s7 = a - s7; a = s8; s8 = a + s9; s9 = a - s9; a = s10; s10 = a + s11; s11 = a - s11; a = s8; s8 = a + s10; s10 = a - s10; a = s9; s9 = a + s11; s11 = a - s11; a = s12; s12 = a + s13; s13 = a - s13; a = s14; s14 = a + s15; s15 = a - s15; a = s12; s12 = a + s14; s14 = a - s14; a = s13; s13 = a + s15; s15 = a - s15; a = s8; s8 = a + s12; s12 = a - s12; a = s9; s9 = a + s13; s13 = a - s13; a = s10; s10 = a + s14; s14 = a - s14; a = s11; s11 = a + s15; s15 = a - s15; a = s0; s0 = a + s8; s8 = a - s8; a = s1; s1 = a + s9; s9 = a - s9; a = s2; s2 = a + s10; s10 = a - s10; a = s3; s3 = a + s11; s11 = a - s11; a = s4; s4 = a + s12; s12 = a - s12; a = s5; s5 = a + s13; s13 = a - s13; a = s6; s6 = a + s14; s14 = a - s14; a = s7; s7 = a + s15; s15 = a - s15; 
);

function hsample8(damping_factor)
global()
local(a, b, rel_idx)
instance(
  in, max_loc,
  ptr, buffer, len, buffer_end,
  loc0, loc1, loc2, loc3, loc4, loc5, loc6, loc7,
  s0, s1, s2, s3, s4, s5, s6, s7,
  ls5, ls6, ls7,
)
(
  // Store current sample
  ptr[0] = in.s0; ptr[1] = in.s1; ptr[2] = in.s2; ptr[3] = in.s3; ptr[4] = in.s4; ptr[5] = in.s5; ptr[6] = in.s6; ptr[7] = in.s7;
  ptr += 8;
  ptr = (ptr == buffer_end) ? buffer : ptr;

  // Grab samples of interest
  (ptr + max_loc) > buffer ? (
    // Fast path (most of the time this is fine)
    s0 = ptr[loc0]; s1 = ptr[loc1]; s2 = ptr[loc2]; s3 = ptr[loc3]; s4 = ptr[loc4]; s5 = ptr[loc5]; s6 = ptr[loc6]; s7 = ptr[loc7];
  ) : (
    // Slow path
    rel_idx = buffer - ptr;
    s0 = ptr[loc0 < rel_idx ? loc0 + len : loc0];
    s1 = ptr[loc1 < rel_idx ? loc1 + len : loc1];
    s2 = ptr[loc2 < rel_idx ? loc2 + len : loc2];
    s3 = ptr[loc3 < rel_idx ? loc3 + len : loc3];
    s4 = ptr[loc4 < rel_idx ? loc4 + len : loc4];
    s5 = ptr[loc5 < rel_idx ? loc5 + len : loc5];
    s6 = ptr[loc6 < rel_idx ? loc6 + len : loc6];
    s7 = ptr[loc7 < rel_idx ? loc7 + len : loc7];
  );
  
  damping_factor > 0 ? (
    s5 = ls5 = (1.0 - damping_factor) * s5 + damping_factor * ls5;
    s6 = ls6 = (1.0 - damping_factor) * s6 + damping_factor * ls6;
    s7 = ls7 = (1.0 - damping_factor) * s7 + damping_factor * ls7;
  );
  
  // Mix
  a = s0; s0 = a + s1; s1 = a - s1; a = s2; s2 = a + s3; s3 = a - s3; a = s0; s0 = a + s2; s2 = a - s2; a = s1; s1 = a + s3; s3 = a - s3; a = s4; s4 = a + s5; s5 = a - s5; a = s6; s6 = a + s7; s7 = a - s7; a = s4; s4 = a + s6; s6 = a - s6; a = s5; s5 = a + s7; s7 = a - s7; a = s0; s0 = a + s4; s4 = a - s4; a = s1; s1 = a + s5; s5 = a - s5; a = s2; s2 = a + s6; s6 = a - s6; a = s3; s3 = a + s7; s7 = a - s7;
);

function silence()
instance(
  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15,
  buffer, len,
)
global()
local()
(
  s0 = s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = s9 = s10 = s11 = s12 = s13 = s14 = s15 = 0;
  len ? memset(buffer, 0, len);
);

function calc_rc_coeff(frequency)
global(srate)
local(y)
(
  frequency < 22040 ? (
    y = 1.0 - cos(2 * $pi * frequency / srate);
    1 - (- y + sqrt(y * y + 2 * y));
  ) : 0;
);

function update_verb_filters(damping_freq, lp_freq, hp_freq, side_freq)
local()
global()
instance(damping_factor, lp, hp, side, lp_last, hp_last, side_last, last_damping)
(
  damping_freq == 0 ? damping_freq = 22050;
  
  (last_damping != damping_freq) ? ( damping_factor = calc_rc_coeff(damping_freq); last_damping = damping_freq; );
  (lp_last != lp_freq) ? ( lp.init_linearSVF_absolute(lp_freq, 0); lp_last = lp_freq; );
  (hp_last != hp_freq) ? ( hp.init_linearSVF_absolute(hp_freq, 0); hp_last = hp_freq; );
  (side_last != side_freq) ? ( side.init_linearSVF_absolute(side_freq, 0); side_last = side_freq; );
);

function update_verb_settings(time_ms, seed, mode, low_feedback)
local()
global()
instance(in, current_mode, fb)
(
  current_mode = mode;
  fb = low_feedback ? 0.3 : 0.999;
  
  (mode == 0) ? (
    in.in.in.set_sample_position_8(0.25 * time_ms / 1000, seed);
    in.in.set_sample_position_8(0.5 * time_ms / 1000, seed + seed);
    in.set_sample_position_8(0.75 * time_ms / 1000, seed + seed + seed);
    this.set_sample_position_8(time_ms / 1000, seed + seed + seed + seed);
  ) : (mode == 1) ? (
    in.in.in.set_sample_position(0.25 * time_ms / 1000, seed);
    in.in.set_sample_position(0.5 * time_ms / 1000, seed + seed);
    in.set_sample_position(0.75 * time_ms / 1000, seed + seed + seed);
    this.set_sample_position(time_ms / 1000, seed + seed + seed + seed);
  ) : (mode == 2) ? (
    in.in.in.set_sample_position_8_exp(0.5 * time_ms / 1000, seed);
    in.in.set_sample_position_8_exp(0.125 * time_ms / 1000, seed + seed);
    in.set_sample_position_8_exp(0.1, seed + seed + seed);
    this.set_sample_position_8_exp(0.05, seed + seed + seed + seed);
  );
);

function init_linearSVF_shelf_absolute(f0, inv_q, gain)
global(srate)
local(g, k, A)
instance(a1, a2, a3, m0, m1, m2)
(
  A = pow(10, gain / 40);
  g = tan($pi * f0 / srate) * sqrt(A);
  k = inv_q;
      
  a1 = 1.0 / (1.0 + g*(g + k));
  a2 = g*a1;
  a3 = g*a2;
  m0 = A * A;
  m1 = k * (1 - A) * A;
  m2 = 1 - A * A;
);

function eval_linearSVF_shelf(v0)
local(v1, v2, v3)
instance(ic1eq, ic2eq, a1, a2, a3, m0, m1, m2)
global()
(
  v3 = v0 - ic2eq;
  v1 = a1 * ic1eq + a2 * v3;
  v2 = ic2eq + a2 * ic1eq + a3 * v3;
  ic1eq = 2 * v1 - ic1eq;
  ic2eq = 2 * v2 - ic2eq;
  
  m0 * v0 + m1 * v1 + m2 * v2
);

function eval_linearSVF_shelf2(v0)
local(v1, v2, v3)
instance(ic3eq, ic4eq, a1, a2, a3, m0, m1, m2)
global()
(
  v3 = v0 - ic4eq;
  v1 = a1 * ic3eq + a2 * v3;
  v2 = ic4eq + a2 * ic3eq + a3 * v3;
  ic3eq = 2 * v1 - ic3eq;
  ic4eq = 2 * v2 - ic4eq;
  
  m0 * v0 + m1 * v1 + m2 * v2
);

function eval_linearSVF_LP2(v0)
global()
local(v1, v2, v3)
instance(ic3eq, ic4eq, k, a1, a2, a3)
(
  v3 = v0 - ic4eq;
  v1 = a1 * ic3eq + a2 * v3;
  v2 = ic4eq + a2 * ic3eq + a3*v3;
  ic3eq = 2*v1 - ic3eq;
  ic4eq = 2*v2 - ic4eq;    
  
  v2
);

function eval_linearSVF_HP2(v0)
global()
local(v1, v2, v3)
instance(ic3eq, ic4eq, k, a1, a2, a3)
(
  v3 = v0 - ic4eq;
  v1 = a1 * ic3eq + a2 * v3;
  v2 = ic4eq + a2 * ic3eq + a3*v3;
  ic3eq = 2*v1 - ic3eq;
  ic4eq = 2*v2 - ic4eq;    
  
  v0 - k*v1 - v2
);

function sample_verb(mode)
local()
global()
instance(in, damping_factor)
(
  (mode == 0) ? (
    in.in.in.hsample8(damping_factor);
    in.in.hsample8(damping_factor);
    in.hsample8(damping_factor);
    this.hsample8(damping_factor);
  ) : (mode == 1) ? (
    in.in.in.hsample(damping_factor);
    in.in.hsample(damping_factor);
    in.hsample(damping_factor);
    this.hsample(damping_factor);
  ) : (mode == 2) ? (
    in.in.in.hsample8(damping_factor);
    in.in.hsample8(damping_factor);
    in.hsample8(damping_factor);
    this.hsample8(damping_factor);
  );
);

function initialize_verb_memory(freemem)
local(chunk)
global()
instance(in, brightness_boost)
(
  // This thing is a big memory hog
  // max reverb time is 2800 ms, max srate is 96000 Hz
  // each reverb "sample" takes 16 slots for the dense verb, and 8 slots for the sparse ones
  // max counts on the first buffer are [0.25*8, 0.25*16,   0.5*8] => 4 * duration * srate
  // max on the second buffer is        [ 0.5*8,  0.5*16, 0.125*8] => 8 * duration * srate
  // third                              [0.75*8, 0.75*16,   0.1*8] => 12 * duration * srate
  // fourth                             [ 1.0*8,  1.0*16,  0.05*8] => 16 * duration * srate
 
  in.in.in.in.tip = 1;
  // Note that the decorrelator already allocates the value * 16
  // Therefore we need:
  //    0.25 * duration * srate
  //    0.50 * duration * srate
  //    0.75 * duration * srate
  //     1.0 * duration * srate
  //
  // 2.8s * 96 kHz is 268.000 samples, is approx 270.000 s
  
  chunk = 270000;
  freemem = in.in.in.init_decorrelator(freemem, chunk * 0.25);
  freemem = in.in.init_decorrelator(freemem, chunk * 0.5);
  freemem = in.init_decorrelator(freemem, chunk * 0.75);
  freemem = this.init_decorrelator(freemem, chunk);
  
  freemem
);

function reset_diff_verb()
local()
global()
instance(in, fb0, fb1, s0, s1)
(
  in.in.in.silence();
  in.in.silence();
  in.silence();
  this.silence();
  fb0 = fb1 = 0;
  s0 = s1 = 0;
);

function verb_tick(in_left, in_right)
local(overall_scaling_factor, mid)
global()
instance(fb, in, out_left, out_right, fb0, fb1, scaling_factor, current_mode, s0, s1, brightness_boost, side, lp, hp)
(
  in.in.in.in.s0 = in_left;
  in.in.in.in.s1 = in_right;
  in.in.in.in.s6 = fb1;
  in.in.in.in.s7 = fb0;
  overall_scaling_factor = in.in.in.scaling_factor * in.in.scaling_factor * in.scaling_factor * scaling_factor;
   
  this.sample_verb(current_mode);
  
  out_left = s0 * overall_scaling_factor;
  out_right = s1 * overall_scaling_factor;
  
  fb0 = fb * out_left;
  fb1 = fb * out_right;
  
  out_left = hp.eval_linearSVF_HP(out_left);
  out_right = hp.eval_linearSVF_HP2(out_right);
  
  mid = out_left + out_right;
  side = out_left - out_right;
  
  side = side.eval_linearSVF_HP(side);
  
  out_left = 0.5 * (mid + side);
  out_right = 0.5 * (mid - side);
  
  out_left = lp.eval_linearSVF_LP(out_left);
  out_right = lp.eval_linearSVF_LP2(out_right);
);

