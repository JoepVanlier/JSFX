MIDI buffer library
version: 0.02
author: Joep Vanlier
license: MIT
(C) Joep Vanlier 2020

@init
MAX_NOTES = 256;
function initializeMIDI(mem, mWheel, passThrough)
local()
global(MAX_NOTES)
instance(noteMem, modWheel, pass)
(
  noteMem = mem;
  modWheel = mWheel;
  pass = passThrough;
  
  noteMem + MAX_NOTES;
);


function processMIDIBlock()
local(offset, msg1, msg2, msg3
      noteOn, noteOff, mwCC, mWheel, pb)
global()
instance(notePtr, noteMem, pass, modWheel, curSample, remainingNotes, nextNote)
(
  notePtr = noteMem;
  while (midirecv(offset,msg1,msg2,msg3)) (
    noteOn = msg1>$x8F&&msg1<$xA0 && msg3!=0;
    noteOff = (msg1>$x7F&&msg1<$x90) || (msg1>$x89&&msg1<$xA0 && msg3==0);
    mwCC = (msg1>$xAF&&msg1<$xC0);
    pb = msg1 & 0xF0 === 0xE0;
      
    noteOn ? (
      notePtr[] = offset;
      notePtr += 1;
      notePtr[] = msg3;
      notePtr += 1;
      notePtr[] = msg2;
      notePtr += 1;
    ) : ( noteOff ) ? (
      notePtr[] = offset;
      notePtr += 1;
      notePtr[] = -1;
      notePtr += 1;
      notePtr[] = msg2;
      notePtr += 1;
    ) : ( mwCC ) ? (
      ( modWheel ) ? (
        notePtr[] = offset;
        notePtr += 1;
        notePtr[] = -2;
        notePtr += 1;
        notePtr[] = msg2;
        notePtr += 1;
        notePtr[] = msg3;
        notePtr += 1;
      );
    ) : pb ? (
      notePtr[] = offset;
      notePtr += 1;
      notePtr[] = -3;
      notePtr += 1;
      notePtr[] = (((msg3 << 8) | msg2) - 0x4000)/16384;
      notePtr += 1;
    );
    
    pass ? midisend(offset,msg1,msg2,msg3); // passthrough MIDI events
  );
  notePtr[]       = -1337;    // Signal end of note buffer
  notePtr         = noteMem;
  curSample       = 0;        // Current sample in block
  remainingNotes  = 1;        // End of the note buffer?
  nextNote        = notePtr[];
);

