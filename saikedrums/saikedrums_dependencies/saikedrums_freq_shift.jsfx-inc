@init
function quick_ellip(x)
local()
instance(y, 
         s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16,
         )
global()
(
  // Elliptical filter at 0.25
  y = 0.03974403712835188 * x + s1;
  s1 = 0.11443117839583584 * x - -1.2209793606380654 * y + s2;
  s2 = 0.4102732984609602 * x - 6.918940386446262 * y + s3;
  s3 = 0.8255281436307241 * x - -7.438409047076798 * y + s4;
  s4 = 1.6689828207164152 * x - 20.47654014058037 * y + s5;
  s5 = 2.5256753272317622 * x - -19.21733444638215 * y + s6;
  s6 = 3.6193770241123127 * x - 33.69411950162771 * y + s7;
  s7 = 4.250403515943048 * x - -27.235417392156258 * y + s8;
  s8 = 4.641846929462009 * x - 33.46680351213294 * y + s9;
  s9 = 4.25040351594302 * x - -22.8021725145997 * y + s10;
  s10 = 3.6193770241123016 * x - 20.29444701618275 * y + s11;
  s11 = 2.525675327231766 * x - -11.231790923026374 * y + s12;
  s12 = 1.6689828207164181 * x - 7.173357397659418 * y + s13;
  s13 = 0.8255281436307251 * x - -2.9956603900306376 * y + s14;
  s14 = 0.41027329846095995 * x - 1.2866484319363045 * y + s15;
  s15 = 0.11443117839583594 * x - -0.3305293493933626 * y + s16;
  s16 = 0.0397440371283519 * x - 0.07745428581611816 * y;
  
  y
);

function init_cheapest_freq_shifter(shift)
instance(osc_coeff_t1, osc_coeff_t2,
         cos_t1_1, cos_t1_2, sin_t1_1, sin_t1_2,
         cos_t2_1, cos_t2_2, sin_t2_1, sin_t2_2,
         t1,  t2, dt1, dt2)
local(ip, piblock, w)
global(srate)
(
  piblock = 200 * $pi;
  dt1 = 2.0 * $pi * 0.251;  // oscillating at srate / 4
  dt2 = dt1 + 2.0 * $pi * shift / srate;
  (t1 > piblock) ? t1 -= piblock;
  (t2 > piblock) ? t2 -= piblock;
  
  w = dt1;
  osc_coeff_t1 = 2.0 * cos(w);
  t1 += dt1;
  cos_t1_1 = sin(- w + t1);
  cos_t1_2 = sin(- 2.0*w + t1);
  sin_t1_1 = - cos(- w + t1);
  sin_t1_2 = - cos(- 2.0*w + t1);
  t1 -= dt1;
  
  w = dt2;
  osc_coeff_t2 = 2.0 * cos(w);
  t2 += dt2;
  cos_t2_1 = sin(- w + t2);
  cos_t2_2 = sin(- 2.0 * w + t2);
  sin_t2_1 = - cos(- w + t2);
  sin_t2_2 = - cos(- 2.0 * w + t2);
  t2 -= dt2;
);


function eval_cheapest_freq_shifter(x)
instance(
  osc_coeff_t1, osc_coeff_t2,
  l1, r1, l2, r2,
  dt1, dt2,
  t1, t2,
  cos_t1_1, cos_t1_2, sin_t1_1, sin_t1_2,
  cos_t2_1, cos_t2_2, sin_t2_1, sin_t2_2,
)
local(ct1, st1, ct2, st2)
global()
(
  t1 += dt1;
  t2 += dt2;
  
  ct1 = osc_coeff_t1 * cos_t1_1 - cos_t1_2;
  cos_t1_2 = cos_t1_1;
  cos_t1_1 = ct1;
  
  ct2 = osc_coeff_t2 * cos_t2_1 - cos_t2_2;
  cos_t2_2 = cos_t2_1;
  cos_t2_1 = ct2;
  
  st1 = osc_coeff_t1 * sin_t1_1 - sin_t1_2;
  sin_t1_2 = sin_t1_1;
  sin_t1_1 = st1;
  
  st2 = osc_coeff_t2 * sin_t2_1 - sin_t2_2;
  sin_t2_2 = sin_t2_1;
  sin_t2_1 = st2;
  
  2 * (l1.quick_ellip(x * ct1) * ct2 + l2.quick_ellip(x * st1) * st2)
);
