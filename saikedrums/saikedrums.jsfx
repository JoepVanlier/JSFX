desc:Saike Dum Drum
slider1:kick_type=0<0,3,1>-Kick Type
slider2:kick_decay=0.7<0,1,.00001>-Kick Pitch Decay
slider3:kick_min_pitch=0.15<0,1,.00001>-Kick Minimum Pitch
slider4:kick_amp_decay=0.3<0,1,.00001>-Kick Amp Decay
slider5:kick_envelope=0.3<0,0.5,.00001>-Kick Pitch Envelope
slider6:kick_noise_envelope=0.78<0,1,.000001>-Noise
slider7:freq_shift=0<0,1,1>-Shift_freq

slider10:snare_type=1<0,3,1>-Snare type
slider11:snare_decay=0.67<0,1,.00001>-Snare Pitch Decay
slider12:snare_min_pitch=0<0,1,.00001>-Snare Minimum Pitch
slider13:snare_amp_decay=0.3<0,1,.00001>-Snare amplitude decay
slider14:snare_envelope=0.3<0,0.5,.00001>-Snare Pitch Envelope
slider15:snare_noise_decay=0.2<0,1,.00001>-Snare Noise Decay

slider20:clap_type=0<0,1,1>-Clap type
slider21:clap_attack=0.5<0,1,.00001>-Clap Attack
slider22:clap_decay=0.25<0,1,.00001>-Clap Decay

slider25:rim_type=0<0,3,1>-Rim type
slider26:rim_decay=0.5<0,1,0.0001>-Rim decay
slider27:rim_tune=0.5<0,1,0.0001>-Rim tune

slider30:hat_type=0<0,1,1>-Hat type
slider31:hat_attack=0.5<0,1,0.00001>-Hat attack
slider32:hat_decay=0.5<0,1,0.00001>-Hat decay
slider33:hat_tone=0.5<0,1,0.00001>-Hat tone
slider34:hat_body=0.5<0, 1.2, 0.0001>-Hat body

slider37:cowbell_type=0<0,2,1>-Cowbell type
slider38:cowbell_tune=0.5<0,1,0.0001>-Cowbell tune
slider39:cowbell_decay=0.5<0,1,0.0001>-Cowbell decay

slider40:ride_type=0<0,1,1>-Ride type
slider41:ride_attack=0.5<0,1,0.00001>-Ride attack
slider42:ride_decay=0.5<0,1,0.00001>-Ride decay
slider43:ride_tone=0.5<0,1,0.00001>-Ride tone
slider44:ride_duty=0.4798<0.2,0.8,0.00001>-Ride duty cycle

slider46:shaker_type=0<0,1,1>-Shaker type
slider47:shaker_tune=0.5<0,1,0.001>-Shaker tune
slider48:shaker_decay=0.5<0,1,0.001>-Shaker decay

slider50:tom_type=0<0,2,1>-Tom type
slider51:low_tom_tune=0.5<0,1,0.0001>-Low tom tune
slider52:low_tom_decay=0.5<0,1,0.0001>-Low tom decay

slider54:mid_tom_tune=0.5<0,1,0.0001>-Mid tom tune
slider55:mid_tom_decay=0.5<0,1,0.0001>-Mid tom decay

slider57:high_tom_tune=0.5<0,1,0.0001>-High tom tune
slider58:high_tom_decay=0.5<0,1,0.0001>-High tom decay


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import saikedrums_freq_shift.jsfx-inc
import saikedrums_triggered_midi.jsfx-inc
import saikedrums_basic_filters.jsfx-inc
import saikedrums_drum_elements.jsfx-inc
import saikedrums_pixel_gfx.jsfx-inc

@init
israte = 1.0 / srate;
freemem = midi.initializeMIDI(free_mem, 1, 1);

@slider

@block
israte = 1.0 / srate;
time_factor = 2302.58509299 / srate; // - ln(0.1) * 1000 (since we want to work in ms)
kick_bottom = log((20 + 80 * kick_min_pitch)/22050);
snare_bottom = log((170 + 230*snare_min_pitch)/22050);

midi.processMIDIBlock();

@sample
NOTE_KICK = 60;
NOTE_SNARE = 62;
NOTE_CLAP = 64;
NOTE_CLOSED_HAT = 65;
NOTE_OPEN_HAT = 66;
NOTE_RIDE = 67;
NOTE_HI_TOM = 68;
NOTE_MID_TOM = 69;
NOTE_LOW_TOM = 70;
NOTE_RIM = 71;
NOTE_COWBELL = 72;
NOTE_SHAKER = 73;

function processMIDISample()
local(cur_cc, i, note
      vel)
global(play_state, ttt,
       kick.kick_reset,
       kick.kick_stop,
       snare.snare_reset,
       clap.clap_reset,
       clap.clap_stop,
       ride.ride_reset,
       ride.ride_stop,
       hat.hat_reset,
       hat.hat_stop,
       low_tom.low_tom_reset,
       mid_tom.mid_tom_reset,
       hi_tom.hi_tom_reset,
       low_tom.low_tom_stop,
       mid_tom.mid_tom_stop,
       hi_tom.hi_tom_stop,
       rim.rim_reset,
       rim.rim_stop,
       cowbell.cowbell_reset,
       cowbell.cowbell_stop,
       shaker.shaker_reset,
       shaker.shaker_stop,
       NOTE_OPEN_HAT,
       NOTE_CLOSED_HAT,
       NOTE_RIDE,
       NOTE_CLAP,
       NOTE_KICK,
       NOTE_SNARE,
       NOTE_LOW_TOM,
       NOTE_MID_TOM,
       NOTE_HI_TOM,
       NOTE_RIM,
       NOTE_COWBELL,
       NOTE_SHAKER,
       )
instance(lastWheel, smoothWheel, notePtr, remainingNotes, nextNote, curSample, pitchBend)
(
  
  // Does this plugin respond to MIDI signals?
  // Take notes from the stack until we hit the end marker -1
  (remainingNotes) ? (
    while(nextNote == curSample) (
      notePtr += 1;
      (notePtr[] > 0) ? ( // note-on
        vel = notePtr[]/127;
        notePtr += 1;
        note = noteptr[];
        note == NOTE_KICK ? kick.kick_reset();
        note == NOTE_SNARE ? snare.snare_reset();
        note == NOTE_CLAP ? clap.clap_reset();
        note == NOTE_RIDE ? ride.ride_reset();
        note == NOTE_CLOSED_HAT ? hat.hat_reset(1);
        note == NOTE_OPEN_HAT ? hat.hat_reset(0);
        note == NOTE_LOW_TOM ? low_tom.low_tom_reset();
        note == NOTE_MID_TOM ? mid_tom.mid_tom_reset();
        note == NOTE_HI_TOM ? hi_tom.hi_tom_reset();
        note == NOTE_RIM ? rim.rim_reset();
        note == NOTE_COWBELL ? cowbell.cowbell_reset();
        note == NOTE_SHAKER ? shaker.shaker_reset();
        ttt += 1;
      ) : (notePtr[] == -1) ? ( // note-off
        notePtr += 1;
        note = notePtr[];
        note == NOTE_KICK ? kick.kick_stop();
        note == NOTE_CLAP ? clap.clap_stop();
        note == NOTE_RIDE ? ride.ride_stop();
        note == NOTE_CLOSED_HAT ? hat.hat_stop();
        note == NOTE_OPEN_HAT ? hat.hat_stop();
        note == NOTE_LOW_TOM ? low_tom.low_tom_stop();
        note == NOTE_MID_TOM ? mid_tom.mid_tom_stop();
        note == NOTE_HI_TOM ? hi_tom.hi_tom_stop();
        note == NOTE_RIM ? rim.rim_stop();
        note == NOTE_COWBELL ? cowbell.cowbell_stop();
        note == NOTE_SHAKER ? shaker.shaker_stop();
      ) : (notePtr[] == -2) ? ( // CC
        notePtr += 1;
        cur_cc = notePtr[];
        notePtr += 1;
        cur_cc == 1 ? (
          lastWheel = notePtr[]/128;
        )
      ) : (notePtr[] == -3) ? (
        notePtr += 1;
        pitchBend = notePtr[];
      );
      notePtr += 1;
      
      // Avoid constantly dereferencing by picking up the next one
      nextNote = notePtr[];
      remainingNotes = nextNote != -1337;
    );
  );
  
  curSample += 1;
  smoothWheel = .99 * smoothWheel + .01 * lastWheel;
);

midi.processMIDISample();

function check_alive(y)
instance(ly, alive, hly)
(
  hly = max(hly, ly);
  ly = max(0.999 * ly, abs(y));
  // 0.00001584893 = -96 dB
  ly < 0.0000001584893 ? alive -= 1;

  y
);

kick = kick.alive ? kick.check_alive(kick.kick_tick()) : 0;
snare = snare.alive ? snare.check_alive(snare.snare_tick()) : 0;
clap = clap.alive ? clap.check_alive(clap.clap_tick()) : 0;
ride = ride.alive ? ride.check_alive(ride.ride_tick()) : 0;
hat = hat.alive ? hat.check_alive(hat.hat_tick()) : 0;
low_tom = low_tom.alive ? low_tom.check_alive(low_tom.low_tom_tick()) : 0;
mid_tom = mid_tom.alive ? mid_tom.check_alive(mid_tom.mid_tom_tick()) : 0;
hi_tom = hi_tom.alive ? hi_tom.check_alive(hi_tom.hi_tom_tick()) : 0;
rim = rim.alive ? rim.check_alive(rim.rim_tick()) : 0;
cowbell = cowbell.alive ? cowbell.check_alive(cowbell.cowbell_tick()) : 0;
shaker = shaker.alive ? shaker.check_alive(shaker.shaker_tick()) : 0;

spl1 = spl0 = kick + snare + clap + ride + hat + low_tom + mid_tom + hi_tom + rim + cowbell + shaker;

@gfx
loaded = 0;
!loaded ? (
  loaded = gfx_loadimg(12, "./saikedrums_dependencies/font.png");
  
  img_h = 147;
  img_w = 256;
  
  img_w = 256;
  img_h = 150;
  
  gfx_setimgdim(13, img_w, img_h);
);

gfx_x = 0;
gfx_y = 0;

/* Background color */
gfx_dest = 13;
gfx_clear = 0;
gfx_set(0, 0, 0, 1);
gfx_rect(0, 0, img_w, img_h);

function reset_color()
(
  gfx_r = gfx_g = gfx_b = 0.0; gfx_a = 1.0;
  gfx_mode = 1;
);

side_pad = 3;
reset_color();
//txt_blit("KICK", 5, cy);

//txt_blit("KCK SNR CLP CYM SHK HAT LT MT HT RIM COW", 5, cy);

pad_size = 17;
pad_spacing = 3;
pad_region = (pad_size + pad_spacing) * 12;
cx = (img_w - pad_region) / 2;
cy = side_pad;
gfx_set(1, 0, 0, 0.1);

model = 12;

gfx_set(0.21, 0.21, 0.62, 1.0);
gfx_rect(cx - 2, cy + 6, pad_region + 1, pad_size + 4, 0);

gfx_set(0.21, 0.21, 0.62, 1.0);
gfx_rect(cx - 2, cy - 2, pad_region + 1, 7, 0);

function draw_knob(cx, cy, radius, color)
local(angle, dx, dy)
instance(x, y)
global(gfx_mode, gfx_a, gfx_x, gfx_y)
(
  x = cx; y = cy;

  gfx_set(0.25, 0.25, 0.25, 1.0);
  gfx_circle(cx, cy, radius, 1, 0);
  
  gfx_set(0.1, 0.1, 0.1, 1.0);
  
  gfx_set(0, 0, 0, 0.8);
  gfx_circle(cx, cy, radius - 1, 0, 1);
  
  angle = 1.25 + 1.5 * (0.5 + 0.5 * sin(time_precise()));
  
  colormodel(color);
  gfx_mode = 0;
  gfx_a = 0.25;
  gfx_circle(x, y, radius, 0, 0);
  
  gfx_mode = 1; gfx_a = 0.5;
  gfx_circle(x, y, radius, 0, 1);
  
  gfx_mode = 1; gfx_a = 1.0;
  gfx_arc(x, y, radius, 1.25 * $pi, angle * $pi, 0);
  
  gfx_a = 0.2;
  gfx_circle(x, y, radius + 1, 0, 0);
  gfx_a = 0.2;
  gfx_circle(x, y, radius - 1, 0, 1);
  gfx_a = 0.2;
  gfx_circle(x, y, radius - 2, 0, 1);
  gfx_a = 0.05;
  gfx_circle(x, y, radius - 3, 0, 1);
  gfx_a = 0.03;
  gfx_circle(x, y, radius - 4, 0, 1);
  
  gfx_a = 0.25;
  gfx_circle(x, y, radius, 0, 1);
  gfx_circle(x, y, radius + 1, 0, 1);
  gfx_mode = 0;
  
  gfx_set(0.0, 0.0, 0.0, 1.0);
  dx = sin(angle * $pi);
  dy = -cos(angle * $pi);
  gfx_line(x + (radius - 4) * dx, y + (radius - 4) * dy, x + (radius - 2) * dx, y + (radius - 2) * dy, 1);
  gfx_line(x + (radius - 3) * dx, y + (radius - 3) * dy, x + (radius - 2) * dx, y + (radius - 2) * dy, 1);
  
  gfx_x = x + 4 * dx;
  gfx_y = y + 4 * dy;
  gfx_setpixel(0, 0, 0);
  //gfx_rect(x + 4 * dx, y + 4 * dy, 2, 2);
);


// gfx_arc(x, y, ceil(r * 1.08) + cc, 1.25 * $pi, ang * $pi, 1);
// ang = 1.25 + 1.5 * relative_position;


function draw_pad(me, cy, pad_size, label, hint, override_ly)
local(tapped, highlight, knob_radius, knob_spacing, cy2)
global(cx, select, pad_spacing)
instance(hly, is_closed)
(
  gfx_set(1, 1, 1, 1);
  this.txt_measure(label);
  
  gfx_set(0.21, 0.21, 0.62, 1.0);
  gfx_rect(cx - 2, cy + 6, pad_size + 4, 5.3 * pad_size, 0);
  
  gfx_set(0.02, 0.02, 0.02, 1);
  gfx_rect(cx - 3, cy + 10 + pad_size, pad_size + 4, 5.3 * pad_size, 0);
  gfx_rect(cx - 1, cy + 10 + pad_size, pad_size + 4, 5.3 * pad_size, 0);
  
  txt_blit(label, cx + 0.5 * (pad_size - this.txt_w + 1), cy);
  
  cy += 8;

  gfx_set(1, 1, 1, 1);
  knob_radius = 6;
  knob_spacing = 4;
  cy2 = ceil(cy + pad_size + pad_size / 2) - 2;
  this.vol_knob.draw_knob(cx + floor(pad_size / 2), cy2 + knob_spacing, knob_radius, me / 11);
  
  this.pan_knob.draw_knob(cx + floor(pad_size / 2), cy2 + 2 * knob_spacing + ceil(2 * knob_radius), knob_radius, me / 11);
  
  this.tune_knob.draw_knob(cx + floor(pad_size / 2), cy2 + 3 * knob_spacing + ceil(4 * knob_radius), knob_radius, me / 11);
  
  this.decay_knob.draw_knob(cx + floor(pad_size / 2), cy2 + 4 * knob_spacing + ceil(6 * knob_radius), knob_radius, me / 11);
  
  colormodel(me / 11);
  tapped = 0;
  
  /* Annoying specialization for the hihat which uses two pads for one audio stream */
  highlight = 0;
  override_ly ? (
    (override_ly == 1) ? (
      is_closed ? (
        highlight = hly;
        hly = 0;
      );
    ) : (
      (is_closed == 0) ? (
        highlight = hly;
        hly = 0;
      );
    );
  ) : (
    highlight = hly;
    hly = 0;
  );
  
  this.tap_pad(me, cx, cy, pad_size, select, hint, 2.0 * highlight) ? (
    tapped = 1;
  );
  
  cx += pad_size + pad_spacing;
  
  tapped
);

SCREEN_SHAKE_AMNT = 3;
kick.draw_pad(0, cy, pad_size, "KCK", "Kickdrum", 0) ? ( kick.kick_reset(); shake = SCREEN_SHAKE_AMNT + 7; );
snare.draw_pad(1, cy, pad_size, "SNR", "Snare", 0) ? ( snare.snare_reset(); shake = SCREEN_SHAKE_AMNT; );
clap.draw_pad(2, cy, pad_size, "CLP", "Clap", 0) ? ( clap.clap_reset(); );
ride.draw_pad(3, cy, pad_size, "CYM", "Cymbal", 0) ? ( ride.ride_reset(); );
hat.draw_pad(4, cy, pad_size, "CHH", "Closed Hat", 1) ? ( hat.hat_reset(1); );
hat.draw_pad(5, cy, pad_size, "OHH", "Open Hat", 2) ? ( hat.hat_reset(0); );
shaker.draw_pad(6, cy, pad_size, "SHK", "Shaker", 0) ? ( shaker.shaker_reset(); );
low_tom.draw_pad(7, cy, pad_size, "LT", "Low Tom", 0) ? ( low_tom.low_tom_reset(); );
mid_tom.draw_pad(8, cy, pad_size, "MT", "Mid Tom", 0) ? ( mid_tom.mid_tom_reset(); );
hi_tom.draw_pad(9, cy, pad_size, "HT", "High Tom", 0) ? ( hi_tom.hi_tom_reset(); );
rim.draw_pad(10, cy, pad_size, "RIM", "Rimshot / Clave", 0) ? ( rim.rim_reset(); );
cowbell.draw_pad(11, cy, pad_size, "COW", "Cowbell", 0) ? ( cowbell.cowbell_reset(); );



//kick + snare + clap + ride + hat + low_tom + mid_tom + hi_tom + rim + cowbell + shaker;






show_ui = 0;
show_ui ? (

  cy = 3;
  filters.multi_slider_ui(8, 3, cy, pad_width, 8, 20, 22050, 1);
  filters.multi_slider_notch_nearest(9, 41);
  filters.multi_slider_notch_nearest(10, 42);
  filters.multi_slider_notch_nearest(11, 43);
  filters.multi_slider_notch_nearest(12, 44);
  filters.multi_slider_notch_ui(9, 41, "Side cut frequency", 0.5, 0.6, 1.0);
  filters.multi_slider_notch_ui(10, 42, "Low cut frequency", 1.0, 1.0, 1.0);
  filters.multi_slider_notch_ui(11, 43, "High cut frequency", 1.0, 1.0, 1.0);
  filters.multi_slider_notch_ui(12, 44, "Damping factor", 0.5, 0.6, 1.0);
  
  cy += 9;
  time_slider.slider_ui(5, 3, cy, pad_width, 8, sprintf(9, "%d", time_ms), "Reverb time in\nmilliseconds");
  
  cy += 10;
  
  reset_color();
  txt_blit("Verb", 5, cy);
  choicev1.choice_toggle(gfx_x, cy, 4, 0, 3, "Sparse");
  choicev2.choice_toggle(gfx_x, cy, 4, 1, 3, "Dense");
  choicev3.choice_toggle(gfx_x, cy, 4, 2, 3, "Delay-like");
  verb_pad.xy_pad(4, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  txt_blit("Grain", 5, cy);
  choiceg1.choice_toggle(gfx_x, cy, 4, 0, 30, "Tempo-sync");
  choiceg2.choice_toggle(gfx_x, cy, 4, 1, 30, "Burst");
  choiceg3.choice_toggle(gfx_x, cy, 4, 2, 30, "Rapid");
  choiceg4.choice_toggle(gfx_x, cy, 4, 3, 30, "Beat synced\ndoubler");
  choiceg5.choice_toggle(gfx_x, cy, 4, 4, 30, "Stochastic\nBandpass");
  choiceg6.choice_toggle(gfx_x, cy, 4, 5, 30, "Slow");
  grain_pad.xy_pad(3, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  verb_mix == 0 ? gfx_a = 0.1;
  txt_blit("Shimmer", 5, cy);
  
  //shimmer_mode
  choice1.choice_toggle(gfx_x, cy, 4, 0, 11, "Regular shimmers\nLow (X) High (Y)");
  choice2.choice_toggle(gfx_x, cy, 4, 1, 11, "Low shimmer is\nrectified (X)");
  choice3.choice_toggle(gfx_x, cy, 4, 2, 11, "Octaved low\nshimmer (X)");
  shimmer_pad.xy_pad(1, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  verb_mix == 0 ? gfx_a = 0.1;
  txt_blit("Haunt", 5, cy);
  choiceh1.choice_toggle(gfx_x, cy, 4, 0, 20, "Freq-Shifter");
  choiceh2.choice_toggle(gfx_x, cy, 4, 1, 20, "Spinner");
  choiceh3.choice_toggle(gfx_x, cy, 4, 2, 20, "Ghostly Chill");
  choiceh4.choice_toggle(gfx_x, cy, 4, 3, 20, "Incoherence");
  haunt.xy_pad(2, 3, cy + 5, pad_width, pad_height);
  
);
  

gfx_set(1, 1, 1, 0.3);
txt_blit("DD-101", side_pad, img_h - 6);
txt_blit("ALPHA VERSION", img_w - 66, img_h - 6);

hinter.draw_hints();

gfx_dest = -1;
gfx_set(1, 1, 1, 1);
blit_scale = floor(min(gfx_h / img_h, gfx_w / img_w));
x_offset = (gfx_w - blit_scale * img_w) * 0.5;
y_offset = (gfx_h - blit_scale * img_h) * 0.5;
gfx_x = x_offset; gfx_y = y_offset;
gfx_x += rand() * shake;
gfx_y += rand() * shake;
shake > 0 ? shake -= 1;

/*!show_ui ? (
  gfx_set(10/255, 31/255, 49/255, 1);
  gfx_rect(0, 0, gfx_w, gfx_h);
);*/

gfx_set(1, 1, 1, 1);
gfx_mode = 4;
gfx_blit(13, blit_scale, 0);

granulator_error ? (
  gfx_x = 0;
  gfx_y = 0;
  gfx_printf("FATAL: REQUESTED TOO MANY SAMPLES");
);

last_cap = mouse_cap;
last_mouse_x = mouse_x;
last_mouse_y = mouse_y;

