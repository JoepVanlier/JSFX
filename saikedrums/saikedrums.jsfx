desc:Saike Dum Drum
slider1:kick_type=0<0,3,1>Kick Type
slider2:kick_decay=0.7<0,1,.00001>Kick Pitch Decay
slider3:kick_min_pitch=0.15<0,1,.00001>Kick Minimum Pitch
slider4:kick_amp_decay=0.3<0,1,.00001>Kick Amp Decay
slider5:kick_envelope=0.3<0,0.5,.00001>Kick Pitch Envelope
slider6:kick_noise_envelope=0.78<0,1,.000001>Noise
slider7:freq_shift=0<0,1,1>Shift_freq

slider10:snare_type=1<0,3,1>Snare type
slider11:snare_decay=0.67<0,1,.00001>Snare Pitch Decay
slider12:snare_min_pitch=0<0,1,.00001>Snare Minimum Pitch
slider13:snare_amp_decay=0.3<0,1,.00001>Snare amplitude decay
slider14:snare_envelope=0.3<0,0.5,.00001>Snare Pitch Envelope
slider15:snare_noise_decay=0.2<0,1,.00001>Snare Noise Decay

slider20:clap_type=0<0,1,1>Clap type
slider21:clap_attack=0.5<0,1,.00001>Clap Attack
slider22:clap_decay=0.25<0,1,.00001>Clap Decay

slider25:rim_type=0<0,3,1>Rim type
slider26:rim_decay=0.5<0,1,0.0001>Rim decay
slider27:rim_tune=0.5<0,1,0.0001>Rim tune

slider30:hat_type=0<0,1,1>Hat type
slider31:hat_attack=0.5<0,1,0.00001>Hat attack
slider32:hat_decay=0.5<0,1,0.00001>Hat decay
slider33:hat_tone=0.5<0,1,0.00001>Hat tone
slider34:hat_body=0.5<0, 1.2, 0.0001>Hat body

slider37:cowbell_type=0<0,2,1>Cowbell type
slider38:cowbell_tune=0.5<0,1,0.0001>Cowbell tune
slider39:cowbell_decay=0.5<0,1,0.0001>Cowbell decay

slider40:ride_type=0<0,1,1>Ride type
slider41:ride_attack=0.5<0,1,0.00001>Ride attack
slider42:ride_decay=0.5<0,1,0.00001>Ride decay
slider43:ride_tone=0.5<0,1,0.00001>Ride tone
slider44:ride_duty=0.4798<0.2,0.8,0.00001>Ride duty cycle

slider46:shaker_type=0<0,1,1>Shaker type
slider47:shaker_tune=0.5<0,1,0.001>Shaker tune
slider48:shaker_decay=0.5<0,1,0.001>Shaker decay

slider50:tom_type=0<0,2,1>Tom type
slider51:low_tom_tune=0.5<0,1,0.0001>Low tom tune
slider52:low_tom_decay=0.5<0,1,0.0001>Low tom decay

slider54:mid_tom_tune=0.5<0,1,0.0001>Mid tom tune
slider55:mid_tom_decay=0.5<0,1,0.0001>Mid tom decay

slider57:high_tom_tune=0.5<0,1,0.0001>High tom tune
slider58:high_tom_decay=0.5<0,1,0.0001>High tom decay


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import saikedrums_freq_shift.jsfx-inc
import saikedrums_triggered_midi.jsfx-inc
import saikedrums_basic_filters.jsfx-inc
import saikedrums_drum_elements.jsfx-inc

@init
israte = 1.0 / srate;
freemem = midi.initializeMIDI(free_mem, 1, 1);

@slider

@block
israte = 1.0 / srate;
time_factor = 2302.58509299 / srate; // - ln(0.1) * 1000 (since we want to work in ms)
kick_bottom = log((20 + 80 * kick_min_pitch)/22050);
snare_bottom = log((170 + 230*snare_min_pitch)/22050);

midi.processMIDIBlock();

@sample
NOTE_KICK = 60;
NOTE_SNARE = 62;
NOTE_CLAP = 64;
NOTE_CLOSED_HAT = 65;
NOTE_OPEN_HAT = 66;
NOTE_RIDE = 67;
NOTE_HI_TOM = 68;
NOTE_MID_TOM = 69;
NOTE_LOW_TOM = 70;
NOTE_RIM = 71;
NOTE_COWBELL = 72;
NOTE_SHAKER = 73;

function processMIDISample()
local(cur_cc, i, note
      vel)
global(play_state, ttt,
       kick.kick_reset,
       kick.kick_stop,
       snare.snare_reset,
       clap.clap_reset,
       clap.clap_stop,
       ride.ride_reset,
       ride.ride_stop,
       hat.hat_reset,
       hat.hat_stop,
       low_tom.low_tom_reset,
       mid_tom.mid_tom_reset,
       hi_tom.hi_tom_reset,
       low_tom.low_tom_stop,
       mid_tom.mid_tom_stop,
       hi_tom.hi_tom_stop,
       rim.rim_reset,
       rim.rim_stop,
       cowbell.cowbell_reset,
       cowbell.cowbell_stop,
       shaker.shaker_reset,
       shaker.shaker_stop,
       NOTE_OPEN_HAT,
       NOTE_CLOSED_HAT,
       NOTE_RIDE,
       NOTE_CLAP,
       NOTE_KICK,
       NOTE_SNARE,
       NOTE_LOW_TOM,
       NOTE_MID_TOM,
       NOTE_HI_TOM,
       NOTE_RIM,
       NOTE_COWBELL,
       NOTE_SHAKER,
       )
instance(lastWheel, smoothWheel, notePtr, remainingNotes, nextNote, curSample, pitchBend)
(
  
  // Does this plugin respond to MIDI signals?
  // Take notes from the stack until we hit the end marker -1
  (remainingNotes) ? (
    while(nextNote == curSample) (
      notePtr += 1;
      (notePtr[] > 0) ? ( // note-on
        vel = notePtr[]/127;
        notePtr += 1;
        note = noteptr[];
        note == NOTE_KICK ? kick.kick_reset();
        note == NOTE_SNARE ? snare.snare_reset();
        note == NOTE_CLAP ? clap.clap_reset();
        note == NOTE_RIDE ? ride.ride_reset();
        note == NOTE_CLOSED_HAT ? hat.hat_reset(1);
        note == NOTE_OPEN_HAT ? hat.hat_reset(0);
        note == NOTE_LOW_TOM ? low_tom.low_tom_reset();
        note == NOTE_MID_TOM ? mid_tom.mid_tom_reset();
        note == NOTE_HI_TOM ? hi_tom.hi_tom_reset();
        note == NOTE_RIM ? rim.rim_reset();
        note == NOTE_COWBELL ? cowbell.cowbell_reset();
        note == NOTE_SHAKER ? shaker.shaker_reset();
        ttt += 1;
      ) : (notePtr[] == -1) ? ( // note-off
        notePtr += 1;
        note = notePtr[];
        note == NOTE_KICK ? kick.kick_stop();
        note == NOTE_CLAP ? clap.clap_stop();
        note == NOTE_RIDE ? ride.ride_stop();
        note == NOTE_CLOSED_HAT ? hat.hat_stop();
        note == NOTE_OPEN_HAT ? hat.hat_stop();
        note == NOTE_LOW_TOM ? low_tom.low_tom_stop();
        note == NOTE_MID_TOM ? mid_tom.mid_tom_stop();
        note == NOTE_HI_TOM ? hi_tom.hi_tom_stop();
        note == NOTE_RIM ? rim.rim_stop();
        note == NOTE_COWBELL ? cowbell.cowbell_stop();
        note == NOTE_SHAKER ? shaker.shaker_stop();
      ) : (notePtr[] == -2) ? ( // CC
        notePtr += 1;
        cur_cc = notePtr[];
        notePtr += 1;
        cur_cc == 1 ? (
          lastWheel = notePtr[]/128;
        )
      ) : (notePtr[] == -3) ? (
        notePtr += 1;
        pitchBend = notePtr[];
      );
      notePtr += 1;
      
      // Avoid constantly dereferencing by picking up the next one
      nextNote = notePtr[];
      remainingNotes = nextNote != -1337;
    );
  );
  
  curSample += 1;
  smoothWheel = .99 * smoothWheel + .01 * lastWheel;
);

midi.processMIDISample();

function check_alive(y)
instance(ly, alive)
(
  ly = max(0.999 * ly, abs(y));
  // 0.00001584893 = -96 dB
  ly < 0.0000001584893 ? alive = 0;
  
  y
);

kick = kick.alive ? kick.check_alive(kick.kick_tick()) : 0;
snare = snare.alive ? snare.check_alive(snare.snare_tick()) : 0;
clap = clap.alive ? clap.check_alive(clap.clap_tick()) : 0;
ride = ride.alive ? ride.check_alive(ride.ride_tick()) : 0;
hat = hat.alive ? hat.check_alive(hat.hat_tick()) : 0;
low_tom = low_tom.alive ? low_tom.check_alive(low_tom.low_tom_tick()) : 0;
mid_tom = mid_tom.alive ? mid_tom.check_alive(mid_tom.mid_tom_tick()) : 0;
hi_tom = hi_tom.alive ? hi_tom.check_alive(hi_tom.hi_tom_tick()) : 0;
rim = rim.alive ? rim.check_alive(rim.rim_tick()) : 0;
cowbell = cowbell.alive ? cowbell.check_alive(cowbell.cowbell_tick()) : 0;
shaker = shaker.alive ? shaker.check_alive(shaker.shaker_tick()) : 0;

spl1 = spl0 = kick + snare + clap + ride + hat + low_tom + mid_tom + hi_tom + rim + cowbell + shaker;

