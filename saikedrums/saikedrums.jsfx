desc:Saike Dum Drum
slider1:kick_type=0<0,3,1>-Kick Type
slider2:_kick_pitch_decay=0.7<0,1,.00001>-Kick Pitch Decay
slider3:_kick_tune=0.15<0,1,.00001>-Kick Minimum Pitch
slider4:_kick_amp_decay=0.3<0,1,.00001>-Kick Amp Decay
slider5:_kick_envelope=0.3<0,0.5,.00001>-Kick Pitch Envelope
slider6:_kick_noise_envelope=0.78<0,1,.000001>-Noise
slider7:_kick_decay=0<0,1,0.00001>-Kick decay
slider8:_kick_gain=0<-24,6,0.0001>-Kick gain
slider9:_kick_pan=0<-1,1,0.0001>-Kick panning

slider10:snare_type=1<0,4,1>-Snare type
slider11:_snare_decay=0.67<0,1,.00001>-Snare Pitch Decay
slider12:_snare_tune=0<0,1,.00001>-Snare Minimum Pitch
slider13:_snare_amp_decay=0.3<0,1,.00001>-Snare amplitude decay
slider14:_snare_envelope=0.3<0,0.5,.00001>-Snare Pitch Envelope
slider15:_snare_noise_decay=0.2<0,1,.00001>-Snare Noise Decay
slider16:_snare_gain=0<-24,6,0.0001>-Snare gain
slider17:_snare_pan=0<-1,1,0.0001>-Snare panning

slider20:clap_type=0<0,1,1>-Clap type
slider21:_clap_attack=0.5<0,1,.00001>-Clap Attack
slider22:_clap_decay=0.25<0,1,.00001>-Clap Decay
slider23:_clap_gain=0<-24,6,0.0001>-Clap gain
slider24:_clap_pan=0<-1,1,0.0001>-Clap panning

slider25:rim_type=0<0,2,1>-Rim type
slider26:_rim_decay=0.5<0,1,0.0001>-Rim decay
slider27:_rim_tune=0.5<0,1,0.0001>-Rim tune
slider28:_rim_gain=0<-24,6,0.0001>-Rim gain
slider29:_rim_pan=0<-1,1,0.0001>-Rim panning

slider30:hat_type=0<0,1,1>-Hat type
slider31:_hat_attack=0.5<0,1,0.00001>-Hat attack
slider32:_hat_decay=0.5<0,1,0.00001>-Hat decay
slider33:_hat_tone=0.5<0,1,0.00001>-Hat tone
slider34:_hat_body=0.5<0, 1.2, 0.0001>-Hat body
slider35:_hat_gain=0<-24,6,0.0001>-Hat gain
slider36:_hat_pan=0<-1,1,0.0001>-Hat panning

slider37:cowbell_type=0<0,3,1>-Cowbell type
slider38:_cowbell_tune=0.5<0,1,0.0001>-Cowbell tune
slider39:_cowbell_decay=0.5<0,1,0.0001>-Cowbell decay
slider40:_cowbell_gain=0<-24,6,0.0001>-Cowbell gain
slider41:_cowbell_pan=0<-1,1,0.0001>-Cowbell panning

slider42:ride_type=0<0,1,1>-Ride type
slider43:_ride_attack=0.5<0,1,0.00001>-Ride attack
slider44:_ride_decay=0.5<0,1,0.00001>-Ride decay
slider45:_ride_tone=0.5<0,1,0.00001>-Ride tone
slider46:_ride_duty=0.4798<0.2,0.8,0.00001>-Ride duty cycle
slider47:_ride_gain=0<-24,6,0.0001>-Ride gain
slider48:_ride_pan=0<-1,1,0.0001>-Ride panning

slider49:shaker_type=0<0,1,1>-Shaker type
slider50:_shaker_tune=0.5<0,1,0.001>-Shaker tune
slider51:_shaker_decay=0.5<0,1,0.001>-Shaker decay
slider52:_shaker_gain=0<-24,6,0.0001>-Shaker gain
slider53:_shaker_pan=0<-1,1,0.0001>-Shaker panning

slider54:tom_type=0<0,2,1>-Tom type
slider55:_low_tom_tune=0.5<0,1,0.0001>-Low tom tune
slider56:_low_tom_decay=0.5<0,1,0.0001>-Low tom decay
slider57:_low_tom_gain=0<-24,6,0.0001>-Low tom gain
slider58:_low_tom_pan=0<-1,1,0.0001>-Low tom panning

slider59:_mid_tom_tune=0.5<0,1,0.0001>-Mid tom tune
slider60:_mid_tom_decay=0.5<0,1,0.0001>-Mid tom decay
slider61:_mid_tom_gain=0<-24,6,0.0001>-Mid tom gain
slider62:_mid_tom_pan=0<-1,1,0.0001>-Mid tom panning

slider63:_high_tom_tune=0.5<0,1,0.0001>-High tom tune
slider64:_high_tom_decay=0.5<0,1,0.0001>-High tom decay
slider65:_high_tom_gain=0<-24,6,0.0001>-High tom gain
slider66:_high_tom_pan=0<-1,1,0.0001>-High tom panning

slider102:kick_pitch_decay_vel=0<-2,2,.00001>-Kick Pitch Decay Velocity
slider103:kick_tune_vel=0<-2,2,.00001>-Kick Minimum Pitch Velocity
slider104:kick_amp_decay_vel=0<-2,2,.00001>-Kick Amp Decay Velocity
slider105:kick_envelope_vel=0<-1, 1,.00001>-Kick Pitch Envelope Velocity
slider106:kick_noise_envelope_vel=0<-2,2,.000001>-Noise Velocity
slider107:kick_decay_vel=0<-2,2,0.00001>-Kick decay Velocity
slider108:kick_gain_vel=0<-36,36,0.0001>-Kick gain Velocity
slider109:kick_pan_vel=0<-2,2,0.0001>-Kick panning Velocity

slider111:snare_decay_vel=0.0<-2,2,.00001>-Snare Pitch Decay Velocity
slider112:snare_tune_vel=0<-2,2,.00001>-Snare Minimum Pitch Velocity
slider113:snare_amp_decay_vel=0<-2,2,.00001>-Snare amplitude decay Velocity
slider114:snare_envelope_vel=0<-1.0,1.0,.00001>-Snare Pitch Envelope Velocity
slider115:snare_noise_decay_vel=0<-2,2,.00001>-Snare Noise Decay Velocity
slider116:snare_gain_vel=0<-36,36,0.0001>-Snare gain Velocity
slider117:snare_pan_vel=0<-2,2,0.0001>-Snare panning Velocity

slider121:clap_attack_vel=0<-2,2,.00001>-Clap Attack Velocity
slider122:clap_decay_vel=0<-2,2,.00001>-Clap Decay Velocity
slider123:clap_gain_vel=0<-36,36,0.0001>-Clap gain Velocity
slider124:clap_pan_vel=0<-2,2,0.0001>-Clap panning Velocity

slider126:rim_decay_vel=0<-2,2,0.0001>-Rim decay Velocity
slider127:rim_tune_vel=0<-2,2,0.0001>-Rim tune Velocity
slider128:rim_gain_vel=0<-36,36,0.0001>-Rim gain Velocity
slider129:rim_pan_vel=0<-2,2,0.0001>-Rim panning Velocity

slider131:hat_attack_vel=0<-2,2,0.00001>-Hat attack Velocity
slider132:hat_decay_vel=0<-2,2,0.00001>-Hat decay Velocity
slider133:hat_tone_vel=0<-2,2,0.00001>-Hat tone Velocity
slider134:hat_body_vel=0<-2.4, 2.4, 0.0001>-Hat body Velocity
slider135:hat_gain_vel=0<-36,36,0.0001>-Hat gain Velocity
slider136:hat_pan_vel=0<-2,2,0.0001>-Hat panning Velocity

slider138:cowbell_tune_vel=0<-2,2,0.0001>-Cowbell tune Velocity
slider139:cowbell_decay_vel=0<-2,2,0.0001>-Cowbell decay Velocity
slider140:cowbell_gain_vel=0<-36,36,0.0001>-Cowbell gain Velocity
slider141:cowbell_pan_vel=0<-2,2,0.0001>-Cowbell panning Velocity

slider143:ride_attack_vel=0<-2,2,0.00001>-Ride attack Velocity
slider144:ride_decay_vel=0<-2,2,0.00001>-Ride decay Velocity
slider145:ride_tone_vel=0<-2,2,0.00001>-Ride tone Velocity
slider146:ride_duty_vel=0<-1.6,1.6,0.00001>-Ride duty cycle Velocity
slider147:ride_gain_vel=0<-36,36,0.0001>-Ride gain Velocity
slider148:ride_pan_vel=0<-2,2,0.0001>-Ride panning Velocity

slider150:shaker_tune_vel=0<-2,2,0.001>-Shaker tune Velocity
slider151:shaker_decay_vel=0<-2,2,0.001>-Shaker decay Velocity
slider152:shaker_gain_vel=0<-36,36,0.0001>-Shaker gain Velocity
slider153:shaker_pan_vel=0<-2,2,0.0001>-Shaker panning Velocity

slider155:low_tom_tune_vel=0<-2,2,0.0001>-Low tom tune Velocity
slider156:low_tom_decay_vel=0<-2,2,0.0001>-Low tom decay Velocity
slider157:low_tom_gain_vel=0<-36,36,0.0001>-Low tom gain Velocity
slider158:low_tom_pan_vel=0<-2,2,0.0001>-Low tom panning Velocity

slider159:mid_tom_tune_vel=0<-2,2,0.0001>-Mid tom tune Velocity
slider160:mid_tom_decay_vel=0<-2,2,0.0001>-Mid tom decay Velocity
slider161:mid_tom_gain_vel=0<-36,36,0.0001>-Mid tom gain Velocity
slider162:mid_tom_pan_vel=0<-2,2,0.0001>-Mid tom panning Velocity

slider163:high_tom_tune_vel=0<-2,2,0.0001>-High tom tune Velocity
slider164:high_tom_decay_vel=0<-2,2,0.0001>-High tom decay Velocity
slider165:high_tom_gain_vel=0<-36,36,0.0001>-High tom gain Velocity
slider166:high_tom_pan_vel=0<-2,2,0.0001>-High tom panning Velocity

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import saikedrums_freq_shift.jsfx-inc
import saikedrums_triggered_midi.jsfx-inc
import saikedrums_basic_filters.jsfx-inc
import saikedrums_drum_elements.jsfx-inc
import saikedrums_pixel_gfx.jsfx-inc

@init
//freq_shift = 1;
img_w = 256;
img_h = 150;
osc_downsample_factor = 64;
osc_skipfactor = 2;
osc_buffer = img_w * osc_downsample_factor;

CURRENT_VERSION = 1;
version = CURRENT_VERSION;

israte = 1.0 / srate;
freemem = midi.initializeMIDI(free_mem, 1, 1);
freemem = (audio_buffer = freemem) + img_w * 8;
audio_buffer_idx = 0;

function clamp()
local()
instance(slider_idx, min_value, max_value)
(
  slider(slider_idx) > max_value ? (
    slider(slider_idx) = max_value;
  );
  slider(slider_idx) < min_value ? (
    slider(slider_idx) = min_value;
  );
);

function hard_update()
local(gain, pan, target_left, target_right, new_panning, new_gain)
global(invblock, MIN_GAIN, MAX_GAIN)
instance(
  current_left, current_right, delta_left, delta_right, vel,
  gain_slider, pan_slider, gain_slider_vel, pan_slider_vel,
  last_vel,
)
(
  // Only force a vel update immediately if it's louder (otherwise things get clicky)
  (vel > last_vel) ? (
    // Force hard update when triggered
    new_panning = min(1, max(-1, slider(pan_slider) + vel * slider(pan_slider_vel)));
    new_gain = min(MAX_GAIN, max(MIN_GAIN, slider(gain_slider) + vel * slider(gain_slider_vel)));
  
    pan = 0.5 * (new_panning + 1);
    gain = pow(10, new_gain / 20);
    current_left = gain * sin(0.5 * pan * $pi);
    current_right = gain * sin(0.5 * (1.0 - pan) * $pi);
  
    delta_left = 0;
    delta_right = 0;
  );
  last_vel = vel;
);

function kick_update(_vel)
instance(vel)
(
  vel = _vel;
  kick_pitch_decay = max(0, min(1, _kick_pitch_decay + vel * kick_pitch_decay_vel));
  kick_tune = max(0, min(1, _kick_tune + vel * kick_tune_vel));
  kick_amp_decay = max(0, min(1, _kick_amp_decay + vel * kick_amp_decay_vel));
  kick_envelope = max(0, min(0.5, _kick_envelope + vel * kick_envelope_vel));
  kick_noise_envelope = max(0, min(1, _kick_noise_envelope + vel * kick_noise_envelope_vel));
  kick_decay = max(0, min(1, _kick_decay + vel * kick_decay_vel));
  
  this.hard_update();
);

function snare_update(_vel)
instance(vel)
(
  vel = _vel;
  snare_decay = max(0, min(1, _snare_decay + vel * snare_decay_vel));
  snare_tune = max(0, min(1, _snare_tune + vel * snare_tune_vel));
  snare_amp_decay = max(0, min(1, _snare_amp_decay + vel * snare_amp_decay_vel));
  snare_envelope = max(0, min(0.5, _snare_envelope + vel * snare_envelope_vel));
  snare_noise_decay = max(0, min(1, _snare_noise_decay + vel * snare_noise_decay_vel));
  
  this.hard_update();
);

function clap_update(_vel)
instance(vel)
(
  vel = _vel;
  clap_attack = max(0, min(1, _clap_attack + vel * clap_attack_vel));
  clap_decay = max(0, min(1, _clap_decay + vel * clap_decay_vel));
  
  this.hard_update();
);

function rim_update(_vel)
instance(vel)
(
  vel = _vel;
  rim_decay = max(0, min(1, _rim_decay + vel * rim_decay_vel));
  rim_tune = max(0, min(1, _rim_tune + vel * rim_tune_vel));
  
  this.hard_update();
);

function hat_update(_vel)
instance(vel)
(
  vel = _vel;
  hat_attack = max(0, min(1, _hat_attack + vel * hat_attack_vel));
  hat_decay = max(0, min(1, _hat_decay + vel * hat_decay_vel));
  hat_tone = max(0, min(1, _hat_tone + vel * hat_tone_vel));
  
  this.hard_update();
);

function cowbell_update(_vel)
instance(vel)
(
  vel = _vel;
  cowbell_tune = max(0, min(1, _cowbell_tune + vel * cowbell_tune_vel));
  cowbell_decay = max(0, min(1, _cowbell_decay + vel * cowbell_decay_vel));
  
  this.hard_update();
);

function ride_update(_vel)
instance(vel)
(
  vel = _vel;
  ride_attack = max(0, min(1, _ride_attack + vel * ride_attack_vel));
  ride_decay = max(0, min(1, _ride_decay + vel * ride_decay_vel));
  ride_tone = max(0, min(1, _ride_tone + vel * ride_tone_vel));
  ride_duty = max(0.2, min(0.8, _ride_duty + vel * ride_duty_vel));
  
  this.hard_update();
);

function shaker_update(_vel)
instance(vel)
(
  vel = _vel;
  shaker_tune = max(0, min(1, _shaker_tune + vel * shaker_tune_vel));
  shaker_decay = max(0, min(1, _shaker_decay + vel * shaker_decay_vel));
  
  this.hard_update();
);

function low_update(_vel)
instance(vel)
(
  vel = _vel;
  low_tom_tune = max(0, min(1, _low_tom_tune + vel * low_tom_tune_vel));
  low_tom_decay = max(0, min(1, _low_tom_decay + vel * low_tom_decay_vel));
  
  this.hard_update();
);

function mid_update(_vel)
instance(vel)
(
  vel = _vel;
  mid_tom_tune = max(0, min(1, _mid_tom_tune + vel * mid_tom_tune_vel));
  mid_tom_decay = max(0, min(1, _mid_tom_decay + vel * mid_tom_decay_vel));
  
  this.hard_update();
);

function high_update(_vel)
instance(vel)
(
  vel = _vel;
  high_tom_tune = max(0, min(1, _high_tom_tune + vel * high_tom_tune_vel));
  high_tom_decay = max(0, min(1, _high_tom_decay + vel * high_tom_decay_vel));
  
  this.hard_update();
);


function initialize_type_toggle(_type_idx, _type_slider, _min_type, _max_type)
local()
global()
instance(type_idx, type_slider, min_type, max_type)
(
  type_idx = _type_idx;
  type_slider = _type_slider;
  min_type = _min_type;
  max_type = _max_type;
);

function initialize_knob(_slider_idx, _min_value, _max_value, _default, _label, velocity_slider)
local()
global()
instance(slider_idx, vel_slider_idx, min_value, max_value, default, label, active, max_vel_range)
(
  active = 1;
  slider_idx = _slider_idx;
  vel_slider_idx = velocity_slider;
  min_value = _min_value;
  max_value = _max_value;
  default = _default;
  label = _label;
  max_vel_range = max_value - min_value;
  
  this.clamp();
);

function initialize_controls()
(
  kick.initialize_type_toggle(1, 1, 0, 3);
  snare.initialize_type_toggle(21, 10, 0, 3);
  clap.initialize_type_toggle(3, 20, 0, 1);
  ride.initialize_type_toggle(4, 42, 0, 1);
  hat.initialize_type_toggle(5, 30, 0, 1);
  shaker.initialize_type_toggle(6, 49, 0, 1);
  low_tom.initialize_type_toggle(7, 54, 0, 2);
  mid_tom.initialize_type_toggle(7, 54, 0, 2);
  hi_tom.initialize_type_toggle(7, 54, 0, 2);
  rim.initialize_type_toggle(8, 25, 0, 2);
  cowbell.initialize_type_toggle(9, 37, 0, 3);
  
  MIN_GAIN = -24;
  MAX_GAIN = 12;
  DEFAULT_GAIN = 0;
  GAIN_LABEL = "Gain";
  kick.gain.initialize_knob(8, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 108);
  snare.gain.initialize_knob(16, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 116);
  clap.gain.initialize_knob(23, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 123);
  ride.gain.initialize_knob(47, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 147);
  hat.gain.initialize_knob(35, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 135);
  hat.gain.initialize_knob(35, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 135);
  shaker.gain.initialize_knob(52, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 152);
  low_tom.gain.initialize_knob(57, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 157);
  mid_tom.gain.initialize_knob(61, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 161);
  hi_tom.gain.initialize_knob(65, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 165);
  rim.gain.initialize_knob(28, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 128);
  cowbell.gain.initialize_knob(40, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 140);
  
  MIN_PAN = -1;
  MAX_PAN = 1;
  DEFAULT_PAN = 0;
  PAN_LABEL = "Panning";
  kick.pan.initialize_knob(9, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 109);
  snare.pan.initialize_knob(17, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 117);
  clap.pan.initialize_knob(24, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 124);
  ride.pan.initialize_knob(48, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 148);
  hat.pan.initialize_knob(36, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 136);
  hat.pan.initialize_knob(36, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 136);
  shaker.pan.initialize_knob(53, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 153);
  low_tom.pan.initialize_knob(58, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 158);
  mid_tom.pan.initialize_knob(62, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 162);
  hi_tom.pan.initialize_knob(66, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 166);
  rim.pan.initialize_knob(29, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 129);
  cowbell.pan.initialize_knob(41, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL, 141);
  
  MIN_TUNE = 0;
  MAX_TUNE = 1;
  DEFAULT_TUNE = 0.5;
  TUNE_LABEL = "Tune";
  kick.tune.initialize_knob(3, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL, 103);
  snare.tune.initialize_knob(12, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL, 112);
  clap.tune.initialize_knob(21, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Attack", 121);
  ride.tune.initialize_knob(45, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Tone", 145);
  hat.tune.initialize_knob(33, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Tone", 133);
  hat.tune.initialize_knob(33, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Tone", 133);
  shaker.tune.initialize_knob(50, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL, 150);
  low_tom.tune.initialize_knob(55, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL, 155);
  mid_tom.tune.initialize_knob(59, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL, 159);
  hi_tom.tune.initialize_knob(63, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL, 163);
  rim.tune.initialize_knob(27, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL, 127);
  cowbell.tune.initialize_knob(38, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL, 138);
  
  MIN_DECAY = 0;
  MAX_DECAY = 1;
  DEFAULT_DECAY = 0.5;
  DECAY_LABEL = "Decay";
  kick.decay.initialize_knob(7, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 107);
  snare.decay.initialize_knob(11, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 111);
  clap.decay.initialize_knob(22, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 122);
  ride.decay.initialize_knob(44, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 144);
  hat.decay.initialize_knob(32, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 132);
  hat.decay.initialize_knob(32, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 132);
  shaker.decay.initialize_knob(51, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 151);
  low_tom.decay.initialize_knob(56, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 156);
  mid_tom.decay.initialize_knob(60, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 160);
  hi_tom.decay.initialize_knob(64, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 164);
  rim.decay.initialize_knob(26, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 126);
  cowbell.decay.initialize_knob(39, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 139);
  
  // Details
  kick.details.gain.initialize_knob(8, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 108);
  kick.details.decay.initialize_knob(7, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 107);
  kick.details.pitch_decay.initialize_knob(2, 0, 1, 0.7, "Pitch Decay", 102);
  kick.details.tune.initialize_knob(3, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Tune", 103);
  kick.details.amp_decay.initialize_knob(4, 0, 1, 0.3, "Amp Decay", 104);
  kick.details.pitch_envelope.initialize_knob(5, 0, 0.5, 0.3, "Pitch Env", 105);
  kick.details.noise_envelope.initialize_knob(6, 0, 1.0, 0.78, "Noise Env", 106);
  
  snare.details.gain.initialize_knob(16, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL, 116);
  snare.details.decay.initialize_knob(11, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL, 111);
  snare.details.amp_decay.initialize_knob(13, 0, 1, 0.3, "Amp Decay", 113);
  snare.details.tune.initialize_knob(12, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Tune", 112);
  snare.details.pitch_envelope.initialize_knob(14, 0, 0.5, 0.3, "Pitch Env", 114);
  snare.details.noise_envelope.initialize_knob(15, 0, 1.0, 0.2, "Noise Env", 115);
);

function init_gain_lerp(_gain_slider, _pan_slider, _gain_slider_vel, _pan_slider_vel)
local()
global()
instance(gain_slider, pan_slider, gain_slider_vel, pan_slider_vel)
(
  gain_slider = _gain_slider;
  pan_slider = _pan_slider;
  gain_slider_vel = _gain_slider_vel;
  pan_slider_vel = _pan_slider_vel;
);

kick.init_gain_lerp(8, 9, 108, 109);
snare.init_gain_lerp(16, 17, 116, 117);
clap.init_gain_lerp(23, 24, 123, 124);
ride.init_gain_lerp(47, 48, 147, 148);
hat.init_gain_lerp(35, 36, 135, 136);
low_tom.init_gain_lerp(57, 58, 157, 158);
mid_tom.init_gain_lerp(61, 62, 161, 162);
hi_tom.init_gain_lerp(65, 66, 165, 166);
rim.init_gain_lerp(28, 29, 128, 129);
cowbell.init_gain_lerp(40, 41, 140, 141);
shaker.init_gain_lerp(52, 53, 152, 153);

initialize_controls();

@serialize
file_var(0, version);
file_var(0, freq_shift);

version = CURRENT_VERSION;

initialize_controls();

@slider

@block
israte = 1.0 / srate;
invblock = 1.0 / samplesblock;
hsrate = 0.5 * srate;
time_factor = 2302.58509299 / srate; // - ln(0.1) * 1000 (since we want to work in ms)
kick_bottom = log((20 + 80 * kick_tune)/22050);
snare_bottom = log((170 + 230 * snare_tune)/22050);

function lerp_output_settings_block()
local(gain, pan, target_left, target_right, new_panning, new_gain)
global(invblock, MIN_GAIN, MAX_GAIN)
instance(
  current_left, current_right, delta_left, delta_right, vel,
  gain_slider, pan_slider, gain_slider_vel, pan_slider_vel,
)
(
  new_panning = min(1, max(-1, slider(pan_slider) + vel * slider(pan_slider_vel)));
  new_gain = min(MAX_GAIN, max(MIN_GAIN, slider(gain_slider) + vel * slider(gain_slider_vel)));

  pan = 0.5 * (new_panning + 1);
  gain = pow(10, new_gain / 20);
  target_left = gain * sin(0.5 * pan * $pi);
  target_right = gain * sin(0.5 * (1.0 - pan) * $pi);

  delta_left = (target_left - current_left) * invblock;
  delta_right = (target_right - current_right) * invblock;
);

kick.lerp_output_settings_block();
snare.lerp_output_settings_block();
clap.lerp_output_settings_block();
ride.lerp_output_settings_block();
hat.lerp_output_settings_block();
low_tom.lerp_output_settings_block();
mid_tom.lerp_output_settings_block();
hi_tom.lerp_output_settings_block();
rim.lerp_output_settings_block();
cowbell.lerp_output_settings_block();
shaker.lerp_output_settings_block();

midi.processMIDIBlock();

@sample
NOTE_KICK = 60;
NOTE_SNARE = 62;
NOTE_CLAP = 64;
NOTE_CLOSED_HAT = 65;
NOTE_OPEN_HAT = 66;
NOTE_RIDE = 67;
NOTE_HI_TOM = 68;
NOTE_MID_TOM = 69;
NOTE_LOW_TOM = 70;
NOTE_RIM = 71;
NOTE_COWBELL = 72;
NOTE_SHAKER = 73;

function processMIDISample()
local(cur_cc, i, note
      vel)
global(play_state, ttt,
       kick.kick_reset,
       kick.kick_stop,
       snare.snare_reset,
       clap.clap_reset,
       clap.clap_stop,
       ride.ride_reset,
       ride.ride_stop,
       hat.hat_reset,
       hat.hat_stop,
       low_tom.low_tom_reset,
       mid_tom.mid_tom_reset,
       hi_tom.hi_tom_reset,
       low_tom.low_tom_stop,
       mid_tom.mid_tom_stop,
       hi_tom.hi_tom_stop,
       rim.rim_reset,
       rim.rim_stop,
       cowbell.cowbell_reset,
       cowbell.cowbell_stop,
       shaker.shaker_reset,
       shaker.shaker_stop,
       NOTE_OPEN_HAT,
       NOTE_CLOSED_HAT,
       NOTE_RIDE,
       NOTE_CLAP,
       NOTE_KICK,
       NOTE_SNARE,
       NOTE_LOW_TOM,
       NOTE_MID_TOM,
       NOTE_HI_TOM,
       NOTE_RIM,
       NOTE_COWBELL,
       NOTE_SHAKER,
       kick.vel, snare.vel, clap.vel, ride.vel, hat.vel, low_tom.vel, mid_tom.vel, hi_tom.vel, rim.vel, cowbell.vel, shaker.vel
       kick.kick_update,
       snare.snare_update,
       clap.clap_update,
       rim.rim_update,
       hat.hat_update,
       cowbell.cowbell_update,
       ride.ride_update,
       shaker.shaker_update,
       low_tom.low_update,
       mid_tom.mid_update,
       hi_tom.high_update,
       )
instance(lastWheel, smoothWheel, notePtr, remainingNotes, nextNote, curSample, pitchBend)
(
  
  // Does this plugin respond to MIDI signals?
  // Take notes from the stack until we hit the end marker -1
  (remainingNotes) ? (
    while(nextNote == curSample) (
      notePtr += 1;
      (notePtr[] > 0) ? ( // note-on
        vel = notePtr[]/127;
        notePtr += 1;
        note = noteptr[];
        
        note == NOTE_KICK ? ( kick.kick_update(vel); kick.kick_reset(); );
        note == NOTE_SNARE ? ( snare.snare_update(vel); snare.snare_reset(); );
        note == NOTE_CLAP ? ( clap.clap_update(vel); clap.clap_reset(); );
        note == NOTE_RIDE ? ( ride.ride_update(vel); ride.ride_reset(); );
        note == NOTE_CLOSED_HAT ? ( hat.hat_update(vel); hat.hat_reset(1); );
        note == NOTE_OPEN_HAT ? ( hat.hat_update(vel); hat.hat_reset(0); );
        note == NOTE_LOW_TOM ? ( low_tom.low_update(vel); low_tom.low_tom_reset(); );
        note == NOTE_MID_TOM ? ( mid_tom.mid_update(vel); mid_tom.mid_tom_reset(); );
        note == NOTE_HI_TOM ? ( hi_tom.high_update(vel); hi_tom.hi_tom_reset(); );
        note == NOTE_RIM ? ( rim.rim_update(vel); rim.rim_reset(); );
        note == NOTE_COWBELL ? ( cowbell.cowbell_update(vel); cowbell.cowbell_reset(); );
        note == NOTE_SHAKER ? ( shaker.shaker_update(vel); shaker.shaker_reset(); );
        ttt += 1;
      ) : (notePtr[] == -1) ? ( // note-off
        notePtr += 1;
        note = notePtr[];
        note == NOTE_KICK ? kick.kick_stop();
        note == NOTE_CLAP ? clap.clap_stop();
        note == NOTE_RIDE ? ride.ride_stop();
        note == NOTE_CLOSED_HAT ? hat.hat_stop();
        note == NOTE_OPEN_HAT ? hat.hat_stop();
        note == NOTE_LOW_TOM ? low_tom.low_tom_stop();
        note == NOTE_MID_TOM ? mid_tom.mid_tom_stop();
        note == NOTE_HI_TOM ? hi_tom.hi_tom_stop();
        note == NOTE_RIM ? rim.rim_stop();
        note == NOTE_COWBELL ? cowbell.cowbell_stop();
        note == NOTE_SHAKER ? shaker.shaker_stop();
      ) : (notePtr[] == -2) ? ( // CC
        notePtr += 1;
        cur_cc = notePtr[];
        notePtr += 1;
        cur_cc == 1 ? (
          lastWheel = notePtr[]/128;
        )
      ) : (notePtr[] == -3) ? (
        notePtr += 1;
        pitchBend = notePtr[];
      );
      notePtr += 1;
      
      // Avoid constantly dereferencing by picking up the next one
      nextNote = notePtr[];
      remainingNotes = nextNote != -1337;
    );
  );
  
  curSample += 1;
  smoothWheel = .99 * smoothWheel + .01 * lastWheel;
);

midi.processMIDISample();

function check_alive(y)
instance(ly, alive, hly, current_left, delta_left, current_right, delta_right, left_out, right_out)
local()
global()
(
  hly = max(hly, ly);
  ly = max(0.999 * ly, abs(y));
  // 0.00001584893 = -96 dB
  ly < 0.0000001584893 ? alive -= 1;

  current_left += delta_left;
  current_right += delta_right;
  left_out = y * current_left;
  right_out = y * current_right;
);

kick.alive ? kick.check_alive(kick.kick_tick()) : 0;
snare.alive ? snare.check_alive(snare.snare_tick()) : 0;
clap.alive ? clap.check_alive(clap.clap_tick()) : 0;
ride.alive ? ride.check_alive(ride.ride_tick()) : 0;
hat.alive ? hat.check_alive(hat.hat_tick()) : 0;
low_tom.alive ? low_tom.check_alive(low_tom.low_tom_tick()) : 0;
mid_tom.alive ? mid_tom.check_alive(mid_tom.mid_tom_tick()) : 0;
hi_tom.alive ? hi_tom.check_alive(hi_tom.hi_tom_tick()) : 0;
rim.alive ? rim.check_alive(rim.rim_tick()) : 0;
cowbell.alive ? cowbell.check_alive(cowbell.cowbell_tick()) : 0;
shaker.alive ? shaker.check_alive(shaker.shaker_tick()) : 0;

spl0 = 
  kick.left_out + 
  snare.left_out + 
  clap.left_out + 
  ride.left_out + 
  hat.left_out + 
  low_tom.left_out + 
  mid_tom.left_out + 
  hi_tom.left_out + 
  rim.left_out + 
  cowbell.left_out + 
  shaker.left_out;
spl1 = 
  kick.right_out + 
  snare.right_out + 
  clap.right_out + 
  ride.right_out + 
  hat.right_out + 
  low_tom.right_out + 
  mid_tom.right_out + 
  hi_tom.right_out + 
  rim.right_out + 
  cowbell.right_out + 
  shaker.right_out;

audio_buffer[audio_buffer_idx] = 0.5 * (spl0 + spl1);
audio_buffer_idx += 1;
audio_buffer_idx > osc_buffer ? audio_buffer_idx = 0;

@gfx
loaded = 0;
!loaded ? (
  loaded = gfx_loadimg(12, "./saikedrums_dependencies/font.png");
  gfx_setimgdim(13, img_w, img_h);
);

gfx_x = 0;
gfx_y = 0;

/* Background color */
gfx_dest = 13;
gfx_clear = 0;
gfx_set(0, 0, 0, 1);
gfx_rect(0, 0, img_w, img_h);

function reset_color()
(
  gfx_r = gfx_g = gfx_b = 0.0; gfx_a = 1.0;
  gfx_mode = 1;
);

side_pad = 3;
reset_color();

pad_size = 17;
pad_spacing = 3;
pad_region = (pad_size + pad_spacing) * 12;
cx = (img_w - pad_region) / 2;
cy = side_pad;
gfx_set(1, 0, 0, 0.1);

model = 12;

gfx_set(0.21, 0.21, 0.62, 1.0);
gfx_rect(cx - 2, cy + 6, pad_region + 1, pad_size + 4, 0);

gfx_set(0.21, 0.21, 0.62, 1.0);
gfx_rect(cx - 2, cy - 2, pad_region + 1, 7, 0);

function clamp(value, lb, ub)
local()
global()
(
  max(lb, min(ub, value))
);

function _knob_processMouse(hint, x, y, r, active, default, currentValue, which_button)
local(button, dx, dy, change, mul, over, current_time, last_button)
instance(cap, last_button, lx, ly, double_click, new_value, last_button_click)
global(hinter.set_hint, mouse_nx, mouse_ny, mouse_cap, mouse_wheel, last_cap, delta_time, combobox_open, x_offset, blit_scale)
(
  change = 0;
  !combobox_open ? (
    mul = 1;
    
    dx = mouse_nx - x;
    dy = mouse_ny - y;
    over = (dx*dx + dy*dy) < (r*r);
    mul *= blit_scale;
    (mouse_cap & 4) ? mul = mul * 0.1666666666667; /* CTRL */
    (mouse_cap & 8) ? mul = mul * 0.125; /* SHIFT */
    
    active ? (
      button = (mouse_cap & which_button) > 0;
      last_button = (last_cap & which_button) > 0;
      
      ( over == 1 ) ? (
        (mouse_wheel ~= 0) ? (
          new_value = currentValue + 0.0001 * mul * mouse_wheel;
          mouse_wheel = 0;
          new_value = clamp(currentValue, 0, 1);
          change = 1;
        );
      );
      
      ( button == 0 ) ? (
        ( over == 1 ) ? (
          hinter.set_hint(hint);
        );
      );
      
      double_click = 0;
      (button && !last_button && over) ? (
         time_precise(current_time);
         ( ( current_time - last_button_click ) < .25 ) ? (
            double_click = 1;
         ) : last_button_click = current_time;
      );
      
      ( button && cap == 1 ) ? (
        new_value = currentValue - 0.01 * mul * (mouse_ny - ly);
        change = 1;
      ) : ( cap = 0; );
      
      ( button && !last_button ) ? 
      (
        ( over ) ?
        (
          double_click ? (
            last_button_click = -100;
            change = 1;
            new_value = default;
          ) : ( 
            cap = 1;
          );
        );
      );
      
      lx = mouse_nx;
      ly = mouse_ny;
    );
  );
  
  change
);

function draw_knob(cx, cy, radius, color)
local(angle, dx, dy, value, vel_value, vel_angle, vel_arc)
instance(
  x, y, r, slider_idx, vel_slider_idx, max_vel_range, min_value, max_value, default, decay_label, new_value,
)
global(gfx_mode, gfx_a, gfx_x, gfx_y, gfx_r, gfx_g, gfx_b)
(
  x = cx; y = cy; r = radius;

  gfx_set(0.25, 0.25, 0.25, 1.0);
  colormodel(0.5*color);
  gfx_r = 0.12 + 0.25 * gfx_r;
  gfx_g = 0.12 + 0.25 * gfx_g;
  gfx_b = 0.12 + 0.25 * gfx_b;
  gfx_circle(cx, cy, radius, 1, 0);
  
  gfx_set(0, 0, 0, 0.7);
  gfx_circle(cx, cy, radius - 1, 0, 1);
  
  value = (slider(slider_idx) - min_value) / (max_value - min_value);
  vel_value = (slider(vel_slider_idx)) / max_vel_range;
  
  angle = 1.25 + 1.5 * value + 0.001;
  vel_angle = 1.5 * vel_value;
  
  colormodel(0.5*color);
  gfx_mode = 0;
  gfx_a = 0.25;
  gfx_circle(x, y, radius, 0, 0);
  
  gfx_mode = 1; gfx_a = 0.5;
  gfx_circle(x, y, radius, 0, 1);
  
  gfx_mode = 1; gfx_a = 1.0;
  gfx_arc(x, y, radius, 1.25 * $pi, angle * $pi, 0);
  
  
  vel_value ? (
    gfx_set(0, 1.0, 1.0, 1.0);
    gfx_a = 1;
    vel_arc = min(2.75 * $pi, max(1.25 * $pi, (angle + vel_angle) * $pi));
    gfx_arc(x, y, floor(radius), angle * $pi, vel_arc, 0);
    
    gfx_a = 0.3;
    gfx_arc(x, y, floor(radius) + 0.5, angle * $pi, vel_arc, 1);
    gfx_arc(x, y, floor(radius) - 0.5, angle * $pi, vel_arc, 1);
    gfx_a = 0.1;
    gfx_arc(x, y, floor(radius) + 1.5, angle * $pi, vel_arc, 1);
    gfx_arc(x, y, floor(radius) - 1.5, angle * $pi, vel_arc, 1);
  );
  
  colormodel(color);
  gfx_a = 0.2;
  gfx_circle(x, y, radius + 1, 0, 0);
  gfx_a = 0.2;
  gfx_circle(x, y, radius - 1, 0, 1);
  gfx_a = 0.2;
  gfx_circle(x, y, radius - 2, 0, 1);
  gfx_a = 0.05;
  gfx_circle(x, y, radius - 3, 0, 1);
  gfx_a = 0.03;
  gfx_circle(x, y, radius - 4, 0, 1);
  
  gfx_a = 0.25;
  gfx_circle(x, y, radius, 0, 1);
  gfx_circle(x, y, radius + 1, 0, 1);
  gfx_mode = 0;
  
  gfx_set(0.0, 0.0, 0.0, 1.0);
  dx = sin(angle * $pi);
  dy = -cos(angle * $pi);
  gfx_line(x + (radius - 4) * dx, y + (radius - 4) * dy, x + (radius - 2) * dx, y + (radius - 2) * dy, 1);
  gfx_line(x + (radius - 3) * dx, y + (radius - 3) * dy, x + (radius - 2) * dx, y + (radius - 2) * dy, 1);
  
  gfx_x = x + 4 * dx;
  gfx_y = y + 4 * dy;
  gfx_setpixel(0, 0, 0);
  
  this.lmb._knob_processMouse(this.hint, x, y, r, this.active, (default - min_value) / (max_value - min_value), value, 1) ? (
    slider_automate(slider(slider_idx) = max(min(1, this.lmb.new_value), 0) * (max_value - min_value) + min_value)
  );
  
  this.rmb._knob_processMouse(this.hint, x, y, r, this.active, 0.5, vel_value / 2 + 0.5, 2) ? (
    slider_automate(slider(vel_slider_idx) = max(min(1, this.rmb.new_value), 0) * (2 * max_vel_range) - max_vel_range);
  );
);

function draw_types(me, x, y)
local(choice_size)
instance(type_idx, type_slider, min_type, max_type)
global()
(
  /*type_idx = _type_idx;
  type_slider = _type_slider;
  min_type = _min_type;
  max_type = _max_type;*/
  choice_size = 3;
  gfx_set(0.2, 0.2, 0.2, 0.2);
  gfx_rect(x, y - 1, 17, 5, 0);
  x += 1;
  colormodel(me / 11);
  this.choice1.choice_toggle(x, y, choice_size, 0, type_slider, "");
  max_type > 0 ? this.choice2.choice_toggle(x + choice_size + 1, y, choice_size, 1, type_slider, "");
  max_type > 1 ? this.choice3.choice_toggle(x + 2 * choice_size + 2, y, choice_size, 2, type_slider, "");
  max_type > 2 ? this.choice4.choice_toggle(x + 3 * choice_size + 3, y, choice_size, 3, type_slider, "");
  
);

function draw_advanced(me, tx, ty)
local()
global(advanced_open, mouse_nx, mouse_ny, mouse_cap, last_cap)
instance(over_advanced, advanced, advanced_highlight)
(
  over_advanced = (mouse_nx <= (tx + 2)) && (mouse_ny <= (ty + 2)) && (mouse_nx >= (tx - 3)) && (mouse_ny >= (ty - 3));
  advanced_highlight = 0.5 * advanced_highlight + 0.5 * (over_advanced && (mouse_cap == 0));
  (advanced_open == (me + 1)) ? (
    gfx_set(0.21, 0.21, 0.62, 1.0);
  ) : (
    gfx_set(0.21, 0.21, 0.62, 0.4 + 0.3 * advanced_highlight * abs(sin(10 * time_precise())));
  );
  
  (over_advanced && (mouse_cap & 1 == 1) && (last_cap == 0)) ? (
    (advanced_open != (me + 1)) ? (
      advanced_open = me + 1;
    ) : (
      advanced_open = 0;
    );
  );
  
  gfx_triangle(tx, ty, tx - 3, ty, tx, ty - 3);
);

function draw_pad(me, cy, pad_size, label, hint, override_ly, has_advanced)
local(tapped, highlight, knob_radius, knob_spacing, cy2)
global(cx, select, pad_spacing)
instance(hly, is_closed, height, max_y)
(
  gfx_set(1, 1, 1, 1);
  this.txt_measure(label);
  
  gfx_set(0.21, 0.21, 0.62, 1.0);
  height = 6 * pad_size;
  gfx_rect(cx - 2, cy + 6, pad_size + 4, height, 0);
  max_y = cy + 6 + height;
  
  has_advanced ? (
    this.draw_advanced(me, cx + pad_size - 1, cy + height + 3);
  );
  
  gfx_set(0.02, 0.02, 0.02, 1);
  txt_blit(label, cx + 0.5 * (pad_size - this.txt_w + 1), cy);
  
  cy += 8;

  gfx_set(1, 1, 1, 1);
  knob_radius = 7;
  knob_spacing = 4;
  
  cy2 = ceil(cy + pad_size + pad_size / 2) + 4;
  
  this.draw_types(me, cx, cy2 - 9);
  this.gain.draw_knob(cx + floor(pad_size / 2), cy2 + knob_spacing, knob_radius, me / 11);
  this.pan.draw_knob(cx + floor(pad_size / 2), cy2 + 2 * knob_spacing + ceil(2 * knob_radius), knob_radius, me / 11);
  this.tune.draw_knob(cx + floor(pad_size / 2), cy2 + 3 * knob_spacing + ceil(4 * knob_radius), knob_radius, me / 11);
  this.decay.draw_knob(cx + floor(pad_size / 2), cy2 + 4 * knob_spacing + ceil(6 * knob_radius), knob_radius, me / 11);
  
  colormodel(me / 11);
  tapped = 0;
  
  /* Annoying specialization for the hihat which uses two pads for one audio stream */
  highlight = 0;
  override_ly ? (
    (override_ly == 1) ? (
      is_closed ? (
        highlight = hly;
        hly = 0;
      );
    ) : (
      (is_closed == 0) ? (
        highlight = hly;
        hly = 0;
      );
    );
  ) : (
    highlight = hly;
    hly = 0;
  );
  
  this.tap_pad(me, cx, cy, pad_size, select, hint, 2.0 * highlight) ? (
    tapped = 1;
  );
  
  cx += pad_size + pad_spacing;
  
  tapped
);

SCREEN_SHAKE_AMNT = 3;
kick.draw_pad(0, cy, pad_size, "KCK", "Kickdrum", 0, 1) ? ( kick.kick_update(1); kick.kick_reset(); shake = SCREEN_SHAKE_AMNT + 7; );
snare.draw_pad(1, cy, pad_size, "SNR", "Snare", 0, 1) ? ( snare.snare_update(1); snare.snare_reset(); shake = SCREEN_SHAKE_AMNT; );
clap.draw_pad(2, cy, pad_size, "CLP", "Clap", 0, 0) ? ( clap.clap_update(1); clap.clap_reset(); );
ride.draw_pad(3, cy, pad_size, "CYM", "Cymbal", 0, 0) ? ( ride.ride_update(1); ride.ride_reset(); );
hat.draw_pad(4, cy, pad_size, "CHH", "Closed Hat", 1, 0) ? ( hat.hat_update(1); hat.hat_reset(1); );
hat.draw_pad(5, cy, pad_size, "OHH", "Open Hat", 2, 0) ? ( hat.hat_update(1); hat.hat_reset(0); );
shaker.draw_pad(6, cy, pad_size, "SHK", "Shaker", 0, 0) ? ( shaker.shaker_update(1); shaker.shaker_reset(); );
low_tom.draw_pad(7, cy, pad_size, "LT", "Low Tom", 0, 0) ? ( low_tom.low_update(1); low_tom.low_tom_reset(); );
mid_tom.draw_pad(8, cy, pad_size, "MT", "Mid Tom", 0, 0) ? ( mid_tom.mid_update(1); mid_tom.mid_tom_reset(); );
hi_tom.draw_pad(9, cy, pad_size, "HT", "High Tom", 0, 0) ? ( hi_tom.high_update(1); hi_tom.hi_tom_reset(); );
rim.draw_pad(10, cy, pad_size, "RIM", "Rimshot / Clave", 0, 0) ? ( rim.rim_update(1); rim.rim_reset(); );
cowbell.draw_pad(11, cy, pad_size, "COW", "Cowbell", 0, 0) ? ( cowbell.cowbell_update(1); cowbell.cowbell_reset(); );

show_ui = 0;
show_ui ? (

  cy = 3;
  filters.multi_slider_ui(8, 3, cy, pad_width, 8, 20, 22050, 1);
  filters.multi_slider_notch_nearest(9, 41);
  filters.multi_slider_notch_nearest(10, 42);
  filters.multi_slider_notch_nearest(11, 43);
  filters.multi_slider_notch_nearest(12, 44);
  filters.multi_slider_notch_ui(9, 41, "Side cut frequency", 0.5, 0.6, 1.0);
  filters.multi_slider_notch_ui(10, 42, "Low cut frequency", 1.0, 1.0, 1.0);
  filters.multi_slider_notch_ui(11, 43, "High cut frequency", 1.0, 1.0, 1.0);
  filters.multi_slider_notch_ui(12, 44, "Damping factor", 0.5, 0.6, 1.0);
  
  cy += 9;
  time_slider.slider_ui(5, 3, cy, pad_width, 8, sprintf(9, "%d", time_ms), "Reverb time in\nmilliseconds");
  
  cy += 10;
  
  reset_color();
  txt_blit("Verb", 5, cy);
  choicev1.choice_toggle(gfx_x, cy, 4, 0, 3, "Sparse");
  choicev2.choice_toggle(gfx_x, cy, 4, 1, 3, "Dense");
  choicev3.choice_toggle(gfx_x, cy, 4, 2, 3, "Delay-like");
  verb_pad.xy_pad(4, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  txt_blit("Grain", 5, cy);
  choiceg1.choice_toggle(gfx_x, cy, 4, 0, 30, "Tempo-sync");
  choiceg2.choice_toggle(gfx_x, cy, 4, 1, 30, "Burst");
  choiceg3.choice_toggle(gfx_x, cy, 4, 2, 30, "Rapid");
  choiceg4.choice_toggle(gfx_x, cy, 4, 3, 30, "Beat synced\ndoubler");
  choiceg5.choice_toggle(gfx_x, cy, 4, 4, 30, "Stochastic\nBandpass");
  choiceg6.choice_toggle(gfx_x, cy, 4, 5, 30, "Slow");
  grain_pad.xy_pad(3, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  verb_mix == 0 ? gfx_a = 0.1;
  txt_blit("Shimmer", 5, cy);
  
  //shimmer_mode
  choice1.choice_toggle(gfx_x, cy, 4, 0, 11, "Regular shimmers\nLow (X) High (Y)");
  choice2.choice_toggle(gfx_x, cy, 4, 1, 11, "Low shimmer is\nrectified (X)");
  choice3.choice_toggle(gfx_x, cy, 4, 2, 11, "Octaved low\nshimmer (X)");
  shimmer_pad.xy_pad(1, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  verb_mix == 0 ? gfx_a = 0.1;
  txt_blit("Haunt", 5, cy);
  choiceh1.choice_toggle(gfx_x, cy, 4, 0, 20, "Freq-Shifter");
  choiceh2.choice_toggle(gfx_x, cy, 4, 1, 20, "Spinner");
  choiceh3.choice_toggle(gfx_x, cy, 4, 2, 20, "Ghostly Chill");
  choiceh4.choice_toggle(gfx_x, cy, 4, 3, 20, "Incoherence");
  haunt.xy_pad(2, 3, cy + 5, pad_width, pad_height);
  
);

gfx_set(1, 1, 1, 0.3);
txt_blit("DD-101", side_pad, img_h - 6);
txt_blit("ALPHA VERSION", img_w - 66, img_h - 6);

function draw_oscilloscope(x, y, w, h)
global(
  gfx_x, gfx_y, gfx_r, gfx_g, gfx_b, gfx_a, gfx_mode, color_model,
  audio_buffer, x_step, osc_buffer, osc_downsample_factor, osc_skipfactor
)
local(ix, yc, hh, phh, y_top, y_bottom)
instance()
(
  gfx_x = x;
  ix = 0;
  colormodel(0.4);
  gfx_mode = 1;
  gfx_a = 0.4;
  hh = 0.5 * h;
  phh = 0.67 * h;
  yc = y + hh;
  y_top = y + h - 2;
  y_bottom = y + 2;
  x_step = w / (osc_buffer / osc_skipfactor);
  loop(osc_buffer / osc_skipfactor,
    gfx_y = yc + audio_buffer[ix] * phh;
    (gfx_y < y_top) && (gfx_y > y_bottom) ? (
      gfx_setpixel(gfx_r, gfx_g, gfx_b);
    );
    ix += osc_skipfactor;
    gfx_x += x_step;
  );
);

//gfx_rect(0, kick.max_y, img_w, img_h - kick.max_y - 9);
(advanced_open == 0) ? (
  draw_oscilloscope(0, kick.max_y, img_w, img_h - kick.max_y - 9);
) : (advanced_open == 1) ? (
  strip_x = x + 6;
  strip_y = kick.max_y + 3;
  strip_h = img_h - kick.max_y - 9 - 6;

  gfx_set(0.21, 0.21, 0.62, 1.0);
  gfx_rect(strip_x, strip_y, img_w - 15, strip_h, 0);
  knob_radius = 7;
  knob_spacing = 6;
  cx = strip_x + floor(knob_radius / 2) - 1;
  cy = strip_y + floor((strip_h - knob_radius) / 2) - 1 - 2;
  
  kick.details.gain.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 1 / 11);
  cx += knob_spacing + 2 * knob_radius;
  kick.details.decay.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 2 / 11);
  cx += knob_spacing + 2 * knob_radius;
  kick.details.pitch_decay.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 3 / 11);
  cx += knob_spacing + 2 * knob_radius;
  kick.details.tune.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 4 / 11);
  cx += knob_spacing + 2 * knob_radius;
  kick.details.amp_decay.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 5 / 11);
  cx += knob_spacing + 2 * knob_radius;
  kick.details.pitch_envelope.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 6 / 11);
  cx += knob_spacing + 2 * knob_radius;
  kick.details.noise_envelope.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 7 / 11);
  cx += knob_spacing + 2 * knob_radius;
  
  draw_oscilloscope(cx, kick.max_y + 3, img_w - cx - 11, img_h - kick.max_y - 9 - 6);
) : (advanced_open == 2) ? (
  strip_x = x + 6;
  strip_y = kick.max_y + 3;
  strip_h = img_h - kick.max_y - 9 - 6;

  gfx_set(0.21, 0.21, 0.62, 1.0);
  gfx_rect(strip_x, strip_y, img_w - 15, strip_h, 0);
  knob_radius = 7;
  knob_spacing = 6;
  cx = strip_x + floor(knob_radius / 2) - 1;
  cy = strip_y + floor((strip_h - knob_radius) / 2) - 1 - 2;
  
  snare.details.gain.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 1 / 11);
  cx += knob_spacing + 2 * knob_radius;
  snare.details.decay.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 2 / 11);
  cx += knob_spacing + 2 * knob_radius;
  snare.details.amp_decay.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 3 / 11);
  cx += knob_spacing + 2 * knob_radius;
  snare.details.tune.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 4 / 11);
  cx += knob_spacing + 2 * knob_radius;
  snare.details.pitch_envelope.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 5 / 11);
  cx += knob_spacing + 2 * knob_radius;
  snare.details.noise_envelope.draw_knob(cx + floor(pad_size / 2), cy + knob_spacing, knob_radius, 6 / 11);
  cx += knob_spacing + 2 * knob_radius;
  
  draw_oscilloscope(cx, kick.max_y + 3, img_w - cx - 11, img_h - kick.max_y - 9 - 6);
);


hinter.draw_hints();

gfx_dest = -1;
gfx_set(1, 1, 1, 1);

blit_scale = floor(min(gfx_h / img_h, gfx_w / img_w));
x_offset = (gfx_w - blit_scale * img_w) * 0.5;
y_offset = (gfx_h - blit_scale * img_h) * 0.5;
gfx_x = x_offset; gfx_y = y_offset;
gfx_x += rand() * shake;
gfx_y += rand() * shake;
shake > 0 ? shake -= 1;

/*!show_ui ? (
  gfx_set(10/255, 31/255, 49/255, 1);
  gfx_rect(0, 0, gfx_w, gfx_h);
);*/

gfx_set(1, 1, 1, 1);
gfx_mode = 4;
gfx_blit(13, blit_scale, 0);

granulator_error ? (
  gfx_x = 0;
  gfx_y = 0;
  gfx_printf("FATAL: REQUESTED TOO MANY SAMPLES");
);

last_cap = mouse_cap;
last_mouse_x = mouse_x;
last_mouse_y = mouse_y;
mouse_nx = (mouse_x - x_offset) / blit_scale;
mouse_ny = (mouse_y - y_offset) / blit_scale;
