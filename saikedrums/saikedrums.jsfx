desc:Saike Dum Drum
slider1:kick_type=0<0,3,1>-Kick Type
slider2:kick_pitch_decay=0.7<0,1,.00001>-Kick Pitch Decay
slider3:kick_tune=0.15<0,1,.00001>-Kick Minimum Pitch
slider4:kick_amp_decay=0.3<0,1,.00001>-Kick Amp Decay
slider5:kick_envelope=0.3<0,0.5,.00001>-Kick Pitch Envelope
slider6:kick_noise_envelope=0.78<0,1,.000001>-Noise
slider7:kick_decay=0<0,1,0.00001>-Kick decay
slider8:kick_gain=0<-24,6,0.0001>-Kick gain
slider9:kick_pan=0<-1,1,0.0001>-Kick panning

slider10:snare_type=1<0,3,1>-Snare type
slider11:snare_decay=0.67<0,1,.00001>-Snare Pitch Decay
slider12:snare_tune=0<0,1,.00001>-Snare Minimum Pitch
slider13:snare_amp_decay=0.3<0,1,.00001>-Snare amplitude decay
slider14:snare_envelope=0.3<0,0.5,.00001>-Snare Pitch Envelope
slider15:snare_noise_decay=0.2<0,1,.00001>-Snare Noise Decay
slider16:snare_gain=0<-24,6,0.0001>-Snare gain
slider17:snare_pan=0<-1,1,0.0001>-Snare panning

slider20:clap_type=0<0,1,1>-Clap type
slider21:clap_attack=0.5<0,1,.00001>-Clap Attack
slider22:clap_decay=0.25<0,1,.00001>-Clap Decay
slider23:clap_gain=0<-24,6,0.0001>-Clap gain
slider24:clap_pan=0<-1,1,0.0001>-Clap panning

slider25:rim_type=0<0,2,1>-Rim type
slider26:rim_decay=0.5<0,1,0.0001>-Rim decay
slider27:rim_tune=0.5<0,1,0.0001>-Rim tune
slider28:rim_gain=0<-24,6,0.0001>-Rim gain
slider29:rim_pan=0<-1,1,0.0001>-Rim panning

slider30:hat_type=0<0,1,1>-Hat type
slider31:hat_attack=0.5<0,1,0.00001>-Hat attack
slider32:hat_decay=0.5<0,1,0.00001>-Hat decay
slider33:hat_tone=0.5<0,1,0.00001>-Hat tone
slider34:hat_body=0.5<0, 1.2, 0.0001>-Hat body
slider35:hat_gain=0<-24,6,0.0001>-Hat gain
slider36:hat_pan=0<-1,1,0.0001>-Hat panning

slider37:cowbell_type=0<0,2,1>-Cowbell type
slider38:cowbell_tune=0.5<0,1,0.0001>-Cowbell tune
slider39:cowbell_decay=0.5<0,1,0.0001>-Cowbell decay
slider40:cowbell_gain=0<-24,6,0.0001>-Cowbell gain
slider41:cowbell_pan=0<-1,1,0.0001>-Cowbell panning

slider42:ride_type=0<0,1,1>-Ride type
slider43:ride_attack=0.5<0,1,0.00001>-Ride attack
slider44:ride_decay=0.5<0,1,0.00001>-Ride decay
slider45:ride_tone=0.5<0,1,0.00001>-Ride tone
slider46:ride_duty=0.4798<0.2,0.8,0.00001>-Ride duty cycle
slider47:ride_gain=0<-24,6,0.0001>-Ride gain
slider48:ride_pan=0<-1,1,0.0001>-Ride panning

slider49:shaker_type=0<0,1,1>-Shaker type
slider50:shaker_tune=0.5<0,1,0.001>-Shaker tune
slider51:shaker_decay=0.5<0,1,0.001>-Shaker decay
slider52:shaker_gain=0<-24,6,0.0001>-Shaker gain
slider53:shaker_pan=0<-1,1,0.0001>-Shaker panning

slider54:tom_type=0<0,2,1>-Tom type
slider55:low_tom_tune=0.5<0,1,0.0001>-Low tom tune
slider56:low_tom_decay=0.5<0,1,0.0001>-Low tom decay
slider57:low_tom_gain=0<-24,6,0.0001>-Low tom gain
slider58:low_tom_pan=0<-1,1,0.0001>-Low tom panning

slider59:mid_tom_tune=0.5<0,1,0.0001>-Mid tom tune
slider60:mid_tom_decay=0.5<0,1,0.0001>-Mid tom decay
slider61:mid_tom_gain=0<-24,6,0.0001>-Mid tom gain
slider62:mid_tom_pan=0<-1,1,0.0001>-Mid tom panning

slider63:high_tom_tune=0.5<0,1,0.0001>-High tom tune
slider64:high_tom_decay=0.5<0,1,0.0001>-High tom decay
slider65:high_tom_gain=0<-24,6,0.0001>-High tom gain
slider66:high_tom_pan=0<-1,1,0.0001>-High tom panning

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import saikedrums_freq_shift.jsfx-inc
import saikedrums_triggered_midi.jsfx-inc
import saikedrums_basic_filters.jsfx-inc
import saikedrums_drum_elements.jsfx-inc
import saikedrums_pixel_gfx.jsfx-inc

@init
img_w = 256;
img_h = 150;
osc_downsample_factor = 64;
osc_skipfactor = 2;
osc_buffer = img_w * osc_downsample_factor;

CURRENT_VERSION = 1;
version = CURRENT_VERSION;

israte = 1.0 / srate;
freemem = midi.initializeMIDI(free_mem, 1, 1);
freemem = (audio_buffer = freemem) + img_w * 8;
audio_buffer_idx = 0;

function initialize_knob(_slider_idx, _min_value, _max_value, _default, _label)
local()
global()
instance(slider_idx, min_value, max_value, default, label, active)
(
  active = 1;
  slider_idx = _slider_idx;
  min_value = _min_value;
  max_value = _max_value;
  default = _default;
  label = _label;
);

function initialize_type_toggle(_type_idx, _type_slider, _min_type, _max_type)
local()
global()
instance(type_idx, type_slider, min_type, max_type)
(
  type_idx = _type_idx;
  type_slider = _type_slider;
  min_type = _min_type;
  max_type = _max_type;
);

kick.initialize_type_toggle(1, 1, 0, 3);
snare.initialize_type_toggle(21, 10, 0, 2);
clap.initialize_type_toggle(3, 20, 0, 1);
ride.initialize_type_toggle(4, 42, 0, 1);
hat.initialize_type_toggle(5, 30, 0, 1);
shaker.initialize_type_toggle(6, 49, 0, 1);
low_tom.initialize_type_toggle(7, 54, 0, 2);
mid_tom.initialize_type_toggle(7, 54, 0, 2);
hi_tom.initialize_type_toggle(7, 54, 0, 2);
rim.initialize_type_toggle(8, 25, 0, 2);
cowbell.initialize_type_toggle(9, 37, 0, 2);

MIN_GAIN = -12;
MAX_GAIN = 12;
DEFAULT_GAIN = 0;
GAIN_LABEL = "Gain";
kick.gain.initialize_knob(8, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
snare.gain.initialize_knob(16, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
clap.gain.initialize_knob(23, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
ride.gain.initialize_knob(47, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
hat.gain.initialize_knob(35, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
hat.gain.initialize_knob(35, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
shaker.gain.initialize_knob(52, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
low_tom.gain.initialize_knob(57, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
mid_tom.gain.initialize_knob(61, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
hi_tom.gain.initialize_knob(65, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
rim.gain.initialize_knob(28, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);
cowbell.gain.initialize_knob(40, MIN_GAIN, MAX_GAIN, DEFAULT_GAIN, GAIN_LABEL);

MIN_PAN = -1;
MAX_PAN = 1;
DEFAULT_PAN = 0;
PAN_LABEL = "Panning";
kick.pan.initialize_knob(9, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
snare.pan.initialize_knob(17, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
clap.pan.initialize_knob(24, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
ride.pan.initialize_knob(48, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
hat.pan.initialize_knob(36, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
hat.pan.initialize_knob(36, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
shaker.pan.initialize_knob(53, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
low_tom.pan.initialize_knob(58, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
mid_tom.pan.initialize_knob(62, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
hi_tom.pan.initialize_knob(66, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
rim.pan.initialize_knob(29, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);
cowbell.pan.initialize_knob(41, MIN_PAN, MAX_PAN, DEFAULT_PAN, PAN_LABEL);

MIN_TUNE = 0;
MAX_TUNE = 1;
DEFAULT_TUNE = 0.5;
TUNE_LABEL = "Tune";
kick.tune.initialize_knob(3, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL);
snare.tune.initialize_knob(12, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL);
clap.tune.initialize_knob(21, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Attack");
ride.tune.initialize_knob(45, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Tone");
hat.tune.initialize_knob(33, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Tone");
hat.tune.initialize_knob(33, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, "Tone");
shaker.tune.initialize_knob(50, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL);
low_tom.tune.initialize_knob(55, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL);
mid_tom.tune.initialize_knob(59, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL);
hi_tom.tune.initialize_knob(63, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL);
rim.tune.initialize_knob(27, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL);
cowbell.tune.initialize_knob(38, MIN_TUNE, MAX_TUNE, DEFAULT_TUNE, TUNE_LABEL);

MIN_DECAY = 0;
MAX_DECAY = 1;
DEFAULT_DECAY = 0.5;
DECAY_LABEL = "Decay";
kick.decay.initialize_knob(7, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
snare.decay.initialize_knob(11, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
clap.decay.initialize_knob(22, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
ride.decay.initialize_knob(44, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
hat.decay.initialize_knob(32, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
hat.decay.initialize_knob(32, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
shaker.decay.initialize_knob(51, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
low_tom.decay.initialize_knob(56, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
mid_tom.decay.initialize_knob(60, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
hi_tom.decay.initialize_knob(64, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
rim.decay.initialize_knob(26, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);
cowbell.decay.initialize_knob(39, MIN_DECAY, MAX_DECAY, DEFAULT_DECAY, DECAY_LABEL);

@serialize
file_var(0, version);
file_var(0, freq_shift);

version = CURRENT_VERSION;

@slider

@block
israte = 1.0 / srate;
invblock = 1.0 / samplesblock;
time_factor = 2302.58509299 / srate; // - ln(0.1) * 1000 (since we want to work in ms)
kick_bottom = log((20 + 80 * kick_tune)/22050);
snare_bottom = log((170 + 230 * snare_tune)/22050);


function lerp_output_settings_block(gain_slider, pan_slider)
local(gain, pan, target_left, target_right)
global(invblock)
instance(current_left, current_right, delta_left, delta_right)
(
  pan = 0.5 * (slider(pan_slider) + 1);
  gain = pow(10, slider(gain_slider) / 20);
  target_left = gain * sin(0.5 * pan * $pi);
  target_right = gain * sin(0.5 * (1.0 - pan) * $pi);

  delta_left = (target_left - current_left) * invblock;
  delta_right = (target_right - current_right) * invblock;
);

kick.lerp_output_settings_block(8, 9);
snare.lerp_output_settings_block(16, 17);
clap.lerp_output_settings_block(23, 24);
ride.lerp_output_settings_block(47, 48);
hat.lerp_output_settings_block(35, 36);
low_tom.lerp_output_settings_block(57, 58);
mid_tom.lerp_output_settings_block(61, 62);
hi_tom.lerp_output_settings_block(65, 66);
rim.lerp_output_settings_block(28, 29);
cowbell.lerp_output_settings_block(40, 41);
shaker.lerp_output_settings_block(52, 53);

midi.processMIDIBlock();

@sample
NOTE_KICK = 60;
NOTE_SNARE = 62;
NOTE_CLAP = 64;
NOTE_CLOSED_HAT = 65;
NOTE_OPEN_HAT = 66;
NOTE_RIDE = 67;
NOTE_HI_TOM = 68;
NOTE_MID_TOM = 69;
NOTE_LOW_TOM = 70;
NOTE_RIM = 71;
NOTE_COWBELL = 72;
NOTE_SHAKER = 73;

function processMIDISample()
local(cur_cc, i, note
      vel)
global(play_state, ttt,
       kick.kick_reset,
       kick.kick_stop,
       snare.snare_reset,
       clap.clap_reset,
       clap.clap_stop,
       ride.ride_reset,
       ride.ride_stop,
       hat.hat_reset,
       hat.hat_stop,
       low_tom.low_tom_reset,
       mid_tom.mid_tom_reset,
       hi_tom.hi_tom_reset,
       low_tom.low_tom_stop,
       mid_tom.mid_tom_stop,
       hi_tom.hi_tom_stop,
       rim.rim_reset,
       rim.rim_stop,
       cowbell.cowbell_reset,
       cowbell.cowbell_stop,
       shaker.shaker_reset,
       shaker.shaker_stop,
       NOTE_OPEN_HAT,
       NOTE_CLOSED_HAT,
       NOTE_RIDE,
       NOTE_CLAP,
       NOTE_KICK,
       NOTE_SNARE,
       NOTE_LOW_TOM,
       NOTE_MID_TOM,
       NOTE_HI_TOM,
       NOTE_RIM,
       NOTE_COWBELL,
       NOTE_SHAKER,
       )
instance(lastWheel, smoothWheel, notePtr, remainingNotes, nextNote, curSample, pitchBend)
(
  
  // Does this plugin respond to MIDI signals?
  // Take notes from the stack until we hit the end marker -1
  (remainingNotes) ? (
    while(nextNote == curSample) (
      notePtr += 1;
      (notePtr[] > 0) ? ( // note-on
        vel = notePtr[]/127;
        notePtr += 1;
        note = noteptr[];
        note == NOTE_KICK ? kick.kick_reset();
        note == NOTE_SNARE ? snare.snare_reset();
        note == NOTE_CLAP ? clap.clap_reset();
        note == NOTE_RIDE ? ride.ride_reset();
        note == NOTE_CLOSED_HAT ? hat.hat_reset(1);
        note == NOTE_OPEN_HAT ? hat.hat_reset(0);
        note == NOTE_LOW_TOM ? low_tom.low_tom_reset();
        note == NOTE_MID_TOM ? mid_tom.mid_tom_reset();
        note == NOTE_HI_TOM ? hi_tom.hi_tom_reset();
        note == NOTE_RIM ? rim.rim_reset();
        note == NOTE_COWBELL ? cowbell.cowbell_reset();
        note == NOTE_SHAKER ? shaker.shaker_reset();
        ttt += 1;
      ) : (notePtr[] == -1) ? ( // note-off
        notePtr += 1;
        note = notePtr[];
        note == NOTE_KICK ? kick.kick_stop();
        note == NOTE_CLAP ? clap.clap_stop();
        note == NOTE_RIDE ? ride.ride_stop();
        note == NOTE_CLOSED_HAT ? hat.hat_stop();
        note == NOTE_OPEN_HAT ? hat.hat_stop();
        note == NOTE_LOW_TOM ? low_tom.low_tom_stop();
        note == NOTE_MID_TOM ? mid_tom.mid_tom_stop();
        note == NOTE_HI_TOM ? hi_tom.hi_tom_stop();
        note == NOTE_RIM ? rim.rim_stop();
        note == NOTE_COWBELL ? cowbell.cowbell_stop();
        note == NOTE_SHAKER ? shaker.shaker_stop();
      ) : (notePtr[] == -2) ? ( // CC
        notePtr += 1;
        cur_cc = notePtr[];
        notePtr += 1;
        cur_cc == 1 ? (
          lastWheel = notePtr[]/128;
        )
      ) : (notePtr[] == -3) ? (
        notePtr += 1;
        pitchBend = notePtr[];
      );
      notePtr += 1;
      
      // Avoid constantly dereferencing by picking up the next one
      nextNote = notePtr[];
      remainingNotes = nextNote != -1337;
    );
  );
  
  curSample += 1;
  smoothWheel = .99 * smoothWheel + .01 * lastWheel;
);

midi.processMIDISample();

function check_alive(y)
instance(ly, alive, hly, current_left, delta_left, current_right, delta_right, left_out, right_out)
local()
global()
(
  hly = max(hly, ly);
  ly = max(0.999 * ly, abs(y));
  // 0.00001584893 = -96 dB
  ly < 0.0000001584893 ? alive -= 1;

  current_left += delta_left;
  current_right += delta_right;
  left_out = y * current_left;
  right_out = y * current_right;
);

kick.alive ? kick.check_alive(kick.kick_tick()) : 0;
snare.alive ? snare.check_alive(snare.snare_tick()) : 0;
clap.alive ? clap.check_alive(clap.clap_tick()) : 0;
ride.alive ? ride.check_alive(ride.ride_tick()) : 0;
hat.alive ? hat.check_alive(hat.hat_tick()) : 0;
low_tom.alive ? low_tom.check_alive(low_tom.low_tom_tick()) : 0;
mid_tom.alive ? mid_tom.check_alive(mid_tom.mid_tom_tick()) : 0;
hi_tom.alive ? hi_tom.check_alive(hi_tom.hi_tom_tick()) : 0;
rim.alive ? rim.check_alive(rim.rim_tick()) : 0;
cowbell.alive ? cowbell.check_alive(cowbell.cowbell_tick()) : 0;
shaker.alive ? shaker.check_alive(shaker.shaker_tick()) : 0;

spl0 = 
  kick.left_out + 
  snare.left_out + 
  clap.left_out + 
  ride.left_out + 
  hat.left_out + 
  low_tom.left_out + 
  mid_tom.left_out + 
  hi_tom.left_out + 
  rim.left_out + 
  cowbell.left_out + 
  shaker.left_out;
spl1 = 
  kick.right_out + 
  snare.right_out + 
  clap.right_out + 
  ride.right_out + 
  hat.right_out + 
  low_tom.right_out + 
  mid_tom.right_out + 
  hi_tom.right_out + 
  rim.right_out + 
  cowbell.right_out + 
  shaker.right_out;

audio_buffer[audio_buffer_idx] = 0.5 * (spl0 + spl1);
audio_buffer_idx += 1;
audio_buffer_idx > osc_buffer ? audio_buffer_idx = 0;

@gfx
loaded = 0;
!loaded ? (
  loaded = gfx_loadimg(12, "./saikedrums_dependencies/font.png");
  gfx_setimgdim(13, img_w, img_h);
);

gfx_x = 0;
gfx_y = 0;

/* Background color */
gfx_dest = 13;
gfx_clear = 0;
gfx_set(0, 0, 0, 1);
gfx_rect(0, 0, img_w, img_h);

function reset_color()
(
  gfx_r = gfx_g = gfx_b = 0.0; gfx_a = 1.0;
  gfx_mode = 1;
);

side_pad = 3;
reset_color();

pad_size = 17;
pad_spacing = 3;
pad_region = (pad_size + pad_spacing) * 12;
cx = (img_w - pad_region) / 2;
cy = side_pad;
gfx_set(1, 0, 0, 0.1);

model = 12;

gfx_set(0.21, 0.21, 0.62, 1.0);
gfx_rect(cx - 2, cy + 6, pad_region + 1, pad_size + 4, 0);

gfx_set(0.21, 0.21, 0.62, 1.0);
gfx_rect(cx - 2, cy - 2, pad_region + 1, 7, 0);

function clamp(value, lb, ub)
local()
global()
(
  max(lb, min(ub, value))
);


function _knob_processMouse(default, currentValue)
local(left, dx, dy, change, mul, over, current_time)
instance(hint, x, y, r, cap, last_left, lx, ly, active, last_left_click, double_click, new_value, capcap)
global(hinter.set_hint, mouse_nx, mouse_ny, mouse_cap, mouse_wheel, delta_time, combobox_open, x_offset, blit_scale)
(
  change = 0;
  !combobox_open ? (
    mul = 1;
    
    dx = mouse_nx - x;
    dy = mouse_ny - y;
    over = (dx*dx + dy*dy) < (r*r);
    capcap = over;
    mul *= blit_scale;
    (mouse_cap & 4) ? mul = mul * 0.1666666666667; /* CTRL */
    (mouse_cap & 8) ? mul = mul * 0.125; /* SHIFT */
    
    active ? (
      left = mouse_cap & 1;
      
      ( over == 1 ) ? (
        (mouse_wheel ~= 0) ? (
          new_value = currentValue + 0.0001 * mul * mouse_wheel;
          mouse_wheel = 0;
          new_value = clamp(currentValue, 0, 1);
          change = 1;
        );
      );
      
      ( left == 0 ) ? (
        ( over == 1 ) ? (
          hinter.set_hint(hint);
        );
      );
      
      double_click = 0;
      (left && !last_left) ? (
         time_precise(current_time);
         ( ( current_time - last_left_click ) < .25 ) ? (
            double_click = 1;
         ) : last_left_click = current_time;
      );
      
      ( left && cap == 1 ) ? (
        new_value = currentValue - 0.01 * mul * (mouse_ny - ly);
        change = 1;
      ) : ( cap = 0; );
      
      ( left && !last_left ) ? 
      (
        ( over ) ?
        (
          double_click ? (
            last_left_click = -100;
            change = 1;
            new_value = default;
          ) : ( 
            cap = 1;
          );
        );
      );
      
      last_left = left;
      lx = mouse_nx;
      ly = mouse_ny;
    );
  );
  
  change
);

function draw_knob(cx, cy, radius, color)
local(angle, dx, dy, value)
instance(x, y, r, slider_idx, min_value, max_value, default, decay_label, new_value)
global(gfx_mode, gfx_a, gfx_x, gfx_y, gfx_r, gfx_g, gfx_b)
(
  x = cx; y = cy; r = radius;

  gfx_set(0.25, 0.25, 0.25, 1.0);
  colormodel(color);
  gfx_r = 0.12 + 0.25 * gfx_r;
  gfx_g = 0.12 + 0.25 * gfx_g;
  gfx_b = 0.12 + 0.25 * gfx_b;
  gfx_circle(cx, cy, radius, 1, 0);
  
  gfx_set(0, 0, 0, 0.7);
  gfx_circle(cx, cy, radius - 1, 0, 1);
  
  value = (slider(slider_idx) - min_value) / (max_value - min_value);
  angle = 1.25 + 1.5 * value + 0.001;
  
  colormodel(color);
  gfx_mode = 0;
  gfx_a = 0.25;
  gfx_circle(x, y, radius, 0, 0);
  
  gfx_mode = 1; gfx_a = 0.5;
  gfx_circle(x, y, radius, 0, 1);
  
  gfx_mode = 1; gfx_a = 1.0;
  gfx_arc(x, y, radius, 1.25 * $pi, angle * $pi, 0);
  
  gfx_a = 0.2;
  gfx_circle(x, y, radius + 1, 0, 0);
  gfx_a = 0.2;
  gfx_circle(x, y, radius - 1, 0, 1);
  gfx_a = 0.2;
  gfx_circle(x, y, radius - 2, 0, 1);
  gfx_a = 0.05;
  gfx_circle(x, y, radius - 3, 0, 1);
  gfx_a = 0.03;
  gfx_circle(x, y, radius - 4, 0, 1);
  
  gfx_a = 0.25;
  gfx_circle(x, y, radius, 0, 1);
  gfx_circle(x, y, radius + 1, 0, 1);
  gfx_mode = 0;
  
  gfx_set(0.0, 0.0, 0.0, 1.0);
  dx = sin(angle * $pi);
  dy = -cos(angle * $pi);
  gfx_line(x + (radius - 4) * dx, y + (radius - 4) * dy, x + (radius - 2) * dx, y + (radius - 2) * dy, 1);
  gfx_line(x + (radius - 3) * dx, y + (radius - 3) * dy, x + (radius - 2) * dx, y + (radius - 2) * dy, 1);
  
  gfx_x = x + 4 * dx;
  gfx_y = y + 4 * dy;
  gfx_setpixel(0, 0, 0);
  
  this._knob_processMouse((default - min_value) / (max_value - min_value), value) ? (
    slider_automate(slider(slider_idx) = max(min(1, new_value), 0) * (max_value - min_value) + min_value)
  );
);

function draw_types(me, x, y)
local(choice_size)
instance(type_idx, type_slider, min_type, max_type)
global()
(
  /*type_idx = _type_idx;
  type_slider = _type_slider;
  min_type = _min_type;
  max_type = _max_type;*/
  choice_size = 3;
  gfx_set(0.2, 0.2, 0.2, 0.2);
  gfx_rect(x, y - 1, 17, 5, 0);
  x += 1;
  colormodel(me / 11);
  this.choice1.choice_toggle(x, y, choice_size, 0, type_slider, "");
  max_type > 0 ? this.choice2.choice_toggle(x + choice_size + 1, y, choice_size, 1, type_slider, "");
  max_type > 1 ? this.choice3.choice_toggle(x + 2 * choice_size + 2, y, choice_size, 2, type_slider, "");
  max_type > 2 ? this.choice4.choice_toggle(x + 3 * choice_size + 3, y, choice_size, 3, type_slider, "");
  
);

function draw_pad(me, cy, pad_size, label, hint, override_ly)
local(tapped, highlight, knob_radius, knob_spacing, cy2)
global(cx, select, pad_spacing)
instance(hly, is_closed, height, max_y)
(
  gfx_set(1, 1, 1, 1);
  this.txt_measure(label);
  
  gfx_set(0.21, 0.21, 0.62, 1.0);
  height = 6 * pad_size;
  gfx_rect(cx - 2, cy + 6, pad_size + 4, height, 0);
  max_y = cy + 6 + height;
  
  gfx_set(0.02, 0.02, 0.02, 1);
  txt_blit(label, cx + 0.5 * (pad_size - this.txt_w + 1), cy);
  
  cy += 8;

  gfx_set(1, 1, 1, 1);
  knob_radius = 7;
  knob_spacing = 4;
  
  cy2 = ceil(cy + pad_size + pad_size / 2) + 4;
  
  this.draw_types(me, cx, cy2 - 9);
  this.gain.draw_knob(cx + floor(pad_size / 2), cy2 + knob_spacing, knob_radius, me / 11);
  this.pan.draw_knob(cx + floor(pad_size / 2), cy2 + 2 * knob_spacing + ceil(2 * knob_radius), knob_radius, me / 11);
  this.tune.draw_knob(cx + floor(pad_size / 2), cy2 + 3 * knob_spacing + ceil(4 * knob_radius), knob_radius, me / 11);
  this.decay.draw_knob(cx + floor(pad_size / 2), cy2 + 4 * knob_spacing + ceil(6 * knob_radius), knob_radius, me / 11);
  
  colormodel(me / 11);
  tapped = 0;
  
  /* Annoying specialization for the hihat which uses two pads for one audio stream */
  highlight = 0;
  override_ly ? (
    (override_ly == 1) ? (
      is_closed ? (
        highlight = hly;
        hly = 0;
      );
    ) : (
      (is_closed == 0) ? (
        highlight = hly;
        hly = 0;
      );
    );
  ) : (
    highlight = hly;
    hly = 0;
  );
  
  this.tap_pad(me, cx, cy, pad_size, select, hint, 2.0 * highlight) ? (
    tapped = 1;
  );
  
  cx += pad_size + pad_spacing;
  
  tapped
);

SCREEN_SHAKE_AMNT = 3;
kick.draw_pad(0, cy, pad_size, "KCK", "Kickdrum", 0) ? ( kick.kick_reset(); shake = SCREEN_SHAKE_AMNT + 7; );
snare.draw_pad(1, cy, pad_size, "SNR", "Snare", 0) ? ( snare.snare_reset(); shake = SCREEN_SHAKE_AMNT; );
clap.draw_pad(2, cy, pad_size, "CLP", "Clap", 0) ? ( clap.clap_reset(); );
ride.draw_pad(3, cy, pad_size, "CYM", "Cymbal", 0) ? ( ride.ride_reset(); );
hat.draw_pad(4, cy, pad_size, "CHH", "Closed Hat", 1) ? ( hat.hat_reset(1); );
hat.draw_pad(5, cy, pad_size, "OHH", "Open Hat", 2) ? ( hat.hat_reset(0); );
shaker.draw_pad(6, cy, pad_size, "SHK", "Shaker", 0) ? ( shaker.shaker_reset(); );
low_tom.draw_pad(7, cy, pad_size, "LT", "Low Tom", 0) ? ( low_tom.low_tom_reset(); );
mid_tom.draw_pad(8, cy, pad_size, "MT", "Mid Tom", 0) ? ( mid_tom.mid_tom_reset(); );
hi_tom.draw_pad(9, cy, pad_size, "HT", "High Tom", 0) ? ( hi_tom.hi_tom_reset(); );
rim.draw_pad(10, cy, pad_size, "RIM", "Rimshot / Clave", 0) ? ( rim.rim_reset(); );
cowbell.draw_pad(11, cy, pad_size, "COW", "Cowbell", 0) ? ( cowbell.cowbell_reset(); );

show_ui = 0;
show_ui ? (

  cy = 3;
  filters.multi_slider_ui(8, 3, cy, pad_width, 8, 20, 22050, 1);
  filters.multi_slider_notch_nearest(9, 41);
  filters.multi_slider_notch_nearest(10, 42);
  filters.multi_slider_notch_nearest(11, 43);
  filters.multi_slider_notch_nearest(12, 44);
  filters.multi_slider_notch_ui(9, 41, "Side cut frequency", 0.5, 0.6, 1.0);
  filters.multi_slider_notch_ui(10, 42, "Low cut frequency", 1.0, 1.0, 1.0);
  filters.multi_slider_notch_ui(11, 43, "High cut frequency", 1.0, 1.0, 1.0);
  filters.multi_slider_notch_ui(12, 44, "Damping factor", 0.5, 0.6, 1.0);
  
  cy += 9;
  time_slider.slider_ui(5, 3, cy, pad_width, 8, sprintf(9, "%d", time_ms), "Reverb time in\nmilliseconds");
  
  cy += 10;
  
  reset_color();
  txt_blit("Verb", 5, cy);
  choicev1.choice_toggle(gfx_x, cy, 4, 0, 3, "Sparse");
  choicev2.choice_toggle(gfx_x, cy, 4, 1, 3, "Dense");
  choicev3.choice_toggle(gfx_x, cy, 4, 2, 3, "Delay-like");
  verb_pad.xy_pad(4, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  txt_blit("Grain", 5, cy);
  choiceg1.choice_toggle(gfx_x, cy, 4, 0, 30, "Tempo-sync");
  choiceg2.choice_toggle(gfx_x, cy, 4, 1, 30, "Burst");
  choiceg3.choice_toggle(gfx_x, cy, 4, 2, 30, "Rapid");
  choiceg4.choice_toggle(gfx_x, cy, 4, 3, 30, "Beat synced\ndoubler");
  choiceg5.choice_toggle(gfx_x, cy, 4, 4, 30, "Stochastic\nBandpass");
  choiceg6.choice_toggle(gfx_x, cy, 4, 5, 30, "Slow");
  grain_pad.xy_pad(3, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  verb_mix == 0 ? gfx_a = 0.1;
  txt_blit("Shimmer", 5, cy);
  
  //shimmer_mode
  choice1.choice_toggle(gfx_x, cy, 4, 0, 11, "Regular shimmers\nLow (X) High (Y)");
  choice2.choice_toggle(gfx_x, cy, 4, 1, 11, "Low shimmer is\nrectified (X)");
  choice3.choice_toggle(gfx_x, cy, 4, 2, 11, "Octaved low\nshimmer (X)");
  shimmer_pad.xy_pad(1, 3, cy + 5, pad_width, pad_height);
  
  cy += pad_spacing;
  
  reset_color();
  verb_mix == 0 ? gfx_a = 0.1;
  txt_blit("Haunt", 5, cy);
  choiceh1.choice_toggle(gfx_x, cy, 4, 0, 20, "Freq-Shifter");
  choiceh2.choice_toggle(gfx_x, cy, 4, 1, 20, "Spinner");
  choiceh3.choice_toggle(gfx_x, cy, 4, 2, 20, "Ghostly Chill");
  choiceh4.choice_toggle(gfx_x, cy, 4, 3, 20, "Incoherence");
  haunt.xy_pad(2, 3, cy + 5, pad_width, pad_height);
  
);

gfx_set(1, 1, 1, 0.3);
txt_blit("DD-101", side_pad, img_h - 6);
txt_blit("ALPHA VERSION", img_w - 66, img_h - 6);

function draw_oscilloscope(x, y, w, h)
global(
  gfx_x, gfx_y, gfx_r, gfx_g, gfx_b, gfx_a, gfx_mode, color_model,
  audio_buffer, x_step, osc_buffer, osc_downsample_factor, osc_skipfactor
)
local(ix, yc, hh, phh, y_top, y_bottom)
instance()
(
  gfx_x = x;
  ix = 0;
  colormodel(0.4);
  gfx_mode = 1;
  gfx_a = 0.4;
  hh = 0.5 * h;
  phh = 0.67 * h;
  yc = y + hh;
  y_top = y + h - 2;
  y_bottom = y + 2;
  x_step = w / (osc_buffer / osc_skipfactor);
  loop(osc_buffer / osc_skipfactor,
    gfx_y = yc + audio_buffer[ix] * phh;
    (gfx_y < y_top) && (gfx_y > y_bottom) ? (
      gfx_setpixel(gfx_r, gfx_g, gfx_b);
    );
    ix += osc_skipfactor;
    gfx_x += x_step;
  );
);

//gfx_rect(0, kick.max_y, img_w, img_h - kick.max_y - 9);
draw_oscilloscope(0, kick.max_y, img_w, img_h - kick.max_y - 9);


hinter.draw_hints();

gfx_dest = -1;
gfx_set(1, 1, 1, 1);

blit_scale = floor(min(gfx_h / img_h, gfx_w / img_w));
x_offset = (gfx_w - blit_scale * img_w) * 0.5;
y_offset = (gfx_h - blit_scale * img_h) * 0.5;
gfx_x = x_offset; gfx_y = y_offset;
gfx_x += rand() * shake;
gfx_y += rand() * shake;
shake > 0 ? shake -= 1;

/*!show_ui ? (
  gfx_set(10/255, 31/255, 49/255, 1);
  gfx_rect(0, 0, gfx_w, gfx_h);
);*/

gfx_set(1, 1, 1, 1);
gfx_mode = 4;
gfx_blit(13, blit_scale, 0);

granulator_error ? (
  gfx_x = 0;
  gfx_y = 0;
  gfx_printf("FATAL: REQUESTED TOO MANY SAMPLES");
);

last_cap = mouse_cap;
last_mouse_x = mouse_x;
last_mouse_y = mouse_y;
mouse_nx = (mouse_x - x_offset) / blit_scale;
mouse_ny = (mouse_y - y_offset) / blit_scale;
