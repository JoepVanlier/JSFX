// last_cap = mouse_cap;
// last_mouse_x = mouse_x;
// last_mouse_y = mouse_y;

@init
function colormodel(x)
global(model, gfx_a)
local(frac)
(
  // Metal,Tube,Beating,Beam open,Beam clamped,Membrane,Marimba,Pan,Voice (male),Voice (female)
  model == 0 ? (
    // Metal
    x = sqrt(x); gfx_set(0.2 + 0.67 * x, 0.2 + 0.3 * x, 0.2 + 0.8 * (1 - x), 0.8);
  ) : ( model == 1 ) ? (
    // Tube
    x = sqrt(x); gfx_set(0.3 + 0.67 * x, 0.5 - 0.3 * x, 0.2 + 0.8 * (1 - x), 0.8);
  ) : ( model == 2 ) ? (
    // Beating
    x = sqrt(x); gfx_set(1.0 * x, 0.84 * x + 0.44, 1.0 - x, 0.8);
  ) : ( model == 9 ) ? (
    // Female vocal
    x = sqrt(x);
    (x < 0.25) ? ( frac = (4 * x - 0); gfx_set(0.4745098039215686 + frac * 0.22745098039215683, 0.27058823529411763, 0.8 + frac * -0.07058823529411773); )
    : (x < 0.5) ? ( frac = (4 * x - 1); gfx_set(0.7019607843137254 + frac * 0.23921568627450984, 0.27058823529411763 + frac * 0.14901960784313728, 0.7294117647058823 + frac * -0.14117647058823524); )
    : (x < 0.75) ? ( frac = (4 * x - 2); gfx_set(0.9411764705882353 + frac * 0.05882352941176472, 0.4196078431372549 + frac * 0.23529411764705882, 0.5882352941176471 + frac * -0.01176470588235301); )
    : ( frac = (4 * x - 3); gfx_set(1.0, 0.6549019607843137 + frac * 0.10588235294117643, 0.5764705882352941 + frac * 0.05490196078431375); )
  ) : ( model == 4 ) ? (
    // Beam closed
    (x < 0.25) ? ( frac = (4 * x - 0); gfx_set(0.34901960784313724 + frac * 0.20000000000000007, 0.403921568627451 + frac * -0.09019607843137256, 1.0); )
    : (x < 0.5) ? ( frac = (4 * x - 1); gfx_set(0.5490196078431373 + frac * 0.4509803921568627, 0.3137254901960784 + frac * -0.07450980392156861, 1.0 + frac * -0.21568627450980393); )
    : (x < 0.75) ? ( frac = (4 * x - 2); gfx_set(1.0, 0.23921568627450981 + frac * 0.10980392156862742, 0.7843137254901961 + frac * -0.6196078431372549); )
    : ( frac = (4 * x - 3); gfx_set(1.0, 0.34901960784313724 + frac * 0.34509803921568627, 0.16470588235294117 + frac * -0.03529411764705881); )
  ) : ( model == 5 ) ? (
    // Membrane
    x = sqrt(x); gfx_set(1.0, 0.5 + 0.97 * x, 0.2 + 0.97 * x, 0.8);  // r_old = 1.2 + 0.97 * x
  ) : ( model == 6 ) ? (
    // Marimba
    x = sqrt(x);
    (x < 0.25) ? ( frac = (4 * x); gfx_set(0.596078431372549 + frac * 0.039215686274509776, 0.38823529411764707 + frac * 0.0549019607843137, 0.23137254901960785 + frac * 0.0549019607843137); )
    : (x < 0.5) ? ( frac = (4 * x - 1); gfx_set(0.6352941176470588 + frac * 0.08235294117647063, 0.44313725490196076 + frac * 0.12549019607843137, 0.28627450980392155 + frac * 0.1294117647058824); )
    : (x < 0.75) ? ( frac = (4 * x - 2); gfx_set(0.7176470588235294 + frac * 0.08235294117647063, 0.5686274509803921 + frac * 0.1215686274509804, 0.41568627450980394 + frac * 0.1411764705882353); )
    : ( frac = (4 * x - 3); gfx_set(0.8 + frac * 0.039215686274509776, 0.6901960784313725 + frac * 0.05882352941176472, 0.5568627450980392 + frac * 0.06666666666666665); )
  ) : ( model == 3 ) ? (
    // Beam open
    (x < 0.25) ? ( frac = (4 * x - 0); gfx_set(1.0, 0.2 + frac * 0.17254901960784313, 0.2 + frac * 0.023529411764705882); )
    : (x < 0.5) ? ( frac = (4 * x - 1); gfx_set(1.0 + frac * -0.0039215686274509665, 0.37254901960784315 + frac * 0.25098039215686274, 0.2235294117647059 + frac * 0.1372549019607843); )
    : (x < 0.75) ? ( frac = (4 * x - 2); gfx_set(0.996078431372549 + frac * -0.0039215686274509665, 0.6235294117647059 + frac * 0.19215686274509802, 0.3607843137254902 + frac * 0.23529411764705882); )
    : ( frac = (4 * x - 3); gfx_set(0.9921568627450981 + frac * 0.007843137254901933, 0.8156862745098039 + frac * 0.07843137254901966, 0.596078431372549 + frac * 0.12549019607843137); )
  ) : ( model == 8 ) ? (
    x *= x;
    (x < 0.25) ? ( frac = (4 * x); gfx_set(0.2784313725490196 + frac * -0.2784313725490196, 0.4823529411764706 + frac * 0.0901960784313725, 1.0); )
    : (x < 0.5) ? ( frac = (4 * x - 1); gfx_set(0.0, 0.5725490196078431 + frac * 0.14117647058823535, 1.0 + frac * -0.0117647058823529); )
    : (x < 0.75) ? ( frac = (4 * x - 2); gfx_set(0.0, 0.7137254901960784 + frac * 0.09411764705882353, 0.9882352941176471 + frac * -0.1725490196078432); )
    : ( frac = (4 * x - 3); gfx_set(0.0, 0.807843137254902 + frac * 0.03137254901960784, 0.8156862745098039 + frac * -0.07450980392156858); )
  ) : ( model == 7 ) ? (
    // Pan
    (x < 0.5) ? ( frac = (2 * x); gfx_set(0.32941176470588235 + frac * -0.20392156862745098, 0.2 + frac * 0.5411764705882354, 1.0); )
    : ( frac = (2 * x - 1); gfx_set(0.12549019607843137 + frac * 0.5215686274509804, 0.7411764705882353 + frac * 0.2549019607843137, 1.0 + frac * -0.20392156862745103); )
  ) : ( model == 10 ) ? (
    x = sqrt(x);
    (x < 1.0) ? ( frac = x; gfx_set(0.1568627450980392 + frac * 0.11372549019607842, 0.23529411764705882 + frac * 0.39999999999999997, 0.5254901960784314 + frac * -0.24705882352941178); )
  ) : ( model == 11 ) ? (
    x = sqrt(x); gfx_set(0.3 + 0.67 * x, 0.5 - 0.3 * x, 0.2 + 0.8 * (1 - x), 0.8);
  ) : ( model == 12 ) ? (
    (x < 0.25) ? ( frac = (4 * x); gfx_set(0.34901960784313724 + frac * 0.20000000000000007, 0.403921568627451 + frac * -0.09019607843137256, 1.0); )
    : (x < 0.5) ? ( frac = (4 * x - 1); gfx_set(0.5490196078431373 + frac * 0.4509803921568627, 0.3137254901960784 + frac * -0.07450980392156861, 1.0 + frac * -0.21568627450980393); )
    : (x < 0.75) ? ( frac = (4 * x - 2); gfx_set(1.0, 0.23921568627450981 + frac * 0.10980392156862742, 0.7843137254901961 + frac * -0.6196078431372549); )
    : ( frac = (4 * x - 3); gfx_set(1.0, 0.34901960784313724 + frac * 0.34509803921568627, 0.16470588235294117 + frac * -0.03529411764705881); )
  );
);

function pixel_rect(x, y, w, h, filled)
(
  filled == 1 ? (
    gfx_rect(x_offset + x * blit_scale, y_offset + y * blit_scale, w * blit_scale, h * blit_scale);
  ) : (
    gfx_rect(x_offset + (x + 1) * blit_scale, y_offset + y * blit_scale, (w - 2) * blit_scale, blit_scale);
    gfx_rect(x_offset + x * blit_scale, y_offset + (y + h - 1) * blit_scale, w * blit_scale, blit_scale);
    gfx_rect(x_offset + (x + w - 1) * blit_scale, y_offset + y * blit_scale, blit_scale, (h - 1) * blit_scale);
    gfx_rect(x_offset + x * blit_scale, y_offset + y * blit_scale, blit_scale, (h - 1) * blit_scale);
  );
);

function unfilled_rect(x, y, w, h)
(
  gfx_rect((x + 1), y, w - 2, 1);
  gfx_rect(x, y + h - 1, w, 1);
  gfx_rect((x + w - 1), y, 1, h - 1);
  gfx_rect(x, y, 1, h - 1);
);

function init_xy(s1, s1_min, s1_max, s1_shape, s2, s2_min, s2_max, s2_shape)
instance(
  sl1, sl2,
  sl1_min, sl2_min,
  sl1_max, sl2_max,
  sl1_shape, sl2_shape,
)
local()
global()
(
  sl1 = s1;
  sl1_min = s1_min;
  sl1_max = s1_max;
  sl1_shape = s1_shape;
  sl2 = s2;
  sl2_min = s2_min;
  sl2_max = s2_max;
  sl2_shape = s2_shape;
);

function txt_blit(str, x, y)
local(ix, row, c_char, src_x, src_y, x_start, xc, yc)
global(gfx_x)
(
  ix = 0;
  xc = x;
  yc = y;
  
  x_start = x;
  loop(strlen(str),
    c_char = str_getchar(str, ix, 'cu');
    (c_char == 10) ? (
      yc += 5;
      xc = x_start;
    ) : (
      row = floor(c_char / 16);
      src_y = 5 * row;
      src_x = 5 * (c_char - row * 16);
      
      gfx_blit(12, 1, 0, src_x, src_y, 5, 5, xc, yc, 5, 5, 0, 0); 
      xc += 5;
    );
    ix += 1;
  );
  
  gfx_x = xc;
);

function txt_measure(str)
local(ix, row, c_char, src_x, src_y, xc, yc, tx_max)
global()
instance(txt_w, txt_h)
(
  ix = 0;
  xc = 0;
  yc = 0;
  tx_max = 0;
  loop(strlen(str),
    c_char = str_getchar(str, ix, 'cu');
    (c_char == 10) ? (
      yc += 5;
      tx_max = max(xc, tx_max);
      xc = 0;
    ) : (
      row = floor(c_char / 16);
      src_y = 5 * row;
      src_x = 5 * (c_char - row * 16);
      xc += 5;
    );
    ix += 1;
  );
  
  txt_w = max(xc, tx_max);
  txt_h = yc + 5;
);

// last_cap = mouse_cap;
// last_mouse_x = mouse_x;
// last_mouse_y = mouse_y;

function set_hint(hint)
global(gfx_x, gfx_y, mouse_x, mouse_y, mouse_cap)
local()
instance(lx, ly, lc, hint_time, current_hint, delta_time)
(
  ( (lc != mouse_cap) || ( abs(lx - mouse_x) + abs(ly - mouse_y)) > 0 ) ? (
    hint_time = 0;
  ) : (      
    (hint != 0) ? (
      current_hint = hint;
      hint_time = hint_time + delta_time;
      hint_time = min(1, hint_time)
    ) : (
      0
    )
  );
  
  lx = mouse_x;
  ly = mouse_y;
  lc = mouse_cap;
);


function draw_hints()
global(
  gfx_x, gfx_y, mouse_x, mouse_y, img_w, img_h,
  x_offset, y_offset, blit_scale,
)
local(w, h)
instance(hint_time, current_hint, last_global_time, global_time, delta_time, txt_w, txt_h)
(
  this.set_hint(0);

  global_time = time_precise();
  delta_time = global_time - last_global_time;
  last_global_time = global_time;

  ( hint_time > .99 ) ? (
    gfx_x = (mouse_x - x_offset + 15) / blit_scale;
    gfx_y = (mouse_y - y_offset + 15) / blit_scale;
    
    this.txt_measure(current_hint);
    
    ( gfx_x > 0.5 * img_w ) ? gfx_x = (mouse_x - x_offset + 15) / blit_scale - txt_w - 8;
    ( gfx_y > 0.5 * img_h ) ? gfx_y = (mouse_y - y_offset) / blit_scale - txt_h;

    gfx_set(0.05, 0.05, 0.1, 1.0);
    gfx_rect(gfx_x - 1, gfx_y - 1, txt_w + 2, txt_h + 1);
    gfx_set(0.5, 0.5, 0.5, 0.5);
    txt_blit(current_hint, gfx_x, gfx_y);
  );
);

function init_slider_ui(s, s_min, s_max, s_shape)
local()
instance(sl, sl_min, sl_max, sl_shape, active)
global()
(
  sl = s;
  sl_min = s_min;
  sl_max = s_max;
  sl_shape = s_shape;
  active = 1;
);

function _multi_slider_calc_x_pos(slider_value)
local(slider_norm)
global()
instance(_min, _max, _log)
(
  slider_value = min(_max, max(_min, slider_value));
  _log ? (
    (log(slider_value) - log(_min)) / (log(_max) - log(_min))
  ) : (
    (slider_value - _min) / (_max - _min)
  );
);

function _multi_slider_x_pos_to_window(slider_norm)
local()
global()
instance(_x, _w)
(
  _x + slider_norm * (_w - 3) + 1
);

// This function must always be called *before* every multi_slider_notch_ui.
function multi_slider_notch_nearest(me, slider_idx)
local(dist, slider_x)
instance(_nearest, _min_dist, mouse_nx)
global()
(
  dist = mouse_nx - this._multi_slider_x_pos_to_window(this._multi_slider_calc_x_pos(slider(slider_idx)));
  dist *= dist;
  
  (dist < _min_dist) ? (
    _nearest = me;
    _min_dist = dist;
  );
);

// This function must always be called *after* multi_slider_ui.
function multi_slider_notch_ui(me, slider_idx, hint, r, g, b)
local(over_notch, slider_value, slider_norm, over_notch, slider_x, mul, dx)
instance(
  _x, _y, _w, _h,
  _min, _max, _log,
  _nearest,
  mouse_nx, mouse_ny,
  over,
  smooth_highlight,
  txt_w, txt_h,
  hzstr,
)
global(
  hinter.set_hint,
  blit_scale,
  mouse_x, mouse_y, last_mouse_x, last_mouse_y, mouse_cap, last_cap, cap_mode,
)
(
  slider_value = slider(slider_idx);
  slider_norm = this._multi_slider_calc_x_pos(slider_value);
  slider_x = this._multi_slider_x_pos_to_window(slider_norm);
  over_notch = (mouse_nx > (slider_x - 4)) && (mouse_nx < (slider_x + 4)) && (mouse_ny > _y) && (mouse_ny < (_y + _h)) && (_nearest == me);
  
  gfx_set(r, g, b, smooth_highlight + 0.15 * over_notch + 0.2);
  gfx_rect(slider_x, _y + 1, 1, _h - 2);

  (over_notch && (mouse_cap & 1) && (cap_mode == 0) && (last_cap == 0)) ? (
    cap_mode = me;
  );
  
  (cap_mode == me) ? (
    (mouse_cap == 0) ? (
      cap_mode = 0;
    ) : (
      mul = 1;
      hzstr = slider_value < 1 ? sprintf(8, "%f", slider_value) : (slider_value < 1000) ? sprintf(8, "%d", slider_value) : sprintf(8, "%.1fk", slider_value / 1000);
      this.txt_measure(hzstr);
      gfx_set(1, 1, 1, 0.4);
      txt_blit(hzstr, _x + 0.5 * _w - 0.5 * txt_w, _y + 1 + 0.5 * _h - 0.5 * txt_h);
      
      (mouse_cap & 8) ? mul *= 0.125;  // SHIFT
      (mouse_cap & 4) ? mul *= 0.1666666666667;  // CTRL
    
      dx = (mouse_x - last_mouse_x) / (blit_scale * (_w - 3));
      slider_norm = max(0, min(1, slider_norm + mul * dx));
      
      _log ? (
        slider_automate(slider(slider_idx) = exp(log(_min) + slider_norm * (log(_max) - log(_min))));
      ) : (
        slider_automate(slider(slider_idx) = _min + slider_norm * (_max - _min));
      );
    );
  );
  
  (over_notch && hint) ? (
    hinter.set_hint(hint);
  );
);

function multi_slider_ui(me, x, y, w, h, s_min, s_max, s_log)
local()
instance(
  _x, _y, _w, _h,
  mouse_nx, mouse_ny,
  smooth_highlight,
  over,
  _min, _max, _log,
  _nearest, _min_dist,
)
global(
  x_offset, y_offset, blit_scale,
  mouse_x, mouse_y,
)
(
  _min = s_min; _max = s_max; _log = s_log;
  _x = x; _y = y; _w = w; _h = h;
  _nearest = -1; _min_dist = 10000;
  
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + h));
  
  smooth_highlight = 0.7 * smooth_highlight + 0.3 * (0.03 + 0.08 * over);
  
  gfx_set(1, 1, 1, smooth_highlight);
  gfx_rect(x, y, w, h);
  unfilled_rect(x, y, w, h);
);

function slider_ui(me, x, y, w, h, label, hint, info)
local(mouse_nx, mouse_ny, over, dx, dy, ix, mul, slider_norm)
instance(
  sl, sl_min, sl_max, sl_shape,
  smooth_highlight,
  txt_w, txt_h, x_norm, x_val,
  active,
)
global(
  x_offset, y_offset, blit_scale,
  mouse_x, mouse_y, mouse_cap,
  cap_mode, last_cap, last_mouse_x
  hinter.set_hint, info_active,
  widget_red, widget_green, widget_blue, dark_factor,
)
(
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + h));
  
  (over && hint) ? (
    hinter.set_hint(hint);
    sprintf(14, "%s", info);
    info_active = 1;
  );
  
  !active ? over = 0;
  
  (smooth_highlight == 0) ? (smooth_highlight = 0.03;);
  smooth_highlight = 0.7 * smooth_highlight + 0.3 * (dark_factor + 0.08 * over);
  active ? (
    gfx_set(widget_red, widget_green, widget_blue, smooth_highlight);
  ) : (
    gfx_set(0.1, 0.1, 0.1, 0.3);
  );
  gfx_rect(x, y, w, h);
  active ? (
    gfx_set(widget_red * smooth_highlight, widget_green * smooth_highlight, widget_blue * smooth_highlight, 1);
  ) : (
    gfx_set(0.1, 0.1, 0.1, 0.3);
  );
  unfilled_rect(x, y, w, h);
  
  x_val = slider(sl);
  x_norm = sl_shape ? (
    (log(x_val) - log(sl_min)) / (log(sl_max) - log(sl_min))
  ) : (
    (x_val - sl_min) / (sl_max - sl_min)
  );
  
  (over && (mouse_cap & 1) && (cap_mode == 0) && (last_cap == 0)) ? (
    cap_mode = me;
  );
  
  ix = x + 2;
  loop(floor(0.5 * (w - 3)),
    (ix - x) <= floor(x_norm * w) ? (
      active ? (gfx_set(widget_red * smooth_highlight, widget_green * smooth_highlight, widget_blue * smooth_highlight, 1)) : (gfx_set(0.1, 0.1, 0.1, 0.1))
    ) : (
      gfx_set(0, 0, 0, 0.2);
    );
    gfx_line(ix, y + 2, ix, y + h - 3);
    ix += 2;
  );
  
  (cap_mode == me) ? (
    (mouse_cap == 0) ? (
      cap_mode = 0;
    ) : (
      mul = 1;
      (mouse_cap & 8) ? mul *= 0.125;  // SHIFT
      (mouse_cap & 4) ? mul *= 0.1666666666667;  // CTRL
    
      dx = (mouse_x - last_mouse_x) / (blit_scale * w);
      x_norm = max(0, min(1, x_norm + mul * dx));
      
      sl_shape ? (
        slider_automate(slider(sl) = exp(log(sl_min) + x_norm * (log(sl_max) - log(sl_min))));
      ) : (
        slider_automate(slider(sl) = sl_min + x_norm * (sl_max - sl_min));
      );
    );
  );
  
  this.txt_measure(label);
  
  gfx_set(1, 0.4, 0.3, 0.6);
  active ? txt_blit(label, x + 0.5 * w - 0.5 * txt_w, y + 1 + 0.5 * h - 0.5 * txt_h);
  gfx_set(1, 0.2, 0.1, 0.1);
);


function xy_pad(me, x, y, w, h, dest_surf, hint, info)
instance(
  sl1, sl1_min, sl1_max,
  sl2, sl2_min, sl2_max,
  smooth_highlight,
  sum_dx, sum_dy,
)
local(x_val, y_val, xc, yc, x_norm, y_norm, mouse_nx, mouse_ny, over, dx, dy, ix)
global(
  x_offset, y_offset, blit_scale, mouse_x, mouse_y, mouse_cap, cap_mode, last_cap, last_mouse_x, last_mouse_y, gfx_mode, gfx_x, gfx_y, gfx_dest, gfx_clear, hinter.set_hint, info_active
  widget_red, widget_green, widget_blue, dark_factor,
)
(
  gfx_dest = dest_surf;
  gfx_mode = 0;
  gfx_clear = 0;
  gfx_set(0, 0, 0, 1.0);
  gfx_rect(0, 0, w, h);
  gfx_setimgdim(dest_surf, w, h);
  
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + h));
  
  (over && hint) ? (
    hinter.set_hint(hint);
    sprintf(14, "%s", info);
    info_active = 1;
  );
  
  (smooth_highlight == 0) ? (smooth_highlight = 0.03;);
  smooth_highlight = 0.7 * smooth_highlight + 0.3 * ((dark_factor - 0.01) + 0.04 * over);
  
  x_val = slider(sl1);
  y_val = slider(sl2);
  x_norm = (x_val - sl1_min) / (sl1_max - sl1_min);
  y_norm = (y_val - sl2_min) / (sl2_max - sl2_min);
  
  xc = x_norm * (w - 3) + 1;
  yc = (1.0 - y_norm) * (h - 3) + 1;
  
  gfx_set(1, 1, 1, smooth_highlight);
  gfx_rect(0, 0, w, h);
  
  gfx_set(0, 0, 0, 0.4);
  xc = floor(xc);
  yc = floor(yc);
  ix = 5;
  loop(w / 6,
    gfx_circle(xc, yc, ix + 2 * sin(time_precise()));
    ix += 8;
  );
  
  gfx_set(widget_red * smooth_highlight, widget_green * smooth_highlight, widget_blue * smooth_highlight, 1);
  unfilled_rect(1, 1, w-1, h-1);
  
  gfx_set(smooth_highlight, smooth_highlight, smooth_highlight, 1);
  gfx_roundrect(0, 0, w, h, 5);
  
  gfx_set(widget_red * smooth_highlight, widget_green * smooth_highlight, widget_blue * smooth_highlight, 1);
  
  gfx_rect(xc, 1, 1, h - 2);
  gfx_rect(1, yc, w - 2, 1);
  
  (over && (mouse_cap & 1) && (cap_mode == 0) && (last_cap == 0)) ? (
    cap_mode = me;
  );
  
  (cap_mode == me) ? (
    (mouse_cap == 0) ? (
      cap_mode = 0;
      sum_dx = 0;
      sum_dy = 0;
    ) : (
      dx = (mouse_x - last_mouse_x) / (blit_scale * w);
      dy = - (mouse_y - last_mouse_y) / (blit_scale * h);
      
      (mouse_cap & 8) ? dy = 0;  // SHIFT
      (mouse_cap & 4) ? dx = 0;  // CTRL
      
      sum_dx += dx;
      sum_dy += dy;
      
      x_norm = max(0, min(1, x_norm + dx));
      y_norm = max(0, min(1, y_norm + dy));
      
      slider(sl1) = sl1_min + x_norm * (sl1_max - sl1_min);
      slider(sl2) = sl2_min + y_norm * (sl2_max - sl2_min);
      
      // One we moved the most should be last touched
      slider_automate(slider(abs(sum_dx) > abs(sum_dy) ? sl2 : sl1));
      slider_automate(slider(abs(sum_dx) > abs(sum_dy) ? sl1 : sl2));
    );
  );
  
  gfx_x = x;
  gfx_y = y;
  gfx_set(1, 1, 1, 1);
  gfx_mode = 0;
  gfx_dest = 13;
  gfx_blit(dest_surf, 1, 0);
);

function go_to_pixel(x, y)
(
  gfx_x = x_offset + x * blit_scale;
  gfx_y = y_offset + y * blit_scale;
);


function choice_toggle(x, y, w, select, slider_idx, hint, info)
instance(intensity, clicked)
local(current, mouse_nx, mouse_ny, over, i2)
global(
  gfx_mode, gfx_r, gfx_g, gfx_b, gfx_a, gfx_x mouse_cap, last_cap, mouse_x, mouse_y,
  x_offset, y_offset, blit_scale,
  hinter.set_hint, info_active,
  widget_red, widget_green, widget_blue, dark_factor,
)
(
  clicked = 0;
  (intensity == 0) ? ( intensity = 0.20; );
  current = slider(slider_idx);
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + w + 1));

  over ? (
    hint ? hinter.set_hint(hint);
    sprintf(14, "%s", info);
    info_active = 1;
  );
  
  gfx_mode = 0;
  i2 = intensity - 0.2 + (dark_factor - 0.01);
  (select == current) ? (
    gfx_a = 1.0;
    gfx_set(widget_red * i2, widget_green * i2, widget_blue * i2 , 1);
    gfx_rect(x, y, w, w, 3);
  ) : (
    gfx_a = 0.5;
    gfx_set(widget_red * i2, widget_green * i2, widget_blue * i2, 1);
    unfilled_rect(x, y, w, w);
  );

  gfx_mode = 1;
  intensity = 0.2 * (0.2 + 0.15 * over) + 0.8 * intensity;
  gfx_a = intensity;
  (select == current) ? (
    gfx_rect(x, y, w, w);
  ) : (
    unfilled_rect(x, y, w, w);
  );
  gfx_x += 5;
  
  ((last_cap == 0) && (mouse_cap == 1) && over) ? (
    slider_automate(slider(slider_idx) = select);
    clicked = 1;
  );
);


function simple_serialize_toggle(x, y, w, on, hint, info)
instance(intensity)
local(mouse_nx, mouse_ny, over, i2)
global(
  gfx_mode, gfx_r, gfx_g, gfx_b, gfx_a, gfx_x mouse_cap, last_cap, mouse_x, mouse_y,
  x_offset, y_offset, blit_scale,
  hinter.set_hint, info_active,
  widget_red, widget_green, widget_blue, dark_factor,
)
(
  (intensity == 0) ? ( intensity = 0.20; );
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + w));

  (over && hint) ? (
    hinter.set_hint(hint);
    sprintf(14, "%s", info);
    info_active = 1;
  );

  gfx_mode = 0;
  i2 = intensity - 0.2 + (dark_factor - 0.01);
  on ? (
    gfx_a = 1.0;
    gfx_set(widget_red * i2, widget_green * i2, widget_blue * i2 , 1);
    gfx_rect(x, y, w, w, 3);
  ) : (
    gfx_a = 0.5;
    gfx_set(widget_red * i2, widget_green * i2, widget_blue * i2, 1);
    unfilled_rect(x, y, w, w);
  );

  gfx_mode = 1;
  intensity = 0.2 * (0.2 + 0.15 * over) + 0.8 * intensity;
  gfx_a = intensity;
  on ? (
    gfx_rect(x, y, w, w);
  ) : (
    unfilled_rect(x, y, w, w);
  );
  gfx_x += 5;
  
  ((last_cap == 0) && (mouse_cap == 1) && over)
);

function tap_pad(me, x, y, w, select, hint, highlight)
instance(intensity, hl)
local(current, mouse_nx, mouse_ny, over, ix)
global(skipped
  gfx_r, gfx_g, gfx_b, gfx_a, gfx_x mouse_cap, last_cap, mouse_x, mouse_y, gfx_mode,
  x_offset, y_offset, blit_scale,
  hinter.set_hint,
)
(
  highlight = min(highlight, 2.0);
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + w));

  (over && hint) ? (
    hinter.set_hint(hint);
  );
  
  gfx_a = 0.4 + 0.6 * min(1, highlight * 2);
  gfx_rect(x, y, w, w);
  
  intensity = min(0.2 * (0.4 + 0.45 * max(over, highlight)) + 0.8 * intensity, 1.0);
  gfx_a = 1.0;
  unfilled_rect(x, y, w, w);
  
  gfx_mode = 1;
  
  gfx_a = min(0.4 * max(10.5 * highlight, intensity) / (2 * ix), 1.0);
  unfilled_rect(x + 1, y + 1, w - 2, w - 2);
  
  ix = 1;
  gfx_a = 0.8 * min(max(1.5 * highlight, intensity) / (2 * ix), 1.0);
  gfx_rect(x - ix, y - ix, w + ix + ix, w + ix + ix, 1);
  
  highlight > 0 ? (
    ix = 1;
    loop((5 + 5 * highlight),
      gfx_a = min(0.5 * max(1.5 * highlight, intensity) / (2 * ix), 1.0);
      gfx_rect(x - ix, y - ix, w + ix + ix, w + ix + ix);
      ix += 2;
    );
    
    ix += 5;
    gfx_rect(x - ix, y - ix, w + ix + ix, w + ix + ix);
  ) : (
    skipped += 1;
  );
  
  gfx_x += 5;
  gfx_mode = 0;
  
  ((last_cap == 0) && (mouse_cap == 1) && over) ? 1 : 0
);

function mapped_note_to_letter(note)
local()
(
  (note == NOTE_KICK) ? (
    "K\nC"
  ) : (note == NOTE_SNARE) ? (
    "S\nD"
  ) : (note == NOTE_CLAP) ? (
    "C\nP"
  ) : (note == NOTE_CLOSED_HAT) ? (
    "C\nH"
  ) : (note == NOTE_OPEN_HAT) ? (
    "O\nH"
  ) : (note == NOTE_RIDE) ? (
    "R\nD"
  ) : (note == NOTE_HI_TOM) ? (
    "H\nT"
  ) : (note == NOTE_MID_TOM) ? (
    "M\nT"
  ) : (note == NOTE_LOW_TOM) ? (
    "L\nT"
  ) : (note == NOTE_RIM) ? (
    "R\nI"
  ) : (note == NOTE_COWBELL) ? (
    "C\nB"
  ) : (note == NOTE_SHAKER) ? (
    "S\nH"
  )
);

function draw_keyboard(base_note, x, y, w, h, base_note_width, note_mapping)
local(xc, yc, cw, w, h, first_white_key, white_key_id, white_keys, current_note, mapped_note)
global(gfx_a, scaling, gfx_mode)
instance(note_width, start_octave, start_note, _x, _y, _w, _h, note_count)
(
  _x = x; _y = y; _w = w; _h = h;
  
  note_count = 0;
  start_octave = floor(base_note / 12);
  start_note = base_note - start_octave * 12;
  
  // Don't start on a black key
  ((start_note == 1) || (start_note == 3) || (start_note == 6) || (start_note == 8) || (start_note == 10)) ? start_note -= 1;
  
  first_white_key = 
  (start_note == 0) ? ( 0 ) : 
  (start_note == 2) ? ( 1 ) : 
  (start_note == 4) ? ( 2 ) : 
  (start_note == 5) ? ( 3 ) : 
  (start_note == 7) ? ( 4 ) : 
  (start_note == 9) ? ( 5 ) : 
  (start_note == 11) ? ( 6 );

  note_width = floor(base_note_width * max(1, scaling));
  //white_keys = 7 * 8;
  //note_width = floor(w / white_keys) - 2;
  white_keys = floor(w / note_width);
  _w = white_keys * note_width;
  
  // Keys
  xc = x + 1;
  yc = floor(y);
  gfx_mode = 1;
  
  current_note = base_note + start_note;
  white_key_id = first_white_key;
  loop(white_keys,
    gfx_set(1.0, 1.0, 1.0, 0.6); gfx_a = 0.6;
    gfx_rect(xc, yc, note_width - 1, h);
    
    mapped_note = note_mapping[current_note];
    mapped_note > 0 ? (
      colormodel(0.9); gfx_a = 0.3;
      gfx_rect(xc, yc, note_width - 1, h);
      gfx_mode = 1; gfx_a = 0.7;
      txt_blit(mapped_note_to_letter(mapped_note), xc + 1, yc + h - 11);
    );
    
    note_count += 1;
    xc += note_width;
    
    // Advance current note index
    current_note += 1 + ((white_key_id != 2) && (white_key_id != 6));
    
    white_key_id += 1;
    (white_key_id > 6) ? white_key_id = 0;
  );
  
  // Highlights
  xc = x + 2;
  colormodel(0.2); gfx_a = 0.3;
  loop(white_keys,
    gfx_line(xc - 1, yc, xc - 1, yc + h - 1);
    xc += note_width;
  );
  
  xc = x + 1;
  cw = 0;
  white_key_id = first_white_key;
  current_note = base_note + start_note;
  while(cw < white_keys - 1)
  (
    ((white_key_id != 2) && (white_key_id != 6)) ? (
      gfx_set(0, 0, 0, 1.0);
      gfx_rect(xc + 0.5 * note_width, yc, note_width - 1, floor(0.55 * h));
      note_count += 1;
      
      colormodel(1); gfx_a = 0.2;
      gfx_line(xc + 0.5 * note_width, yc, xc + 0.5 * note_width, yc + floor(0.55 * h) - 2);
      gfx_a = 0.05;
      gfx_line(xc + 0.5 * note_width + 1, yc, xc + 0.5 * note_width + 1, yc + floor(0.55 * h) - 2);
      
      mapped_note = note_mapping[current_note + 1];
      mapped_note > 0 ? (
        colormodel(0.9); gfx_a = 0.12;
        gfx_rect(xc + 0.5 * note_width, yc, note_width - 1, floor(0.55 * h));
        gfx_mode = 1; gfx_a = 0.87;
        txt_blit(mapped_note_to_letter(mapped_note), xc + 0.5 * note_width + 1, yc + floor(0.55 * h) - 11);
      );
    );
    xc += note_width;
    
    // Advance current note index
    current_note += 1 + ((white_key_id != 2) && (white_key_id != 6));
    white_key_id += 1;
    (white_key_id > 6) ? white_key_id = 0;
    cw += 1;
  );
  
  note_count += base_note; 
);

function note_coord_x(rel_note)
local()
global()
(
  (rel_note < 5) ? 0.5 * rel_note : 0.5 * rel_note + 0.5
);

function note_coord_y(rel_note)
local()
global()
(
  (rel_note < 5) ? (
    // Even is white
    (2 * floor(0.5 * rel_note) == rel_note) ? 0 : 1
  ) : (
    // Odd is white
    (2 * floor(0.5 * rel_note) == rel_note) ? 1 : 0
  );
);

function highlight_note(note)
local(ts, c0_x, octave, rel_note, nx, ny, idx, black)
global(gfx_a)
instance(start_note, start_octave, note_width, _x, _y, _w, _h)
(
  note > -1 ? (
    // Reference point is at octave 0
    c0_x = _x - note_coord_x(start_note) * note_width - 7 * start_octave * note_width;
    
    octave = floor(note / 12);
    rel_note = note - 12 * octave;
    
    black = note_coord_y(rel_note);
    nx = c0_x + (octave * 7 + note_coord_x(rel_note)) * note_width + 2 * black;
    ny = _y + 0.75 * _h - 0.5 * black * _h;

    colormodel(0.5 + 0.5 * sin(3 * time_precise())); gfx_a = 0.5;
    black ? (
      gfx_rect(nx - 1, _y, note_width - 1, floor(0.55 * _h));
    ) : (
      gfx_rect(nx + 1, _y, note_width - 1, _h);
    );
  );
);


function note_clicked(mode)
local(c0_x, white_note_x, note_x, octave)
global(mouse_nx, mouse_ny)
instance(start_note, start_octave, note_width, _x, _y, _w, _h, over, note_id, note_count)
(
  // Reference point is at octave 0
  c0_x = _x - note_coord_x(start_note) * note_width - 7 * start_octave * note_width;
  
  white_note_x = (mouse_nx - c0_x) / note_width;
  octave = floor(white_note_x / 7);
  
  white_note_x -= (octave * 7);
  
  (mouse_ny > (_y + floor(0.55 * _h))) ? (
    note_x = white_note_x < 3 ? floor(white_note_x) * 2 : floor(white_note_x) * 2 - 1;
  ) : ( 
    note_x = (12 / 7) * white_note_x;
  );
  note_x = floor(note_x);
  
  note_id = floor(octave * 12 + note_x);
  
  over = (mouse_nx > _x) && (mouse_ny > _y) && (mouse_nx < (_x + _w)) && (mouse_ny < (_y + _h)) && (note_id < note_count);
  
  note_id
);

