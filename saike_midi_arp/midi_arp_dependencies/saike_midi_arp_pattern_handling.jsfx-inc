@init
loaded_pattern = -1;

function serialize_rle(mem, len, writing)
local(ptr, end_ptr, count, value, validate)
global(critical_error)
(
  ptr = mem;
  (!writing) ?
  (
    end_ptr = mem + len - 1;
    while(ptr < end_ptr)
    (
      file_var(0, value);
      (value == 1337) ? (validate = ptr - mem);
       
      // We only apply RLE to zeros
      (value == 0) ? (
        file_var(0, count);
        memset(ptr, 0, count);
        ptr += count;
      ) : (
        ptr[] = value;
        ptr += 1;
      );
    );
    
    file_var(0, validate);
    critical_error = validate == 1337 ? 0 : 1;
  ) : (
    count = 0;
    loop(len - 1,
      value = ptr[];
      
      (value == 0) ? (
        count += 1;
      ) : ( 
        (count > 0) ? (
          file_var(0, 0);
          file_var(0, count);
          count = 0;
        );
        
        file_var(0, value);      
      );
      
      ptr += 1;
    );
    
    // Eww :(
    (count > 0) ? (
      file_var(0, 0);
      file_var(0, count);
    );
    
    file_var(0, 1337);
  );
);

function initialize_patterns(freemem)
local()
global(max_stored_patterns, pattern_size, pattern_buffer, copy_buffer, selection_buffer, max_segments, max_lines)
(
  pattern_size = max_segments * max_lines;
  freemem = (pattern_buffer = freemem) + pattern_size * max_stored_patterns;
  freemem = (copy_buffer = freemem) + pattern_size;
  freemem = (selection_buffer = freemem) + pattern_size;
  freemem
);

function pattern_update()
global(
  loaded_pattern, current_pattern_index, current_pattern, pattern_buffer, pattern_size, max_segments
  modulator1_values, modulator2_values, midi_cc_1, midi_cc_2, midi_cc_3, midi_cc_4,
)
(
  (loaded_pattern != current_pattern_index) ? (
    loaded_pattern = current_pattern_index;
    current_pattern = pattern_buffer + current_pattern_index * pattern_size;
    modulator1_values = current_pattern + 50 * max_segments;
    modulator2_values = current_pattern + 51 * max_segments;
    midi_cc_1 = current_pattern + 52 * max_segments;
    midi_cc_2 = current_pattern + 53 * max_segments;
    midi_cc_3 = current_pattern + 54 * max_segments;
    midi_cc_4 = current_pattern + 55 * max_segments;
  )
);

function copy_pattern()
global(copy_buffer, current_pattern_index, pattern_buffer, pattern_size)
(
  memcpy(copy_buffer, pattern_buffer + current_pattern_index * pattern_size, pattern_size);
);

function paste_pattern()
global(copy_buffer, current_pattern_index, pattern_buffer, pattern_size)
(
  memcpy(pattern_buffer + current_pattern_index * pattern_size, copy_buffer, pattern_size);
);

function serialize_patterns(writing, file_version)
global(max_stored_patterns, pattern_buffer, pattern_size)
(
  serialize_rle(pattern_buffer, pattern_size * max_stored_patterns, writing);
);

function randomize_row(mem, n_segments, max_value)
local(ptr, val, last_val, long_note_prob)
global()
(
  long_note_prob = rand();
  val = last_val = 0;
  ptr = mem;
  loop(n_segments - 1,
    last_val = val;
    val = floor(rand() * (max_value + 1));
    
    (abs(val) == abs(last_val)) && (rand() < long_note_prob) ? val = -abs(val);
    ptr[] = val;
    ptr += 1;
  );
);

