MIDI buffer library
version: 0.02
author: Joep Vanlier
license: MIT
(C) Joep Vanlier 2020

@init
MAX_NOTES = 30;
function initializeMIDI(mem, mem2, mWheel, passThrough)
local()
global(MAX_NOTES)
instance(noteMem, modWheel, pass, activeNoteMem,
         voice1, voice2, voice3, voice4,
         notesOn, lastNotesOn)
(
  voice1 = voice2 = voice3 = voice4 = 0;
  noteMem = mem;
  modWheel = mWheel;
  pass = passThrough;
  activeNoteMem = mem2;
  notesOn = 0; 
  lastNotesOn = 0;
  memset(activeNoteMem, 0, MAX_NOTES);
);


function processMIDIBlock()
local(offset, msg1, msg2, msg3
      noteOn, noteOff, mwCC, mWheel, pb)
global()
instance(notePtr, noteMem, pass, modWheel, curSample, remainingNotes, nextNote)
(
  notePtr = noteMem;
  while (midirecv(offset,msg1,msg2,msg3)) (
      noteOn = msg1>$x8F&&msg1<$xA0 && msg3!=0;
      noteOff = (msg1>$x7F&&msg1<$x90) || (msg1>$x89&&msg1<$xA0 && msg3==0);
      mwCC = (msg1>$xAF&&msg1<$xC0);
      pb = msg1 & 0xF0 === 0xE0;
      
      noteOn ? (
      notePtr[] = offset;
      notePtr += 1;
      notePtr[] = msg3;
      notePtr += 1;
      notePtr[] = msg2;
      notePtr += 1;
    ) : ( noteOff ) ? (
      notePtr[] = offset;
      notePtr += 1;
      notePtr[] = -1;
      notePtr += 1;
      notePtr[] = msg2;
      notePtr += 1;
    ) : ( mwCC ) ? (
      ( modWheel ) ? (
        notePtr[] = offset;
        notePtr += 1;
        notePtr[] = -2;
        notePtr += 1;
        notePtr[] = msg2;
        notePtr += 1;
        notePtr[] = msg3;
        notePtr += 1;
      );
    ) : pb ? (
      notePtr[] = offset;
      notePtr += 1;
      notePtr[] = -3;
      notePtr += 1;
      notePtr[] = (((msg3 << 8) | msg2) - 0x4000)/16384;
      notePtr += 1;
    );
    
    pass ? midisend(offset,msg1,msg2,msg3); // passthrough MIDI events
  );
  notePtr[]       = -1337;    // Signal end of note buffer
  notePtr         = noteMem;
  curSample       = 0;        // Current sample in block
  remainingNotes  = 1;        // End of the note buffer?
  nextNote        = notePtr[];
);

function rem_voice4(stopped_note)
local()
global(rem)
instance(notesOn, activeNoteMem,
         voice1, voice2, voice3, voice4,
         voice1_vel, voice2_vel, voice3_vel, voice4_vel,         
         polyVel,
         target, ptr, v)
( 
  target = 0;
  ptr = activeNoteMem + notesOn;
  loop(min(4,notesOn),
    (target == 0) ? (
      v = ptr[0];
      ((v != voice1) && (v != voice2) && (v != voice3) && (v != voice4)) ? (
        target = v;
      );
    );
    ptr -= 1;
  );
  
  (voice1 == stopped_note) ? ( voice1 = target; );
  (voice2 == stopped_note) ? ( voice2 = target; );
  (voice3 == stopped_note) ? ( voice3 = target; );
  (voice4 == stopped_note) ? ( voice4 = target; );
  
  polyVel = max(max(max(voice1_vel, voice2_vel), voice3_vel), voice4_vel);
); 

function add_voice4(new_note, velocity)
local()
global()
instance(notesOn, activeNoteMem,
         voice1, voice2, voice3, voice4,
         voice1_vel, voice2_vel, voice3_vel, voice4_vel,
         poly_voice, polyVel)
(
  velocity == 0 ? (
    this.rem_voice4(new_note);
  ) : (
    ( voice1 == 0 ) ? ( poly_voice = voice1 = new_note; voice1_vel = velocity; )
    : ( voice2 == 0 ) ? ( voice2 = new_note; voice2_vel = velocity; )
    : ( voice3 == 0 ) ? ( voice3 = new_note; voice3_vel = velocity; )
    : ( voice4 == 0 ) ? ( voice4 = new_note; voice4_vel = velocity; )
    : ( 
      // voice stealing
      voice4 = new_note;
    );
  );
  
  polyVel = max(max(max(voice1_vel, voice2_vel), voice3_vel), voice4_vel);
);

// Properties that can be polled from sample
// notesOn - Number of notes active
// lastVel - Last velocity
// lastNote - Last played note

function processMIDISample()
local(cur_cc, noteChange, note, i)
global(MAX_NOTES, mmmmsg, play_state)
instance(notesOn, lastNotesOn, lastVel, lastNote, lastWheel, smoothWheel,
         notePtr, remainingNotes, nextNote,
         curSample, pitchBend, activeNoteMem)
(
  // Does this plugin respond to MIDI signals?
  // Take notes from the stack until we hit the end marker -1
  noteChange = 0;
  lastNotesOn = notesOn;
  (remainingNotes) ? (
    while(nextNote == curSample) (
      notePtr += 1;
      (notePtr[] > 0) ? ( // note-on
        noteChange = 1;
        notesOn = notesOn + 1;
        lastVel = notePtr[]/127;
        notePtr += 1;
        lastNote = notePtr[];
        
        activeNoteMem[notesOn - 1] = lastNote;
        this.add_voice4(lastNote, lastVel);
      ) : (notePtr[] == -1) ? ( // note-off
        
        notesOn = notesOn - 1;
        notesOn = max(0, notesOn);
        notePtr += 1;
        note = notePtr[];

        i = -1;
        while(
          i += 1;
          activeNoteMem[i] != note && i < 30
        );
        // Memcpy is undefined for overlapping buffers :/
        loop(MAX_NOTES,
          activeNoteMem[i] = activeNoteMem[i+1];
          i += 1;
        );
        this.rem_voice4(note);
        notesOn > 0 ? (
          lastNote != activeNoteMem[notesOn-1] ? (
            lastNote = activeNoteMem[notesOn-1];
          );
        );
        noteChange = 2;
      ) : (notePtr[] == -2) ? ( // CC
        notePtr += 1;
        cur_cc = notePtr[];
        notePtr += 1;
        cur_cc == 1 ? (
          lastWheel = notePtr[]/128;
        )
      ) : (notePtr[] == -3) ? (
        notePtr += 1;
        pitchBend = notePtr[];
      );
      notePtr += 1;
      
      // Avoid constantly dereferencing by picking up the next one
      nextNote = notePtr[];
      remainingNotes = nextNote != -1337;
    );
  );
  
  curSample += 1;
  smoothWheel = .99 * smoothWheel + .01 * lastWheel;
  
  noteChange
);
