// This little library implements square and saw oscillators which make use of minBLEP for anti-aliasing.
//
// Upon initialization set the location of the BLEP memory buffer:
//    MINBLEP = 32768;
//    init_blep(32768);
//    blepBuffer.initBLEPbuffer(65536);
//
// Upon MIDI note (in @sample)
//
//    Optionally reset the oscs:
//      osc1.t = 0;
//      osc2.t = 0;
//
// Upon change of the oscillator type, optionally set the hardsync locations:
//    For square / saw: osc2.init_hardsync(0.5, 0);
//    For triangle: osc2.init_hardsync(0.25, 0.75);
//
// In @sample:
//    y = osc1.evaluate_osc(osc1_dt, osc1_dt, osc1_amp);
//    osc2.hardsync(osc1.t, osc1_dt, osc2_dt, osc2_amp);  // Optional
//    y += osc2.evaluate_osc(osc2_dt, osc2_dt, osc2_amp);
// Note: The order matters! Here osc2 is hardsynced to osc1. Note that you cannot have two hardsyncs going into
// a single slaved oscillator.
//
// In @sample:
//    blepLevel = blepBuffer.readBLEPs();
//    y += blepLevel;
//    spl0 = dc0.eval_HP6(y);
//    spl1 = dc1.eval_HP6(y);
//
// Note that eval_HP6 is not part of this library, but any highpass filter will do.

@init
function init_blamp(minBLAMP)
local()
instance()
global()
(
  minBLAMP[0] = 0.00000000000000000000;
  minBLAMP[1] = 0.00033533554748110193;
  minBLAMP[2] = 0.00149369065398487948;
  minBLAMP[3] = 0.00432209918022243358;
  minBLAMP[4] = 0.01013648993037024118;
  minBLAMP[5] = 0.02084509147913225779;
  minBLAMP[6] = 0.03906996647521964600;
  minBLAMP[7] = 0.06825254068234448690;
  minBLAMP[8] = 0.11273155985695508530;
  minBLAMP[9] = 0.17777854127271230933;
  minBLAMP[10] = 0.26957888254481909840;
  minBLAMP[11] = 0.39514752038800082801;
  minBLAMP[12] = 0.56217219798095452443;
  minBLAMP[13] = 0.77878217179553299587;
  minBLAMP[14] = 1.05324533662165098491;
  minBLAMP[15] = 1.30107425337535098642;
  minBLAMP[16] = 0.71473509380362254539;
  minBLAMP[17] = 0.20803593851225121725;
  minBLAMP[18] = -0.21418420473305310736;
  minBLAMP[19] = -0.54898164371348645574;
  minBLAMP[20] = -0.79563963299665640960;
  minBLAMP[21] = -0.95590586132211541326;
  minBLAMP[22] = -1.03410926344686071587;
  minBLAMP[23] = -1.03713743917006784301;
  minBLAMP[24] = -0.97426332016892480681;
  minBLAMP[25] = -0.85682122817149064531;
  minBLAMP[26] = -0.69774240802290599106;
  minBLAMP[27] = -0.51097258079149021626;
  minBLAMP[28] = -0.31080300586107334482;
  minBLAMP[29] = -0.11115636878459334014;
  minBLAMP[30] = 0.07512695518730261313;
  minBLAMP[31] = 0.23695286710831453547;
  minBLAMP[32] = 0.36554109369145848518;
  minBLAMP[33] = 0.45485385871004524461;
  minBLAMP[34] = 0.50185257685831174967;
  minBLAMP[35] = 0.50656121852877689093;
  minBLAMP[36] = 0.47192871649607326390;
  minBLAMP[37] = 0.40349819939645570344;
  minBLAMP[38] = 0.30890560939706546151;
  minBLAMP[39] = 0.19724353628494384338;
  minBLAMP[40] = 0.07833736815750569349;
  minBLAMP[41] = -0.03801218647886983604;
  minBLAMP[42] = -0.14276310572492789674;
  minBLAMP[43] = -0.22828692269220596245;
  minBLAMP[44] = -0.28889530829092535669;
  minBLAMP[45] = -0.32119949951560045065;
  minBLAMP[46] = -0.32427714021356024432;
  minBLAMP[47] = -0.29963758140554475062;
  minBLAMP[48] = -0.25099218979799076124;
  minBLAMP[49] = -0.18385355607048836646;
  minBLAMP[50] = -0.10500024033073174223;
  minBLAMP[51] = -0.02185531191169332033;
  minBLAMP[52] = 0.05816727122290643592;
  minBLAMP[53] = 0.12829204552045325727;
  minBLAMP[54] = 0.18293458343487856155;
  minBLAMP[55] = 0.21813139997326658204;
  minBLAMP[56] = 0.23181420504275251915;
  minBLAMP[57] = 0.22390886962882206035;
  minBLAMP[58] = 0.19625601816402848954;
  minBLAMP[59] = 0.15236571049914005016;
  minBLAMP[60] = 0.09703318182392450808;
  minBLAMP[61] = 0.03585444021196337872;
  minBLAMP[62] = -0.02531147571722414114;
  minBLAMP[63] = -0.08088340295021367865;
  minBLAMP[64] = -0.12605295044154729567;
  minBLAMP[65] = -0.15718978838994246416;
  minBLAMP[66] = -0.17212342257398205447;
  minBLAMP[67] = -0.17027979501818890640;
  minBLAMP[68] = -0.15266508529749245326;
  minBLAMP[69] = -0.12170394455884547824;
  minBLAMP[70] = -0.08095210186792201057;
  minBLAMP[71] = -0.03471497086275832089;
  minBLAMP[72] = 0.01238860805510455521;
  minBLAMP[73] = 0.05587429408625865790;
  minBLAMP[74] = 0.09180939907462004612;
  minBLAMP[75] = 0.11716037494028341825;
  minBLAMP[76] = 0.13004092928840549348;
  minBLAMP[77] = 0.12984036771111817643;
  minBLAMP[78] = 0.11722491709101490187;
  minBLAMP[79] = 0.09401666955767495892;
  minBLAMP[80] = 0.06296679502011670593;
  minBLAMP[81] = 0.02744888666791212017;
  minBLAMP[82] = -0.00889442147513364034;
  minBLAMP[83] = -0.04251565155013281583;
  minBLAMP[84] = -0.07030148964535953837;
  minBLAMP[85] = -0.08985478106484379168;
  minBLAMP[86] = -0.09969431183519361639;
  minBLAMP[87] = -0.09935629063544126893;
  minBLAMP[88] = -0.08939175167800783584;
  minBLAMP[89] = -0.07126458692796688865;
  minBLAMP[90] = -0.04716464211880122548;
  minBLAMP[91] = -0.01975790228988216768;
  minBLAMP[92] = 0.00809878887280035542;
  minBLAMP[93] = 0.03364840904745847183;
  minBLAMP[94] = 0.05450106233584506299;
  minBLAMP[95] = 0.06885214187920496443;
  minBLAMP[96] = 0.07563204404672774217;
  minBLAMP[97] = 0.07457552626209462687;
  minBLAMP[98] = 0.06620767215287060026;
  minBLAMP[99] = 0.05175142491438577963;
  minBLAMP[100] = 0.03297019522405264524;
  minBLAMP[101] = 0.01196398562031220081;
  minBLAMP[102] = -0.00905788803456175629;
  minBLAMP[103] = -0.02800370801882934302;
  minBLAMP[104] = -0.04310274239712441613;
  minBLAMP[105] = -0.05306603975162715869;
  minBLAMP[106] = -0.05719014954289036723;
  minBLAMP[107] = -0.05539634927578163115;
  minBLAMP[108] = -0.04820458232639168727;
  minBLAMP[109] = -0.03664815737316473587;
  minBLAMP[110] = -0.02214094933688670608;
  minBLAMP[111] = -0.00631317139713871711;
  minBLAMP[112] = 0.00916596236844213763;
  minBLAMP[113] = 0.02275981653222913792;
  minBLAMP[114] = 0.03321283496647708944;
  minBLAMP[115] = 0.03966196329143656385;
  minBLAMP[116] = 0.04170169780218202504;
  minBLAMP[117] = 0.03939857336504815066;
  minBLAMP[118] = 0.03325644130254090669;
  minBLAMP[119] = 0.02413882932830802019;
  minBLAMP[120] = 0.01315895624956908705;
  minBLAMP[121] = 0.00155036030811572800;
  minBLAMP[122] = -0.00946688662433814443;
  minBLAMP[123] = -0.01881071226848973765;
  minBLAMP[124] = -0.02563966436149200945;
  minBLAMP[125] = -0.02942444606392768947;
  minBLAMP[126] = -0.02998254352878859663;
  minBLAMP[127] = -0.02747487970181339278;
  minBLAMP[128] = -0.02236682582498872307;
  minBLAMP[129] = -0.01536021176687540901;
  minBLAMP[130] = -0.00730494489798161339;
  minBLAMP[131] = 0.00089893769158777559;
  minBLAMP[132] = 0.00839812772660764040;
  minBLAMP[133] = 0.01447166029961977074;
  minBLAMP[134] = 0.01859694538026701593;
  minBLAMP[135] = 0.02049052641359594418;
  minBLAMP[136] = 0.02012099864097649515;
  minBLAMP[137] = 0.01769447440345572886;
  minBLAMP[138] = 0.01361610046077998959;
  minBLAMP[139] = 0.00843334838675957599;
  minBLAMP[140] = 0.00276821090339751663;
  minBLAMP[141] = -0.00275373124527789059;
  minBLAMP[142] = -0.00756938900553905114;
  minBLAMP[143] = -0.01123289256128146008;
  minBLAMP[144] = -0.01345384120725157118;
  minBLAMP[145] = -0.01411623947052476069;
  minBLAMP[146] = -0.01327727917663423796;
  minBLAMP[147] = -0.01114792159575017649;
  minBLAMP[148] = -0.00805834156128071299;
  minBLAMP[149] = -0.00441341242739667905;
  minBLAMP[150] = -0.00064349964949883542;
  minBLAMP[151] = 0.00284346900286891469;
  minBLAMP[152] = 0.00570391379736179260;
  minBLAMP[153] = 0.00769008543250038201;
  minBLAMP[154] = 0.00866875236238229263;
  minBLAMP[155] = 0.00862586888121086304;
  minBLAMP[156] = 0.00765801063704429907;
  minBLAMP[157] = 0.00595242666648232444;
  minBLAMP[158] = 0.00375895837305506575;
  minBLAMP[159] = 0.00135747747179948419;
  minBLAMP[160] = -0.00097516845369227667;
  minBLAMP[161] = -0.00299509083941984500;
  minBLAMP[162] = -0.00451504990545004148;
  minBLAMP[163] = -0.00541973626366143435;
  minBLAMP[164] = -0.00567181886268031121;
  minBLAMP[165] = -0.00530886397393715015;
  minBLAMP[166] = -0.00443210575269858964;
  minBLAMP[167] = -0.00318928256058370607;
  minBLAMP[168] = -0.00175378070414922149;
  minBLAMP[169] = -0.00030287910055903922;
  minBLAMP[170] = 0.00100245401023357772;
  minBLAMP[171] = 0.00203387923522768688;
  minBLAMP[172] = 0.00270690301221065965;
  minBLAMP[173] = 0.00298590069590431995;
  minBLAMP[174] = 0.00288328888501609981;
  minBLAMP[175] = 0.00245308176815228762;
  minBLAMP[176] = 0.00178046987457491923;
  minBLAMP[177] = 0.00096877245607629447;
  minBLAMP[178] = 0.00012576641006489808;
  minBLAMP[179] = -0.00064923036245545518;
  minBLAMP[180] = -0.00127589451344078952;
  minBLAMP[181] = -0.00170018614005584823;
  minBLAMP[182] = -0.00189774176345736123;
  minBLAMP[183] = -0.00187348401371423279;
  minBLAMP[184] = -0.00165773225918997014;
  minBLAMP[185] = -0.00129972432409886096;
  minBLAMP[186] = -0.00085963583052262038;
  minBLAMP[187] = -0.00040014139995037112;
  minBLAMP[188] = 0.00002142376339975272;
  minBLAMP[189] = 0.00035936578737505442;
  minBLAMP[190] = 0.00058387357969991172;
  minBLAMP[191] = 0.00068277666474614307;
  minBLAMP[192] = 0.00066093333089156658;
  minBLAMP[193] = 0.00053753646074028438;
  minBLAMP[194] = 0.00034206544569315156;
  minBLAMP[195] = 0.00010925704518172097;
  minBLAMP[196] = -0.00012588157713366854;
  minBLAMP[197] = -0.00033268132483499357;
  minBLAMP[198] = -0.00048816850986099780;
  minBLAMP[199] = -0.00057915945589570583;
  minBLAMP[200] = -0.00060273077463079971;
  minBLAMP[201] = -0.00056540904631674493;
  minBLAMP[202] = -0.00048103062229643001;
  minBLAMP[203] = -0.00036807294671348245;
  minBLAMP[204] = -0.00024653696610243969;
  minBLAMP[205] = -0.00013502497378681255;
  minBLAMP[206] = -0.00004830732373761748;
  minBLAMP[207] = 0.00000427263688607127;
  minBLAMP[208] = 0.00001949325681493974;
  minBLAMP[209] = -0.00000000719131776350;

);

function init_blep(minBLEP)
local()
instance()
global()
(
  minBLEP[0] = -0.99983233222625944592;
  minBLEP[1] = -0.99925315467300757089;
  minBLEP[2] = -0.99800661818362934596;
  minBLEP[3] = -0.99567860036180733108;
  minBLEP[4] = -0.99173850385054507228;
  minBLEP[5] = -0.98553326172757527157;
  minBLEP[6] = -0.97629627539839392014;
  minBLEP[7] = -0.96316920330913224912;
  minBLEP[8] = -0.94523699970481611654;
  minBLEP[9] = -0.92157633865606802814;
  minBLEP[10] = -0.89131551044235579617;
  minBLEP[11] = -0.85370334228193223147;
  minBLEP[12] = -0.80818267429623391607;
  minBLEP[13] = -0.75446343067965182527;
  minBLEP[14] = -0.69258909421009073881;
  minBLEP[15] = -0.62299025640901395384;
  minBLEP[16] = -0.54651915743154988458;
  minBLEP[17] = -0.46445964926833771536;
  minBLEP[18] = -0.37850879111286883649;
  minBLEP[19] = -0.29072771413180176214;
  minBLEP[20] = -0.20346210880431470081;
  minBLEP[21] = -0.11923481522510226416;
  minBLEP[22] = -0.04061578892397610385;
  minBLEP[23] = 0.02992297163896795453;
  minBLEP[24] = 0.09015810549928837681;
  minBLEP[25] = 0.13826045607300874174;
  minBLEP[26] = 0.17292432369000021453;
  minBLEP[27] = 0.19346970108091721130;
  minBLEP[28] = 0.19990810600344910419;
  minBLEP[29] = 0.19296498052418775693;
  minBLEP[30] = 0.17405461794645482598;
  minBLEP[31] = 0.14520706925207860216;
  minBLEP[32] = 0.10895049580086535457;
  minBLEP[33] = 0.06815574158342752042;
  minBLEP[34] = 0.02585367990936582316;
  minBLEP[35] = -0.01496193018111890982;
  minBLEP[36] = -0.05153150956615937250;
  minBLEP[37] = -0.08151155354950367915;
  minBLEP[38] = -0.10312733155575581900;
  minBLEP[39] = -0.11528412061977910685;
  minBLEP[40] = -0.11762786138190650664;
  minBLEP[41] = -0.11055023694121723921;
  minBLEP[42] = -0.09513736810666773014;
  minBLEP[43] = -0.07306610128299784179;
  minBLEP[44] = -0.04645628841169702206;
  minBLEP[45] = -0.01769091596131722177;
  minBLEP[46] = 0.01078095905502851615;
  minBLEP[47] = 0.03664247520778562972;
  minBLEP[48] = 0.05789201266752819208;
  minBLEP[49] = 0.07299597473362950950;
  minBLEP[50] = 0.08099912207939641284;
  minBLEP[51] = 0.08158375577681775681;
  minBLEP[52] = 0.07507367871607284471;
  minBLEP[53] = 0.06238365610598428646;
  minBLEP[54] = 0.04491967722640688443;
  minBLEP[55] = 0.02443981080394008742;
  minBLEP[56] = 0.00288873482777840529;
  minBLEP[57] = -0.01777909343936479036;
  minBLEP[58] = -0.03577157956484311452;
  minBLEP[59] = -0.04961141817005165766;
  minBLEP[60] = -0.05825563514358911288;
  minBLEP[61] = -0.06117232877057443563;
  minBLEP[62] = -0.05836892158108608619;
  minBLEP[63] = -0.05037073736215924580;
  minBLEP[64] = -0.03815319271986328253;
  minBLEP[65] = -0.02303523606621593611;
  minBLEP[66] = -0.00654500331412055658;
  minBLEP[67] = 0.00972916863824591083;
  minBLEP[68] = 0.02428792522967038181;
  minBLEP[69] = 0.03585649171478455521;
  minBLEP[70] = 0.04349448684804402276;
  minBLEP[71] = 0.04667035496151239471;
  minBLEP[72] = 0.04529463247450715713;
  minBLEP[73] = 0.03971039550975641319;
  minBLEP[74] = 0.03064304042701060382;
  minBLEP[75] = 0.01911576510689227959;
  minBLEP[76] = 0.00633999638541804522;
  minBLEP[77] = -0.00640800609869429660;
  minBLEP[78] = -0.01791184907672538351;
  minBLEP[79] = -0.02712906103545220660;
  minBLEP[80] = -0.03328389144487786666;
  minBLEP[81] = -0.03593060824762539518;
  minBLEP[82] = -0.03498226910902335618;
  minBLEP[83] = -0.03070353408511550253;
  minBLEP[84] = -0.02366956475735748633;
  minBLEP[85] = -0.01469641109491370834;
  minBLEP[86] = -0.00475075478529463080;
  minBLEP[87] = 0.00515128007859777526;
  minBLEP[88] = 0.01404585185374096490;
  minBLEP[89] = 0.02111355477960663585;
  minBLEP[90] = 0.02575334231904236049;
  minBLEP[91] = 0.02763171549579923614;
  minBLEP[92] = 0.02670315566867320634;
  minBLEP[93] = 0.02320113673152657263;
  minBLEP[94] = 0.01760186641587146994;
  minBLEP[95] = 0.01056549085543623256;
  minBLEP[96] = 0.00286169219144438713;
  minBLEP[97] = -0.00471218594692834891;
  minBLEP[98] = -0.01141205067385386851;
  minBLEP[99] = -0.01661873846441130897;
  minBLEP[100] = -0.01989371964704456097;
  minBLEP[101] = -0.02101404162931130859;
  minBLEP[102] = -0.01998384681957454667;
  minBLEP[103] = -0.01702242718128277321;
  minBLEP[104] = -0.01253116586639957397;
  minBLEP[105] = -0.00704370357288508497;
  minBLEP[106] = -0.00116515476207545987;
  minBLEP[107] = 0.00449278360824778566;
  minBLEP[108] = 0.00937409595130622719;
  minBLEP[109] = 0.01303181649475004811;
  minBLEP[110] = 0.01516749298800856849;
  minBLEP[111] = 0.01565345585266508799;
  minBLEP[112] = 0.01453649396468503774;
  minBLEP[113] = 0.01202343629901370115;
  minBLEP[114] = 0.00845107337959905003;
  minBLEP[115] = 0.00424443141785002531;
  minBLEP[116] = -0.00013169496319431762;
  minBLEP[117] = -0.00422262824981700646;
  minBLEP[118] = -0.00762987201836640150;
  minBLEP[119] = -0.01004874252648901845;
  minBLEP[120] = -0.01129423451009725632;
  minBLEP[121] = -0.01131292143694895280;
  minBLEP[122] = -0.01018053628829818091;
  minBLEP[123] = -0.00808638886857537820;
  minBLEP[124] = -0.00530686689772175146;
  minBLEP[125] = -0.00217143958364807155;
  minBLEP[126] = 0.00097478318106003492;
  minBLEP[127] = 0.00380785885190260132;
  minBLEP[128] = 0.00605733396746876984;
  minBLEP[129] = 0.00753094046349755963;
  minBLEP[130] = 0.00812957472922914981;
  minBLEP[131] = 0.00785153631229285054;
  minBLEP[132] = 0.00678636130401399917;
  minBLEP[133] = 0.00509940882683279639;
  minBLEP[134] = 0.00300943305699052921;
  minBLEP[135] = 0.00076202663035629392;
  minBLEP[136] = -0.00139802600506977459;
  minBLEP[137] = -0.00325244909010180550;
  minBLEP[138] = -0.00463056300835462675;
  minBLEP[139] = -0.00542394477869767577;
  minBLEP[140] = -0.00559353981602428441;
  minBLEP[141] = -0.00516879995446917206;
  minBLEP[142] = -0.00423958065799734385;
  minBLEP[143] = -0.00294222610085914660;
  minBLEP[144] = -0.00144167345462431484;
  minBLEP[145] = 0.00008828101531355159;
  minBLEP[146] = 0.00148415893738307325;
  minBLEP[147] = 0.00260946880766921296;
  minBLEP[148] = 0.00336725458417141965;
  minBLEP[149] = 0.00370742095589338128;
  minBLEP[150] = 0.00362844071513790389;
  minBLEP[151] = 0.00317370672342809357;
  minBLEP[152] = 0.00242330821482106273;
  minBLEP[153] = 0.00148241928251180433;
  minBLEP[154] = 0.00046789172434680282;
  minBLEP[155] = -0.00050537086266666531;
  minBLEP[156] = -0.00133672110735316707;
  minBLEP[157] = -0.00194952613199617097;
  minBLEP[158] = -0.00229747459734208626;
  minBLEP[159] = -0.00236706341336623272;
  minBLEP[160] = -0.00217628415561188504;
  minBLEP[161] = -0.00176994072588720908;
  minBLEP[162] = -0.00121232271212001752;
  minBLEP[163] = -0.00057838447860592002;
  minBLEP[164] = 0.00005543614486192006;
  minBLEP[165] = 0.00061985655498242309;
  minBLEP[166] = 0.00105979070667050479;
  minBLEP[167] = 0.00133916252427646043;
  minBLEP[168] = 0.00144320173001033503;
  minBLEP[169] = 0.00137811735718185169;
  minBLEP[170] = 0.00116837916788581353;
  minBLEP[171] = 0.00085222450098010327;
  minBLEP[172] = 0.00047601073033787245;
  minBLEP[173] = 0.00008819293640538461;
  minBLEP[174] = -0.00026640946387346265;
  minBLEP[175] = -0.00055140950522303278;
  minBLEP[176] = -0.00074215465604376973;
  minBLEP[177] = -0.00082735173226033965;
  minBLEP[178] = -0.00080900140927187003;
  minBLEP[179] = -0.00070083046176006025;
  minBLEP[180] = -0.00052547788880641377;
  minBLEP[181] = -0.00031092362500806381;
  minBLEP[182] = -0.00008664893683552055;
  minBLEP[183] = 0.00012000475212370354;
  minBLEP[184] = 0.00028687984479902617;
  minBLEP[185] = 0.00039904821432257265;
  minBLEP[186] = 0.00044979146207158038;
  minBLEP[187] = 0.00044052979696806993;
  minBLEP[188] = 0.00037975359367092842;
  minBLEP[189] = 0.00028122490815052359;
  minBLEP[190] = 0.00016170543867333187;
  minBLEP[191] = 0.00003852987558405907;
  minBLEP[192] = -0.00007262010200204116;
  minBLEP[193] = -0.00015943394260065080;
  minBLEP[194] = -0.00021413970778472180;
  minBLEP[195] = -0.00023397351141629663;
  minBLEP[196] = -0.00022096918500802420;
  minBLEP[197] = -0.00018114346635200729;
  minBLEP[198] = -0.00012323906552302866;
  minBLEP[199] = -0.00005728113238090415;
  minBLEP[200] = 0.00000687520479925041;
  minBLEP[201] = 0.00006085007617717686;
  minBLEP[202] = 0.00009866804980784849;
  minBLEP[203] = 0.00011724682809921561;
  minBLEP[204] = 0.00011652398646422313;
  minBLEP[205] = 0.00009911482118707404;
  minBLEP[206] = 0.00006964880533288920;
  minBLEP[207] = 0.00003390029026784092;
  minBLEP[208] = -0.00000213991410924486;
);

function init_linear_BLEP_BLAMP(linBLEP, linBLAMP)
local()
global()
(
  linBLEP[0] = -0.000000000000000000000000013140;
  linBLEP[1] = -0.000000000003403901462194582241;
  linBLEP[2] = -0.000000000015727545726438455293;
  linBLEP[3] = -0.000000000049690148136016946347;
  linBLEP[4] = -0.000000000127634670926660814243;
  linBLEP[5] = -0.000000000280834117754076270147;
  linBLEP[6] = -0.000000000543308148552643812833;
  linBLEP[7] = -0.000000000938178639935384477722;
  linBLEP[8] = -0.000000001455856418613965776288;
  linBLEP[9] = -0.000000002025566491615387311821;
  linBLEP[10] = -0.000000002484776364424840242248;
  linBLEP[11] = -0.000000002554613142752335188878;
  linBLEP[12] = -0.000000001832657883268350063825;
  linBLEP[13] = 0.000000000183374482168917646478;
  linBLEP[14] = 0.000000004027772795871062731079;
  linBLEP[15] = 0.000000010145175624712008138966;
  linBLEP[16] = 0.000000018713548835315893707061;
  linBLEP[17] = 0.000000029422857915077868911127;
  linBLEP[18] = 0.000000041237062259354944305500;
  linBLEP[19] = 0.000000052185647619681533554879;
  linBLEP[20] = 0.000000059248296191228650241308;
  linBLEP[21] = 0.000000058408042890836325832332;
  linBLEP[22] = 0.000000044949207653487980966217;
  linBLEP[23] = 0.000000014061410552095672329388;
  linBLEP[24] = -0.000000038223873878854857961940;
  linBLEP[25] = -0.000000113793939681754660884481;
  linBLEP[26] = -0.000000211017517313925801335537;
  linBLEP[27] = -0.000000323301303374458606649649;
  linBLEP[28] = -0.000000437918461471591968238969;
  linBLEP[29] = -0.000000535455560264446590417993;
  linBLEP[30] = -0.000000590254320999546505522432;
  linBLEP[31] = -0.000000572195047973102294950102;
  linBLEP[32] = -0.000000450062201043267751407277;
  linBLEP[33] = -0.000000196539762628266990382510;
  linBLEP[34] = 0.000000205391940354405716608052;
  linBLEP[35] = 0.000000755225735053105002588620;
  linBLEP[36] = 0.000001427795737196087923404813;
  linBLEP[37] = 0.000002167509824746426246396989;
  linBLEP[38] = 0.000002885444391819795466536591;
  linBLEP[39] = 0.000003460854675040915279932152;
  linBLEP[40] = 0.000003748462496509662786309649;
  linBLEP[41] = 0.000003592395075173006620787445;
  linBLEP[42] = 0.000002846848628398234026809369;
  linBLEP[43] = 0.000001402472220343583606317109;
  linBLEP[44] = -0.000000783798379621926278668499;
  linBLEP[45] = -0.000003659029823201803808559564;
  linBLEP[46] = -0.000007049413864716667911752921;
  linBLEP[47] = -0.000010645670911489303435480507;
  linBLEP[48] = -0.000014004277897351772444521460;
  linBLEP[49] = -0.000016569313719536981846123733;
  linBLEP[50] = -0.000017717990210383120921284680;
  linBLEP[51] = -0.000016830226783546362175850858;
  linBLEP[52] = -0.000013379076294909013022352458;
  linBLEP[53] = -0.000007034733850248639253641483;
  linBLEP[54] = 0.000002229257568351127566212439;
  linBLEP[55] = 0.000014042531773318539205903065;
  linBLEP[56] = 0.000027574352188345700823699294;
  linBLEP[57] = 0.000041517511623219771686559010;
  linBLEP[58] = 0.000054135011381877153188377227;
  linBLEP[59] = 0.000063379838031373466624394941;
  linBLEP[60] = 0.000067090338613846471930643456;
  linBLEP[61] = 0.000063253522223743360278387649;
  linBLEP[62] = 0.000050316994058753881132860925;
  linBLEP[63] = 0.000027518494692403509398496639;
  linBLEP[64] = -0.000004808157143125476120932432;
  linBLEP[65] = -0.000044998701874632251443333203;
  linBLEP[66] = -0.000089945264500155129474938398;
  linBLEP[67] = -0.000135149019541176202601276413;
  linBLEP[68] = -0.000174971009635785552938092025;
  linBLEP[69] = -0.000203093788924659163826896835;
  linBLEP[70] = -0.000213180741767104596409015960;
  linBLEP[71] = -0.000199690172472107756521109145;
  linBLEP[72] = -0.000158770846858735127909295626;
  linBLEP[73] = -0.000089138647115900211952317644;
  linBLEP[74] = 0.000007185196491631155928060323;
  linBLEP[75] = 0.000124400958985489585185285621;
  linBLEP[76] = 0.000252840625456879429088646871;
  linBLEP[77] = 0.000379353787638411928378329163;
  linBLEP[78] = 0.000488218103464876213536116634;
  linBLEP[79] = 0.000562564547466177090721817233;
  linBLEP[80] = 0.000586238740159214402440646108;
  linBLEP[81] = 0.000545947599938072063163740921;
  linBLEP[82] = 0.000433474367436408329797015160;
  linBLEP[83] = 0.000247694542312921258536695390;
  linBLEP[84] = -0.000003900011129987790301160491;
  linBLEP[85] = -0.000304453667233458365355691644;
  linBLEP[86] = -0.000628015253100543666998911707;
  linBLEP[87] = -0.000940975864787922189683144758;
  linBLEP[88] = -0.001204710559489856466428014947;
  linBLEP[89] = -0.001379313048042550256602756242;
  linBLEP[90] = -0.001428156194997098416346603678;
  linBLEP[91] = -0.001322861743499504846854897266;
  linBLEP[92] = -0.001048140408169722335995910356;
  linBLEP[93] = -0.000605888319232114657200694019;
  linBLEP[94] = -0.000017914945561199493821724626;
  linBLEP[95] = 0.000673257199548304876950133302;
  linBLEP[96] = 0.001405935643812903897489907656;
  linBLEP[97] = 0.002103338929848724229293432941;
  linBLEP[98] = 0.002680132561288747685551703270;
  linBLEP[99] = 0.003051026011023893688700603377;
  linBLEP[100] = 0.003140726400049972683731214218;
  linBLEP[101] = 0.002894272845654419137190194178;
  linBLEP[102] = 0.002286581845752378057412546042;
  linBLEP[103] = 0.001329953479669419890221715441;
  linBLEP[104] = 0.000078346761366941320326069687;
  linBLEP[105] = -0.001372557167966025797392615182;
  linBLEP[106] = -0.002890127354327898766273019504;
  linBLEP[107] = -0.004314531366268086962079131297;
  linBLEP[108] = -0.005473033447448000070323370636;
  linBLEP[109] = -0.006197822254212710310627976185;
  linBLEP[110] = -0.006345793887300467221723732081;
  linBLEP[111] = -0.005818273016503925504361305343;
  linBLEP[112] = -0.004578390094778615401760468728;
  linBLEP[113] = -0.002663800121998036261189435336;
  linBLEP[114] = -0.000192661454019924985705050635;
  linBLEP[115] = 0.002638702262115844368595141134;
  linBLEP[116] = 0.005567283097084012831456956150;
  linBLEP[117] = 0.008283898938338767406475149357;
  linBLEP[118] = 0.010461575823229068982200828941;
  linBLEP[119] = 0.011789607520617617283931188865;
  linBLEP[120] = 0.012010183832174999712938401331;
  linBLEP[121] = 0.010953808945859148590851184224;
  linBLEP[122] = 0.008569408491493348337120217195;
  linBLEP[123] = 0.004945124437942783127142298838;
  linBLEP[124] = 0.000316356375845750143523810172;
  linBLEP[125] = -0.004941386340899573195728500252;
  linBLEP[126] = -0.010335868592846285743402923174;
  linBLEP[127] = -0.015297138775136283339595166808;
  linBLEP[128] = -0.019229779920794606157263828550;
  linBLEP[129] = -0.021574314390734105478797388855;
  linBLEP[130] = -0.021872229313805547495919157086;
  linBLEP[131] = -0.019828087873458726669850804569;
  linBLEP[132] = -0.015361782625860468526335367301;
  linBLEP[133] = -0.008644271317702328233378850086;
  linBLEP[134] = -0.000111147286811514599855037211;
  linBLEP[135] = 0.009549905356051647392634507128;
  linBLEP[136] = 0.019439454271439782218067193753;
  linBLEP[137] = 0.028513492261511199504786517878;
  linBLEP[138] = 0.035673685024161551349042298398;
  linBLEP[139] = 0.039874282240161297574676524391;
  linBLEP[140] = 0.040237042570803960295222623245;
  linBLEP[141] = 0.036163959288091344912441371662;
  linBLEP[142] = 0.027436890565046053586106822308;
  linBLEP[143] = 0.014293527119332627428605064779;
  linBLEP[144] = -0.002529494431924469901445950981;
  linBLEP[145] = -0.021793169511856134989979949523;
  linBLEP[146] = -0.041796068574341677104300174506;
  linBLEP[147] = -0.060457607591737183572178082613;
  linBLEP[148] = -0.075440677727175470268505819149;
  linBLEP[149] = -0.084305882127266196235382267332;
  linBLEP[150] = -0.084686359916769315958617880824;
  linBLEP[151] = -0.074469759772709392953160545403;
  linBLEP[152] = -0.051972622640384331937912776311;
  linBLEP[153] = -0.016092411507283129606937777112;
  linBLEP[154] = 0.033576266302560983656455562141;
  linBLEP[155] = 0.096672140657347901959717262343;
  linBLEP[156] = 0.172051752253990025698371368890;
  linBLEP[157] = 0.257830854911563156495191151407;
  linBLEP[158] = 0.351480971407755971025466124047;
  linBLEP[159] = 0.449974681272772958351424676948;
  linBLEP[160] = -0.449974756408413389952016814277;
  linBLEP[161] = -0.351481046509633188179577700794;
  linBLEP[162] = -0.257830929945955633630916281618;
  linBLEP[163] = -0.172051827187259781526407209640;
  linBLEP[164] = -0.096672215455981855281031300819;
  linBLEP[165] = -0.033576340933212274475483383185;
  linBLEP[166] = 0.016092337077754016727570984813;
  linBLEP[167] = 0.051972548444869134942614152806;
  linBLEP[168] = 0.074469685843812041814437918674;
  linBLEP[169] = 0.084686286286765957709299357248;
  linBLEP[170] = 0.084305808828066777782517249307;
  linBLEP[171] = 0.075440604790285206715516608256;
  linBLEP[172] = 0.060457535048218873086067759459;
  linBLEP[173] = 0.041795996454779424378322971734;
  linBLEP[174] = 0.021793097846319164911932375617;
  linBLEP[175] = 0.002529423249932442191445502999;
  linBLEP[176] = -0.014293597788843058482566306111;
  linBLEP[177] = -0.027436960693754439133407174722;
  linBLEP[178] = -0.036164028848324841769468207531;
  linBLEP[179] = -0.040237111535567707254479330459;
  linBLEP[180] = -0.039874350583167593453648436252;
  linBLEP[181] = -0.035673752719857641790834890116;
  linBLEP[182] = -0.028513559285105946616845074004;
  linBLEP[183] = -0.019439520598928498873458892149;
  linBLEP[184] = -0.009549970964240039883463850856;
  linBLEP[185] = 0.000111082420285189644218980243;
  linBLEP[186] = 0.008644207214346498122092832261;
  linBLEP[187] = 0.015361719306311005447951423264;
  linBLEP[188] = 0.019828025357461243755041735426;
  linBLEP[189] = 0.021872167620199341186992825214;
  linBLEP[190] = 0.021574253537437571709434180889;
  linBLEP[191] = 0.019229719924792491869691701822;
  linBLEP[192] = 0.015297079652467729035669741222;
  linBLEP[193] = 0.010335810358595801453085449850;
  linBLEP[194] = 0.004941329009188638078653443841;
  linBLEP[195] = -0.000316412791865016286129569378;
  linBLEP[196] = -0.004945179926092536058790383180;
  linBLEP[197] = -0.008569463040573245538045199510;
  linBLEP[198] = -0.010953862545648021531441429488;
  linBLEP[199] = -0.012010236473430855805299977135;
  linBLEP[200] = -0.011789659195076107253696839905;
  linBLEP[201] = -0.010461626523600404264913166230;
  linBLEP[202] = -0.008283948658303124865098787666;
  linBLEP[203] = -0.005567331831285422458210909724;
  linBLEP[204] = -0.002638750006154524842955089170;
  linBLEP[205] = 0.000192614703596428348724226010;
  linBLEP[206] = 0.002663754367705396027682374083;
  linBLEP[207] = 0.004578345338207148208786723131;
  linBLEP[208] = 0.005818229258332530129393944662;
  linBLEP[209] = 0.006345751127310130489111994478;
  linBLEP[210] = 0.006197780491302599253922167577;
  linBLEP[211] = 0.005472992679652058031769534807;
  linBLEP[212] = 0.004314491590773152779325627648;
  linBLEP[213] = 0.002890088567492554542937011064;
  linBLEP[214] = 0.001372519365340803178948680952;
  linBLEP[215] = -0.000078383585018594180860579401;
  linBLEP[216] = -0.001329989330349283906465562843;
  linBLEP[217] = -0.002286616730204513170399138744;
  linBLEP[218] = -0.002894306771341598801677852393;
  linBLEP[219] = -0.003140759375129359778910931311;
  linBLEP[220] = -0.003051058044321962921946456149;
  linBLEP[221] = -0.002680163662275675869745006352;
  linBLEP[222] = -0.002103369108612118763140808042;
  linBLEP[223] = -0.001405964911031018201373332666;
  linBLEP[224] = -0.000673285566463192246093594218;
  linBLEP[225] = 0.000017887467171456260939385249;
  linBLEP[226] = 0.000605861717081295023806797317;
  linBLEP[227] = 0.001048114669491332978309983126;
  linBLEP[228] = 0.001322836855075184029836843358;
  linBLEP[229] = 0.001428132143185069629492955912;
  linBLEP[230] = 0.001379289818805947212543294711;
  linBLEP[231] = 0.001204688138425315897458989234;
  linBLEP[232] = 0.000940954237153917086300403128;
  linBLEP[233] = 0.000627994403845872316283216463;
  linBLEP[234] = 0.000304433581025282849145258135;
  linBLEP[235] = 0.000003880672381827371236458300;
  linBLEP[236] = -0.000247713149413399504397692574;
  linBLEP[237] = -0.000433492258900087731876560326;
  linBLEP[238] = -0.000545964791947298124126508601;
  linBLEP[239] = -0.000586255249041156773284755310;
  linBLEP[240] = -0.000562580389666739329700140271;
  linBLEP[241] = -0.000488233295522915518478701546;
  linBLEP[242] = -0.000379368346160603535626582028;
  linBLEP[243] = -0.000252854567093160247440164490;
  linBLEP[244] = -0.000124414300405056670300457666;
  linBLEP[245] = -0.000007197954359604288213472009;
  linBLEP[246] = 0.000089126456161123848156643823;
  linBLEP[247] = 0.000158759206227445672475473426;
  linBLEP[248] = 0.000199679065644527815003017590;
  linBLEP[249] = 0.000213170152313903996012939279;
  linBLEP[250] = 0.000203083700526638603195417332;
  linBLEP[251] = 0.000174961406102815825169827235;
  linBLEP[252] = 0.000135139884830280356453266477;
  linBLEP[253] = 0.000089936582732842896984251646;
  linBLEP[254] = 0.000044990457353349515854171181;
  linBLEP[255] = 0.000004800334366826013778603924;
  linBLEP[256] = -0.000027525911013429260409219809;
  linBLEP[257] = -0.000050324018989011502507157497;
  linBLEP[258] = -0.000063260170589496143096937264;
  linBLEP[259] = -0.000067096624990936129810832622;
  linBLEP[260] = -0.000063385776733874922214684311;
  linBLEP[261] = -0.000054140616451651870765643393;
  linBLEP[262] = -0.000041522796820292019531143529;
  linBLEP[263] = -0.000027579330982134401574479288;
  linBLEP[264] = -0.000014047217334702397347552701;
  linBLEP[265] = -0.000002233662762559946076952686;
  linBLEP[266] = 0.000007030596469940362292806984;
  linBLEP[267] = 0.000013375194492666751510116969;
  linBLEP[268] = 0.000016826588645698802357677029;
  linBLEP[269] = 0.000017714584149386160386073844;
  linBLEP[270] = 0.000016566128477162601049556268;
  linBLEP[271] = 0.000014001302547168333525865781;
  linBLEP[272] = 0.000010642894860609507736337771;
  linBLEP[273] = 0.000007046826854890862905692571;
  linBLEP[274] = 0.000003656621931214222149229571;
  linBLEP[275] = 0.000000781560017064370031233803;
  linBLEP[276] = -0.000001404550307933840393395815;
  linBLEP[277] = -0.000002848775362991492226307768;
  linBLEP[278] = -0.000003594179048269626311799211;
  linBLEP[279] = -0.000003750111971714039256340549;
  linBLEP[280] = -0.000003462377591163923117950846;
  linBLEP[281] = -0.000002886848366469543761985740;
  linBLEP[282] = -0.000002168802158402039832090294;
  linBLEP[283] = -0.000001428983417722977648884274;
  linBLEP[284] = -0.000000756315442648915615282397;
  linBLEP[285] = -0.000000206390052889496919682352;
  linBLEP[286] = 0.000000195627163889354780757293;
  linBLEP[287] = 0.000000449229325375519662460474;
  linBLEP[288] = 0.000000571436388787004477040428;
  linBLEP[289] = 0.000000589564649137179126012925;
  linBLEP[290] = 0.000000534829917011488673896091;
  linBLEP[291] = 0.000000437352151304022203357407;
  linBLEP[292] = 0.000000322789886465952034132155;
  linBLEP[293] = 0.000000210556801820510668296255;
  linBLEP[294] = 0.000000113379973823150848150484;
  linBLEP[295] = 0.000000037852937837732675685860;
  linBLEP[296] = -0.000000014392812898899335432466;
  linBLEP[297] = -0.000000045244357154968028771772;
  linBLEP[298] = -0.000000058670013674774863845532;
  linBLEP[299] = -0.000000059479964336857646852924;
  linBLEP[300] = -0.000000052389699938306108725613;
  linBLEP[301] = -0.000000041416005166493189872795;
  linBLEP[302] = -0.000000029579026384889853547286;
  linBLEP[303] = -0.000000018849115425282698625379;
  linBLEP[304] = -0.000000010262159562387294283990;
  linBLEP[305] = -0.000000004128049114959331164161;
  linBLEP[306] = -0.000000000268683203636233791357;
  linBLEP[307] = 0.000000001760702534493665325814;
  linBLEP[308] = 0.000000002494513491021433575421;
  linBLEP[309] = 0.000000002435142012659400547112;
  linBLEP[310] = 0.000000001985105031498268077593;
  linBLEP[311] = 0.000000001423364125695903540064;
  linBLEP[312] = 0.000000000912531157337975261551;
  linBLEP[313] = 0.000000000523451161894355773012;
  linBLEP[314] = 0.000000000265774024198465754538;
  linBLEP[315] = 0.000000000116429243561382628861;
  linBLEP[316] = 0.000000000041439197618202190156;
  linBLEP[317] = 0.000000000009563579941210508765;
  linBLEP[318] = -0.000000000001517215941471168659;
  linBLEP[319] = -0.000000000004508391706625835159;
  linBLAMP[0] = 0.000000000000000000000000000000;
  linBLAMP[1] = -0.000000000000000000000000014343;
  linBLAMP[2] = -0.000000000004263570735710062942;
  linBLAMP[3] = -0.000000000026759673622452417492;
  linBLAMP[4] = -0.000000000103824756087140532795;
  linBLAMP[5] = -0.000000000311081453111246646894;
  linBLAMP[6] = -0.000000000780450635536937374303;
  linBLAMP[7] = -0.000000001709780088302135538556;
  linBLAMP[8] = -0.000000003354646998619016245701;
  linBLAMP[9] = -0.000000005990343393078395477718;
  linBLAMP[10] = -0.000000009833171857499587157449;
  linBLAMP[11] = -0.000000014915162015487316083049;
  linBLAMP[12] = -0.000000020915990822835644824952;
  linBLAMP[13] = -0.000000026970311023250458011941;
  linBLAMP[14] = -0.000000031486761857989704780268;
  linBLAMP[15] = -0.000000032034090333055832846044;
  linBLAMP[16] = -0.000000025365922728991913313929;
  linBLAMP[17] = -0.000000007663326552671184141058;
  linBLAMP[18] = 0.000000024932778072929501383991;
  linBLAMP[19] = 0.000000075454845129009447361943;
  linBLAMP[20] = 0.000000144914973087670827293794;
  linBLAMP[21] = 0.000000230868216778269742997097;
  linBLAMP[22] = 0.000000325913228193459672921113;
  linBLAMP[23] = 0.000000416415006428342505491382;
  linBLAMP[24] = 0.000000481828868661287612143473;
  linBLAMP[25] = 0.000000495064653590446370090724;
  linBLAMP[26] = 0.000000424328049233740070609564;
  linBLAMP[27] = 0.000000236785205459755443096909;
  linBLAMP[28] = -0.000000095802358329514598252637;
  linBLAMP[29] = -0.000000589639475211221938487480;
  linBLAMP[30] = -0.000001240237762955853574432601;
  linBLAMP[31] = -0.000002013594741118645558577115;
  linBLAMP[32] = -0.000002838746878461724895041998;
  linBLAMP[33] = -0.000003603614720444819069923408;
  linBLAMP[34] = -0.000004156242680771569021505683;
  linBLAMP[35] = -0.000004313413477996691535506363;
  linBLAMP[36] = -0.000003878095657135145800722964;
  linBLAMP[37] = -0.000002666209456549679048691960;
  linBLAMP[38] = -0.000000541780861296782528514727;
  linBLAMP[39] = 0.000002542213263008359291423221;
  linBLAMP[40] = 0.000006501941613457459229045467;
  linBLAMP[41] = 0.000011086220090137831399386761;
  linBLAMP[42] = 0.000015853263531411277971298890;
  linBLAMP[43] = 0.000020169083575155906547498458;
  linBLAMP[44] = 0.000023235287589609919512139563;
  linBLAMP[45] = 0.000024151923375643964990097667;
  linBLAMP[46] = 0.000022017315264024111198196826;
  linBLAMP[47] = 0.000016061653656407552778675324;
  linBLAMP[48] = 0.000005804809044952814739556576;
  linBLAMP[49] = -0.000008777889654015293401795317;
  linBLAMP[50] = -0.000027104411735752907214530918;
  linBLAMP[51] = -0.000047876440588539868133295674;
  linBLAMP[52] = -0.000069040398490103724207615776;
  linBLAMP[53] = -0.000087845977327386104015378987;
  linBLAMP[54] = -0.000101022368669799261168412707;
  linBLAMP[55] = -0.000105080767030273962100474228;
  linBLAMP[56] = -0.000096735601794208976198993777;
  linBLAMP[57] = -0.000073417548411255228882690838;
  linBLAMP[58] = -0.000033830702931130369462073282;
  linBLAMP[59] = 0.000021512889631254338235286788;
  linBLAMP[60] = 0.000089862675917843845563304228;
  linBLAMP[61] = 0.000165990845340110331537081256;
  linBLAMP[62] = 0.000242228805216039284713136492;
  linBLAMP[63] = 0.000308844854192407900200095794;
  linBLAMP[64] = 0.000354797914790917019636079521;
  linBLAMP[65] = 0.000368858561274311002459169728;
  linBLAMP[66] = 0.000341035681953236506028931396;
  linBLAMP[67] = 0.000264190261022463168498475294;
  linBLAMP[68] = 0.000135664043613523621015920506;
  linBLAMP[69] = -0.000041291503763168727612117154;
  linBLAMP[70] = -0.000256523049020907216877934731;
  linBLAMP[71] = -0.000492652351465893822285435633;
  linBLAMP[72] = -0.000725617103545994385389861225;
  linBLAMP[73] = -0.000926198351482784322519226095;
  linBLAMP[74] = -0.001062552983507346554895023338;
  linBLAMP[75] = -0.001103640864404831049838673351;
  linBLAMP[76] = -0.001023294899676379949432503125;
  linBLAMP[77] = -0.000804545135623424426465910564;
  linBLAMP[78] = -0.000443694184721861678653148653;
  linBLAMP[79] = 0.000046429315163421197663190521;
  linBLAMP[80] = 0.000634621922765465852796229473;
  linBLAMP[81] = 0.001271379116655369173952139228;
  linBLAMP[82] = 0.001891264395971626070466764524;
  linBLAMP[83] = 0.002417725489020881857182843078;
  linBLAMP[84] = 0.002770226708910632652110850316;
  linBLAMP[85] = 0.002873247716747490999866787575;
  linBLAMP[86] = 0.002666378882562631114083728789;
  linBLAMP[87] = 0.002114463236583475052449143661;
  linBLAMP[88] = 0.001216537885102104629697628013;
  linBLAMP[89] = 0.000012253644080794860485544677;
  linBLAMP[90] = -0.001415468634526244069010703086;
  linBLAMP[91] = -0.002942536771171365417298915190;
  linBLAMP[92] = -0.004411115757717466202836309463;
  linBLAMP[93] = -0.005642401436909638690053725441;
  linBLAMP[94] = -0.006454099973856798622140473753;
  linBLAMP[95] = -0.006681290216273482948650119795;
  linBLAMP[96] = -0.006198714712005906624092688162;
  linBLAMP[97] = -0.004942053065351972168661731644;
  linBLAMP[98] = -0.002925461527074337594184205713;
  linBLAMP[99] = -0.000252683167539805345579162488;
  linBLAMP[100] = 0.002880614328808008689497555110;
  linBLAMP[101] = 0.006194924343718785295087592147;
  linBLAMP[102] = 0.009346064609633018827050676691;
  linBLAMP[103] = 0.011954846892734233634869589480;
  linBLAMP[104] = 0.013645344058167158812766572851;
  linBLAMP[105] = 0.014088541387473667299001789388;
  linBLAMP[106] = 0.013047051188293615556212934337;
  linBLAMP[107] = 0.010415819423834670257034140661;
  linBLAMP[108] = 0.006253500225914835827789595157;
  linBLAMP[109] = 0.000799517442640752308037621621;
  linBLAMP[110] = -0.005527188142863159389661653620;
  linBLAMP[111] = -0.012150142667804050833346707350;
  linBLAMP[112] = -0.018378388632680660308427178506;
  linBLAMP[113] = -0.023468535286909002202104801427;
  linBLAMP[114] = -0.026701270531601272589794504597;
  linBLAMP[115] = -0.027465525068216568860268722574;
  linBLAMP[116] = -0.025341705806519898569462156956;
  linBLAMP[117] = -0.020174406567131878548204682033;
  linBLAMP[118] = -0.012124971530246579295986286695;
  linBLAMP[119] = -0.001695353902797054916271046743;
  linBLAMP[120] = 0.010283110899714809419180916450;
  linBLAMP[121] = 0.022699228413034122642244483359;
  linBLAMP[122] = 0.034249056972902827689075877515;
  linBLAMP[123] = 0.043555591162813454830793347128;
  linBLAMP[124] = 0.049311741650659400570955170906;
  linBLAMP[125] = 0.050433614565343794222673778904;
  linBLAMP[126] = 0.046208385761350778686562534858;
  linBLAMP[127] = 0.036419786034540310715179600720;
  linBLAMP[128] = 0.021434661542569337366881399021;
  linBLAMP[129] = 0.002236387591820693850758194898;
  linBLAMP[130] = -0.019604959941673823914376484367;
  linBLAMP[131] = -0.042030090629422513226476354475;
  linBLAMP[132] = -0.062653275221429563512920424273;
  linBLAMP[133] = -0.078980773817125024538476907310;
  linBLAMP[134] = -0.088668248701113130949558183147;
  linBLAMP[135] = -0.089794469773269269818882776235;
  linBLAMP[136] = -0.081124331752555192687204055346;
  linBLAMP[137] = -0.062332259361971578681682615297;
  linBLAMP[138] = -0.034157896039865964787907159916;
  linBLAMP[139] = 0.001530283046240540597085488805;
  linBLAMP[140] = 0.041781247522409241390572987029;
  linBLAMP[141] = 0.082726469261768367791098910402;
  linBLAMP[142] = 0.119862050110351642251416137697;
  linBLAMP[143] = 0.148434845921798147516668109347;
  linBLAMP[144] = 0.163908447648124233619881806590;
  linBLAMP[145] = 0.162475213656883804569375229221;
  linBLAMP[146] = 0.141573312245139276699390507019;
  linBLAMP[147] = 0.100363785771894420406624703901;
  linBLAMP[148] = 0.040122572046498411468817835157;
  linBLAMP[149] = -0.035493545983111066122184240612;
  linBLAMP[150] = -0.120340090522548653906298454785;
  linBLAMP[151] = -0.205858736022991650749247583008;
  linBLAMP[152] = -0.281339474664199507003559119767;
  linBLAMP[153] = -0.334363369384346464929791409304;
  linBLAMP[154] = -0.351402776397921778883670640425;
  linBLAMP[155] = -0.318541890779168224145934118496;
  linBLAMP[156] = -0.222269110529926094965702532136;
  linBLAMP[157] = -0.050285126801527649242906647942;
  linBLAMP[158] = 0.207732391371631491816529546668;
  linBLAMP[159] = 0.559464766007640723621818779066;
  linBLAMP[160] = 1.009439447280413570950940993498;
  linBLAMP[161] = 0.559213287677510550999215865886;
  linBLAMP[162] = 0.207545578041250816658802591519;
  linBLAMP[163] = -0.050217583075745024501213009671;
  linBLAMP[164] = -0.221870049316356343638290127274;
  linBLAMP[165] = -0.317826883248617353405762742113;
  linBLAMP[166] = -0.350456227468805670000051577517;
  linBLAMP[167] = -0.333312616673190398319803762206;
  linBLAMP[168] = -0.280329087226878992389345057745;
  linBLAMP[169] = -0.205027113109349651276502868313;
  linBLAMP[170] = -0.119800161102371127697097108467;
  linBLAMP[171] = -0.035318907986468993376316660715;
  linBLAMP[172] = 0.039905307657940904120241754072;
  linBLAMP[173] = 0.099776306116486607189486335301;
  linBLAMP[174] = 0.140681040827509706847564530108;
  linBLAMP[175] = 0.161377885486321343000426509207;
  linBLAMP[176] = 0.162727242328961907436024603157;
  linBLAMP[177] = 0.147297748487357216262694237230;
  linBLAMP[178] = 0.118889176465653542691391919561;
  linBLAMP[179] = 0.082016979762703404177592858559;
  linBLAMP[180] = 0.041403198426277112997873075528;
  linBLAMP[181] = 0.001514367374674681224547279079;
  linBLAMP[182] = -0.033820241619543355005017559733;
  linBLAMP[183] = -0.061686403013359050739872202485;
  linBLAMP[184] = -0.080246139013737546874516226580;
  linBLAMP[185] = -0.088781017651082580477428507493;
  linBLAMP[186] = -0.087626711822076597258046604111;
  linBLAMP[187] = -0.078016767475122261732423112335;
  linBLAMP[188] = -0.061859928950807101244446783994;
  linBLAMP[189] = -0.041478978370049074397840627171;
  linBLAMP[190] = -0.019339752397807580264199600606;
  linBLAMP[191] = 0.002203021745707567195793341597;
  linBLAMP[192] = 0.021120755334003576270118784919;
  linBLAMP[193] = 0.035870595438239769037203075186;
  linBLAMP[194] = 0.045490278946274248506043136331;
  linBLAMP[195] = 0.049626123465824796554546338712;
  linBLAMP[196] = 0.048498718027365099458858566095;
  linBLAMP[197] = 0.042816447148434161329433322862;
  linBLAMP[198] = 0.033651000566917138590028457656;
  linBLAMP[199] = 0.022291241722906349198574105230;
  linBLAMP[200] = 0.010092186639469744036112786034;
  linBLAMP[201] = -0.001665474422244850533428306427;
  linBLAMP[202] = -0.011892595867301956544248575653;
  linBLAMP[203] = -0.019776518280105636476973174354;
  linBLAMP[204] = -0.024828923543814152702369213443;
  linBLAMP[205] = -0.026896035754683422086541710883;
  linBLAMP[206] = -0.026134440106375934204097077895;
  linBLAMP[207] = -0.022958882286315467763371245269;
  linBLAMP[208] = -0.017970516076532452864888966815;
  linBLAMP[209] = -0.011875077269686779360413630968;
  linBLAMP[210] = -0.005400392957078543540450077387;
  linBLAMP[211] = 0.000778387620874965765332964551;
  linBLAMP[212] = 0.006099219731833620088135017312;
  linBLAMP[213] = 0.010154868131704655048741514634;
  linBLAMP[214] = 0.012713942877752048773998261311;
  linBLAMP[215] = 0.013721665518698538191455504887;
  linBLAMP[216] = 0.013282792734336423129404280985;
  linBLAMP[217] = 0.011630658041619309009395699661;
  linBLAMP[218] = 0.009087229499517431377531018200;
  linBLAMP[219] = 0.006019395199184091396760187820;
  linBLAMP[220] = 0.002796420845602847274347091400;
  linBLAMP[221] = -0.000247226125973193106965392074;
  linBLAMP[222] = -0.002840585218831999467919979807;
  linBLAMP[223] = -0.004794622902932717430080078458;
  linBLAMP[224] = -0.006009848499278572404869169787;
  linBLAMP[225] = -0.006473801014749189230990111810;
  linBLAMP[226] = -0.006250045498097171227380730585;
  linBLAMP[227] = -0.005460980657339695523710965119;
  linBLAMP[228] = -0.004267090927522572928187738484;
  linBLAMP[229] = -0.002845284404550666845085116208;
  linBLAMP[230] = -0.001368685450523352258728193576;
  linBLAMP[231] = 0.000010235430031483688491714124;
  linBLAMP[232] = 0.001171930182150111247191270891;
  linBLAMP[233] = 0.002036841633870180474918942792;
  linBLAMP[234] = 0.002567307670110052092438124305;
  linBLAMP[235] = 0.002764876291675185185359175932;
  linBLAMP[236] = 0.002664005891690434269652998367;
  linBLAMP[237] = 0.002323361120709644019044493035;
  linBLAMP[238] = 0.001815985739877584107665464686;
  linBLAMP[239] = 0.001219556461249258734816369731;
  linBLAMP[240] = 0.000607726486583690713588756793;
  linBLAMP[241] = 0.000043293362042134851599018558;
  linBLAMP[242] = -0.000426385146807741084989257230;
  linBLAMP[243] = -0.000771611430032943888118746045;
  linBLAMP[244] = -0.000980360584665267804568844490;
  linBLAMP[245] = -0.001056452205794413670356113322;
  linBLAMP[246] = -0.001016385420712500719381266023;
  linBLAMP[247] = -0.000885400685326092479199289187;
  linBLAMP[248] = -0.000693319924764105970094174580;
  linBLAMP[249] = -0.000470646252127640779636813528;
  linBLAMP[250] = -0.000245293248508604100430879891;
  linBLAMP[251] = -0.000040180887524443367731473431;
  linBLAMP[252] = 0.000128200848078966156374722263;
  linBLAMP[253] = 0.000250283013093233056619441035;
  linBLAMP[254] = 0.000323084874399173305279525659;
  linBLAMP[255] = 0.000349246593900458376837775409;
  linBLAMP[256] = 0.000335651382067548187827094042;
  linBLAMP[257] = 0.000291864381039701713260736682;
  linBLAMP[258] = 0.000228592827720313794461620693;
  linBLAMP[259] = 0.000156330663199425785479454443;
  linBLAMP[260] = 0.000084298857413356878499552383;
  linBLAMP[261] = 0.000019738196403618513564276471;
  linBLAMP[262] = -0.000032439126887924354144913941;
  linBLAMP[263] = -0.000069674065366201245737103054;
  linBLAMP[264] = -0.000091525533638972815693446439;
  linBLAMP[265] = -0.000099255656493772359745021705;
  linBLAMP[266] = -0.000095319273488866278556952416;
  linBLAMP[267] = -0.000082834827623916841240515885;
  linBLAMP[268] = -0.000065099586258493473780485650;
  linBLAMP[269] = -0.000045193662592980210729147472;
  linBLAMP[270] = -0.000025697580033514537070247694;
  linBLAMP[271] = -0.000008529732723195173390434709;
  linBLAMP[272] = 0.000005105065046560927334790350;
  linBLAMP[273] = 0.000014675569289030522432360978;
  linBLAMP[274] = 0.000020218393865822923343789422;
  linBLAMP[275] = 0.000022194077515765668335949445;
  linBLAMP[276] = 0.000021330497634694466058645490;
  linBLAMP[277] = 0.000018474684212521891963579984;
  linBLAMP[278] = 0.000014468106340193364215481082;
  linBLAMP[279] = 0.000010054116560540547571840110;
  linBLAMP[280] = 0.000005820318003231002160560714;
  linBLAMP[281] = 0.000002173782597526214690011361;
  linBLAMP[282] = -0.000000656364337934109408469001;
  linBLAMP[283] = -0.000002596384624842454262128120;
  linBLAMP[284] = -0.000003693311484730607433744605;
  linBLAMP[285] = -0.000004075614807020929785221549;
  linBLAMP[286] = -0.000003915141924001903324717693;
  linBLAMP[287] = -0.000003394584289317302930219207;
  linBLAMP[288] = -0.000002682898164910855906767698;
  linBLAMP[289] = -0.000001919459754202576311584881;
  linBLAMP[290] = -0.000001206428658278600981240474;
  linBLAMP[291] = -0.000000607907451572281148163975;
  linBLAMP[292] = -0.000000154023129805379539869069;
  linBLAMP[293] = 0.000000152035371325885067556675;
  linBLAMP[294] = 0.000000325799288588282729144959;
  linBLAMP[295] = 0.000000393528629253100651479191;
  linBLAMP[296] = 0.000000385405698165174991443938;
  linBLAMP[297] = 0.000000330426954295547043635977;
  linBLAMP[298] = 0.000000253124291390226947981776;
  linBLAMP[299] = 0.000000171961397083188030108106;
  linBLAMP[300] = 0.000000099073168226423266072595;
  linBLAMP[301] = 0.000000040938890408148104557153;
  linBLAMP[302] = -0.000000000416391247585432837994;
  linBLAMP[303] = -0.000000026038396253708829093930;
  linBLAMP[304] = -0.000000038734601776890450941140;
  linBLAMP[305] = -0.000000041999055364593657721211;
  linBLAMP[306] = -0.000000039242009884092638318554;
  linBLAMP[307] = -0.000000033326085012664195463327;
  linBLAMP[308] = -0.000000026364523637879024068497;
  linBLAMP[309] = -0.000000019713466633263518936061;
  linBLAMP[310] = -0.000000014085128913779121496365;
  linBLAMP[311] = -0.000000009716839666268650396960;
  linBLAMP[312] = -0.000000006546376100297416396033;
  linBLAMP[313] = -0.000000004361877741409825645909;
  linBLAMP[314] = -0.000000002911169982934897510001;
  linBLAMP[315] = -0.000000001968300668288728131363;
  linBLAMP[316] = -0.000000001363598113205714251562;
  linBLAMP[317] = -0.000000000987733745476962365371;
  linBLAMP[318] = -0.000000000780940452859618211996;
  linBLAMP[319] = -0.000000000716834281320201179582;
  20.0 // Group delay
);

// Initialize buffer which stores a band limiting function
// Contains pairs of location (subsample location) and multiplier (scaling).
function initBLBuffer(bl_buffer_in)
instance(count, bl_buffer)
local()
global()
(
  count = 0;
  bl_buffer = bl_buffer_in;
);

// Add band limiting function
function addBL(t, mul)
local()
instance(count, bl_buffer)
global(global_offset)
(
  bl_buffer[2*count] = 8*t + global_offset;
  bl_buffer[2*count+1] = mul;

  count += 1;
);

// Read the currently active band limiting functions for this buffer.
// Note that it is passed an instance with a bl_buffer (this contains which
// bl functions are currently active). BL_LUT contains the lookup table
// where the shapes of the band limiting functions can be found (for instance
// BLEP or BLAMP).
function readBLs(BL_LUT)
local(loc, ptr, accum, mul, frac, ism1, is0, is1, is2, id0, id1, id2, id3)
instance(count, bl_buffer)
global()
(
  accum = 0;
  ptr = bl_buffer;
  loop(count,
    loc = ptr[];
    
    loc > 320 ? ( //208-4
      memcpy(ptr, ptr+2, 2*count);
      // Set last mul to zero so that we don't get sound from it.
      bl_buffer[2*count + 1] = 0;
      count -= 1;
    ) : (
      frac = loc - floor(loc);
      /* Low order interpolation */
      accum += ptr[1] * (BL_LUT[loc] * (1-frac) + BL_LUT[loc+1]*frac);
      
      /* Higher order Hermite interpolation */
   /*   ism1 = BL_LUT[loc];
      is0 = BL_LUT[loc+1];
      is1 = BL_LUT[loc+2];
      is2 = BL_LUT[loc+3];
      
      id0 = is0;
      id1 = 0.5*(is1 - ism1);
      id2 = ism1 - 2.5*is0 + 2*is1 - 0.5*is2;
      id3 = 0.5*(is2 - ism1) + 1.5 * (is0 - is1);
      accum += ptr[1] * (((id3*frac+id2)*frac+id1)*frac+id0);*/


//      accum += ptr[1] * BL_LUT[loc];

      ptr[] += 8; /* Advance blep */
      ptr += 2;
    );
  );
  
  accum
);

function init_hardsync(t1, t2)
local()
global()
instance(t_current, t_next)
(
  t_current = t1;
  t_next = t2;
);

function fin(adv, dt, amp)
instance(t)
global(blepBuffer.addBL, blampBuffer.addBL, blamp, offset)
local(f)
(
  t += adv;
  
  (t > 0.5 && (t-dt) <= .5) ? (
    blepBuffer.addBL((t - adv + dt - 0.5) / dt + .0000000001, 0.375 * amp);
    blampBuffer.addBL((t - adv + dt - 0.5)/dt + 2.14, - 1.06704 * 2.0 * amp * dt);
  );
  
  t > 1.0 ? (
    t -= 1.0;
    // We want to have the subsample offset into the BLEP at the next sampling time.
    // When the advance is smaller than a sample, we need to correct for this.
    blampBuffer.addBL((t - adv + dt + .0000000001) / dt + 2.14, 1.06704 * 2.0 * amp * dt);
  );

  t <= 0.25 ? (
    (4.0 * t - 1.0) + 0.04687518749999994
  ) : ( t <= .5 ) ? (
    (2.5 * t - .625) + 0.04687518749999994
  ) : (
    (3.0 - 4.0 * t) + 0.04687518749999994
  )
);

function saw(adv, dt, amp)
instance(t)
global(blepBuffer.addBL)
local()
(
  t += adv;
  
  t > 1.0 ? (
    t -= 1.0;
    // We want to have the subsample offset into the BLEP at the next sampling time.
    // When the advance is smaller than a sample, we need to correct for this.
    blepBuffer.addBL((t - adv + dt) / dt + .0000000001, -2.0 * amp);
  );

  (2.0 * t - 1.0);
);

function tri(adv, dt, amp)
instance(t)
global(blampBuffer.addBL)
local()
(
  t += adv;
   
  (t > 0.5 && (t-dt) <= .5) ? (
    blampBuffer.addBL((t - adv + dt - 0.5)/dt + 2.14, - 1.06704 * 2.0 * amp * dt);
  );
  
  t > 1.0 ? (
    t -= 1.0;
    // We want to have the subsample offset into the BLEP at the next sampling time.
    // When the advance is smaller than a sample, we need to correct for this.
    blampBuffer.addBL((t - adv + dt) / dt + 2.14, 1.06704 * 2.0 * amp * dt);
  );

  t <= 0.5 ? (
    (4.0 * t - 1.0);
  ) : (
    (3.0 - 4.0 * t);
  );
);

function square(adv, dt, amp)
instance(t, y)
global(blepBuffer.addBL)
local()
(
  t += adv;

  (t > 0.5 && y < 0) ? (
    blepBuffer.addBL((t - adv + dt - 0.500000000)/dt, 2.0 * amp);
  );

  t > 1.0 ? ( 
    t -= 1.0;
    blepBuffer.addBL((t - adv + dt + .0000000001) / dt, -2.0 * amp);
  );
  
  y = (2.0 * (t > 0.5) - 1.0);
);

function pwm(adv, dt, amp)
instance(t, y)
global(blepBuffer.addBL, pwm_switch)
local()
(
  t += adv;

  (t > pwm_switch && y < 0) ? (
    blepBuffer.addBL((t - adv + dt - pwm_switch)/dt, 2.0 * amp);
  );

  t > 1.0 ? ( 
    t -= 1.0;
    blepBuffer.addBL((t - adv + dt + .0000000001) / dt, -2.0 * amp);
  );
  
  y = (2.0 * (t > pwm_switch) - 1.0);
);

function hardsync(master_t, master_dt, slave_dt, osc2_amp)
instance(t, t_next, t_current, type)
local(alpha, temp, switch_point, y_at_sync)
global(blepBuffer.addBL, blampBuffer.addBL)
(
  // Did we go over a sync point?
  master_t > t_current && (master_t - master_dt) < t_current ? (
    // How far did we go over the sync point in terms of subsample fraction?
    alpha = (master_t - t_current) / master_dt;

    // Swap which sync point we are looking for next.
    temp = t_current;
    t_current = t_next;
    t_next = temp;
    
    // Advance the slaved oscillator to the hard_sync point to get the amplitude at that point.
    // It is possible that the oscillator resets and adds a BLEP of its own.
    type == 0 ? ( y_at_sync = this.saw(slave_dt * (1.0 - alpha), slave_dt, osc2_amp) * osc2_amp
    ) : ( type == 1 ) ? ( y_at_sync = this.square(slave_dt * (1.0 - alpha), slave_dt, osc2_amp) * osc2_amp
    ) : ( type == 2 ) ? (
      // Triangle needs some special care
      y_at_sync = this.tri(slave_dt * (1.0 - alpha), slave_dt, osc2_amp) * osc2_amp;
      (t > 0.5) ? (
        blampBuffer.addBL(alpha+2.14, 1.06704 * 2.0 * osc2_amp * slave_dt);
      );
    ) : ( type == 3 ) ? (
      // Fin needs some special care
      y_at_sync = this.fin(slave_dt * (1.0 - alpha), slave_dt, osc2_amp) * osc2_amp;
      
      (t > 0.5) ? (
        // Look at the slopes again. They are not correct atm.
        blampBuffer.addBL(alpha+2.14, 1.06704 * 2.0 * osc2_amp * slave_dt);
      );
    ) : ( type == 4 ) ? (
      y_at_sync = this.pwm(slave_dt * (1.0 - alpha), slave_dt, osc2_amp) * osc2_amp;
    );
    
    // Add a minBLEP for the transition to -1. This is t / slave_dt.
    blepBuffer.addBL(alpha+.0000001, - osc2_amp - y_at_sync);
    
    // Reset the oscillator to t=0 and then advance by the time after the sync.
    // Subsequently rewind the osccilator by a timestep since this timestep will be added next time the
    // oscillator is evaluated.
    // Hence: t = 0 + alpha * slave_dt - slave_dt = (alpha - 1) * slave_dt
    t = (alpha - 1.0) * slave_dt;
  );
);

function evaluate_osc(adv, dt, amp)
instance(type)
global()
local()
(
  type == 0 ? (
    this.saw(adv, dt, amp)
  ) : ( type == 1 ) ? (
    this.square(adv, dt, amp)
  ) : ( type == 2 ) ? (
    this.tri(adv, dt, amp)
  ) : ( type == 3 ) ? (
    this.fin(adv, dt, amp)
  ) : ( type == 4 ) ? (
    this.pwm(adv, dt, amp)
  );
);

function subosc_update_settings(pitch, note_change)
instance(t, dt, target_dt, y_declick, ly, declick)
local(scaling)
global(srate, free_osc)
(
  scaling = 440 / srate;
  target_dt = scaling * 2 ^ (pitch / 12);

  dt == 0 ? (
    dt = target_dt;
  );
  
  !free_osc && note_change ? (
    t = 0;
    y_declick = ly;
    declick = 1;
  );
);

function update_subosc(type)
instance(t, target_dt, y_declick, ly, declick, dt)
local(scaling, y, tc, s2p)
global(srate, free_osc, k_glide)
(
  dt += k_glide * (target_dt - dt);
  t += dt;
  
  type == 0 ? (
    y = sin(2 * $pi * t)
  ) : ( type == 1 ) ? (
    y = tanh(2 * sin(2 * $pi * t)) * .78125
  ) : ( type == 2 ) ? (
    y = tanh(1.5 * sin(2 * $pi * t) + .65) - 0.31489851295307275
  ) : ( type == 3 ) ? (
    tc = t - floor(t);
    y = tc <= 0.5 ? (
      (4.0 * tc - 1.0);
    ) : (
      (3.0 - 4.0 * tc);
    );
  ) : ( type == 4 ) ? (
    s2p = sin(2 * $pi * t);
    y = .5 * (tanh(4 * s2p) * .6 + tanh(1.5 * s2p + .65) - 0.31489851295307275);
  );

  ly = y;
  y = y * (1-declick) + declick*y_declick;
  declick *= .998;
  y
);

// Pulls in k_glide, hard_sync, amp_envelope, pitch_envelope and pitch_env from global namespace
function update_oscs(osc1_amp, osc2_amp)
instance(dt1, dt2, target_dt1, target_dt2,
         osc1, osc2, osc1_vol, osc2_vol, osc2.hardsync, fm_level,
         ly, y_declick, declick)
global(k_glide, hardsync, pitch_envelope, current_pitch_env, cdt, faux_analog, faux_analog2, pitch_bend)
local(osc1_amp, osc2_amp, osc1_dt, osc2_dt, y)
(
  dt1 += k_glide * (target_dt1 - dt1);
  dt2 += k_glide * (target_dt2 - dt2); 
  
  current_pitch_env > 0 ? (
    osc2_dt = dt2 * (1+current_pitch_env*pitch_envelope) * pitch_bend * (1-faux_analog2);
  ) : (
    osc2_dt = dt2 * (1+abs(current_pitch_env)*(1.0-pitch_envelope)) * pitch_bend * (1-faux_analog2);
  );
  
  osc1_dt = dt1 * (1+faux_analog) * pitch_bend;
  y = osc1.evaluate_osc(osc1_dt, osc1_dt, osc1_amp);
  cdt = osc2_dt * (1.0 + fm_level*y);
  y *= osc1_amp;
  hardsync ? osc2.hardsync(osc1.t, dt1, osc2_dt, osc2_amp);
  y += osc2.evaluate_osc(cdt, cdt, osc2_amp) * osc2_amp;
  
  ly = y;
  y = y * (1-declick) + declick*y_declick;
  declick *= .98;
  y
);

function oscs_update_settings(pitch1, pitch2, osc1_shape, osc2_shape, note_change)
instance(target_dt1, target_dt2, dt1, dt2, osc1, osc2, last_type, y_declick, ly, declick)
local(scaling)
global(srate, free_osc)
(
  scaling = 440 / srate;
  target_dt1 = scaling * 2^(pitch1/12);
  target_dt2 = scaling * 2^(pitch2/12);
  
  dt1 == 0 ? (
    dt1 = target_dt1;
    dt2 = target_dt2;
  );
  
  osc1.type = osc1_shape;
  osc2.type = osc2_shape;
  
  !free_osc && note_change ? (
    osc1.t = 0.5;
    osc2.t = 0.5;
    y_declick = ly;
    declick = 1;
  );
  
  (osc1.type != last_type || (!free_osc && note_change)) ? (
    last_type = osc1.type;
    osc1.type < 2 ? ( osc2.init_hardsync(0.5, 0) )  // 0 Saw / 1 Square
    : ( osc1.type == 2 ) ? osc2.init_hardsync(0.25, 0.75) // 2 Triangle
    : ( osc1.type == 3 ) ? osc2.init_hardsync(0.5, 0) // Fin
    : ( osc1.type == 4 ) ? osc2.init_hardsync(0.5, 0) // PWM (overridden in main, CTRL+F for current_pwm_active)
  );
);

// Pulls in k_glide, hard_sync, amp_envelope, pitch_envelope and pitch_env from global namespace
function update_oscs(osc1_amp, osc2_amp)
instance(dt1, dt2, target_dt1, target_dt2,
         osc1, osc2, osc1_vol, osc2_vol, osc2.hardsync, fm_level,
         ly, y_declick, declick)
global(k_glide, hardsync, pitch_envelope, current_pitch_env, cdt, faux_analog, faux_analog2, pitch_bend)
local(osc1_amp, osc2_amp, osc1_dt, osc2_dt, y)
(
  dt1 += k_glide * (target_dt1 - dt1);
  dt2 += k_glide * (target_dt2 - dt2); 
  
  current_pitch_env > 0 ? (
    osc2_dt = dt2 * (1+current_pitch_env*pitch_envelope) * pitch_bend * (1-faux_analog2);
  ) : (
    osc2_dt = dt2 * (1+abs(current_pitch_env)*(1.0-pitch_envelope)) * pitch_bend * (1-faux_analog2);
  );
  
  osc1_dt = dt1 * (1+faux_analog) * pitch_bend;
  y = osc1.evaluate_osc(osc1_dt, osc1_dt, osc1_amp);
  cdt = osc2_dt * (1.0 + fm_level*y);
  y *= osc1_amp;
  hardsync ? osc2.hardsync(osc1.t, dt1, osc2_dt, osc2_amp);
  y += osc2.evaluate_osc(cdt, cdt, osc2_amp) * osc2_amp;
  
  ly = y;
  y = y * (1-declick) + declick*y_declick;
  declick *= .98;
  y
);

function noise_osc_decay_tsynced(decay)
instance()
local()
(
  time_factor = 2302.58509299 / srate; // - ln(0.1) * 1000
  k_decay = time_factor * 0.033 * exp(-4.605170185988092*decay);
);

function noise_osc_decay(decay)
instance(k_decay)
local(time_factor)
(
  // Decay time between 30 and 3000 ms
  // Strange way to write 1 / (3 * 10^(2*env_decay))
  time_factor = 2302.58509299 / srate; // - ln(0.1) * 1000
  k_decay = time_factor * 0.033 * exp(-4.605170185988092*decay);
);

function noise_osc(amp, cutoff, pitch, noise_pitch_track)
instance(t, s, coeff, env, s, v, co, dt)
local(sin_omega, omega)
global(srate)
(
  env = amp;
  co = cutoff;
  dt = noise_pitch_track ? dt = 2*$pi*440*pitch/srate : 2*$pi*540/srate;
  
  omega = 0.5 * $pi * exp( (1-cutoff) * log(20/22050) );
  sin_omega = sin(omega);
  coeff = sin_omega / (sin_omega + cos(omega));
  s = v = 0;
);

function sq(t)
(
  2.0 * (t - floor(t) > .5) - 1.0
);

function update_noise(noise_mode)
instance(t, s, v, coeff, env, k_decay, co, dt)
local(y, N)
global(srate)
(
  t += dt;
  noise_mode == 0 ? ( N = 2.0 * rand() - 1.0;
  ) : ( noise_mode == 1 ) ? ( N = sq(3467*t)*sq(8233*t)*sq(1381*t)*sq(8381*t)*sq(2221*t)*sq(3889*t);
  ) : ( noise_mode == 2 ) ? ( N = .707 * (sq(t) * sq(t*1.4471) * sq(t*1.6170) * sq(t*1.9265) * sq(t*2.5028) * sq(t*2.6637));
  ) : ( noise_mode == 3 ) ? ( N = .16 * (sq(t) + sq(t*1.4471) + sq(t*1.6170) + sq(t*1.9265) + sq(t*2.5028) + sq(t*2.6637));
  ) : ( N = .33 * (sq(t) * sq(t*1.4471) + sq(t*1.6170) * sq(t*1.9265) + sq(t*2.5028) * sq(t*2.6637)) );
  
  v = coeff*(N - s);
  y = v + s;
  s = y + v;
  
  env -= k_decay * env;
  y * env
);
