@init
function updateHintTime(hint)
global(gfx_x, gfx_y, mouse_x, mouse_y)
local()
instance(lx, ly, hintTime, currentHint, delta_time)
(
  ( ( abs(lx - mouse_x) + abs( ly - mouse_y ) ) > 0 ) ? (
    hintTime = 0;
  ) : (      
    (hint != 0) ? (
      currentHint = hint;
      hintTime = hintTime + delta_time;
      hintTime = min(1, hintTime)
    ) : (
      0
    )
  );
  
  lx = mouse_x;
  ly = mouse_y;
);   

function drawHint_draw()
global(scaling, gfx_x, gfx_y, gfx_w, gfx_h, mouse_x, mouse_y, HINT_FONT)
local(w, h, globalTime)
instance(hintTime, currentHint, lastGlobalTime, delta_time)
(
  globalTime = time_precise();
  delta_time = globalTime - lastGlobalTime;
  lastGlobalTime = globalTime;

  ( hintTime > .99 ) ? (
    gfx_setfont(HINT_FONT);
    gfx_measurestr(currentHint,w,h);
    
    gfx_x = mouse_x+15;
    gfx_y = mouse_y+15;
    ( gfx_x > 0.5*gfx_w ) ? gfx_x = mouse_x - w - 8;
    ( gfx_y > 0.5*gfx_h ) ? gfx_y = mouse_y - h - 8;

    gfx_set( 0.05, 0.05, 0.1, .8 );
    gfx_rect(gfx_x-2, gfx_y-2, w+4, h+4);
    gfx_set( .7, .7, .7, 1 );      
    gfx_printf(currentHint);
  );
);

function init_slider(slider_idx, default, minimum, maximum)
instance(m_idx, m_min, m_max, m_default)
global()
local()
(
  m_idx = slider_idx;
  m_default = default;
  m_min = minimum;
  m_max = maximum;
);

function simple_arrow(x1, y1, x2, y2, tip_size, tip_aspect)
local(dx, dy, dr, perp_x, perp_y, len, bx, by, ta)
global()
(
  x1 = floor(x1);
  y1 = floor(y1);
  x2 = floor(x2);
  y2 = floor(y2);
  
  dx = x2 - x1;
  dy = y2 - y1;
  len = sqrt(dx * dx + dy * dy);
  dx /= len;
  dy /= len;
  
  perp_x = - dy;
  perp_y = dx;
  
  bx = x2 - tip_size * dx;
  by = y2 - tip_size * dy;
  
  ta = floor(tip_size * tip_aspect);
  
  gfx_triangle(
    x2, y2,
    floor(bx - perp_x * ta), floor(by - perp_y * ta),
    floor(bx + perp_x * ta), floor(by + perp_y * ta)
  );
  
  gfx_line(x1, y1, x2, y2);
  gfx_line(x1 + perp_x, y1 + perp_y, x2 + perp_x - dx, y2 + perp_y - dy);
  gfx_line(x1 - perp_x, y1 - perp_y, x2 - perp_x - dx, y2 - perp_y - dy);
);

function draw_mono_symbol(x, y, w, h)
local(xc, yc, a1, a2, hh)
global()
(
  a1 = 0.15 * $pi;
  a2 = 0.85 * $pi;
  xc = x + 0.25 * w;
  yc = floor(y + 0.5 * h);
  hh = floor(0.2 * h);
  gfx_rect(x + 0.2 * w, yc - hh, 0.15 * w, 2*hh);
  gfx_triangle(xc, yc, xc + hh, yc + hh, xc + hh, yc - hh);
  gfx_arc(x + 0.25 * w, yc, 0.35 * h, a1, a2);
  gfx_arc(x + 0.25 * w + 1, yc, 0.35 * h, a1, a2);
  
  gfx_arc(x + 0.25 * w + 0.2 * w, yc, 0.35 * h, a1, a2);
  gfx_arc(x + 0.25 * w + 0.2 * w + 1, yc, 0.35 * h, a1, a2);
);

function is_over(x, y, w, h)
local()
global(mouse_x, mouse_y)
instance()
(
  (mouse_x > x) && (mouse_x < (x+w)) && (mouse_y > y) && (mouse_y < (y+h))
);

function draw_rect(x, y, w, h)
local()
global(gfx_a)
(
  gfx_rect(x, y, w, h);
  gfx_a = 1;
  gfx_line(x, y, x + w, y);
  gfx_line(x, y + h, x + w, y + h);
  gfx_line(x, y, x, y + h);
  gfx_line(x + w, y, x + w, y + h);
);

function toggle_button(x, y, w, h, polarity, me, hint)
local(qw, over_me, xc, yc, hh)
instance()
global(last_cap, gfx_a, mouse_cap, mouse_x, mouse_y, hinter.updateHintTime)
(
  over_me = is_over(x, y, w, h);
  colormodel(0);
  
  over_me ? hinter.updateHintTime(hint);
  
  x = floor(x); y = floor(y); w = floor(w); h = floor(h);
  qw = floor(w * 0.25);
  
  gfx_a = 0.1 + 0.25 * (polarity == me) + 0.1 * over_me * sin(5 * time_precise());
  draw_rect(x, y, w, h);
  
  (me == 0) ? (
    simple_arrow(x + qw, y + 0.25 * h, x + qw, y + 0.75 * h, 0.15 * h, 0.8);
    simple_arrow(x + 3 * qw, y + 0.25 * h, x + 3 * qw, y + 0.75 * h, 0.15 * h, 0.8);
  ) : (me == 1) ? (
    simple_arrow(x + qw, y + 0.25 * h, x + qw, y + 0.75 * h, 0.15 * h, 0.8);
    simple_arrow(x + 3 * qw, y + 0.75 * h, x + 3 * qw, y + 0.25 * h, 0.15 * h, 0.8);
  ) : (me == 2) ? (
    simple_arrow(x + qw, y + 0.25 * h, x + qw, y + 0.75 * h, 0.15 * h, 0.8);
    simple_arrow(x + 3 * qw, y + 0.75 * h, x + 3 * qw, y + 0.25 * h, 0.15 * h, 0.8);
    simple_arrow(x + qw + 0.1 * w, y + 0.25 * h, x + 3 * qw - 0.1 * w, y + 0.25 * h, 0.15 * h, 0.8);
    simple_arrow(x + 3 * qw - 0.1 * w, y + 0.75 * h, x + qw + 0.1 * w, y + 0.75 * h, 0.15 * h, 0.8);
  ) : (me == 3) ? (
    draw_mono_symbol(x, y, w, h);
  );
  
  (last_cap == 0 && mouse_cap == 1 && over_me) ? (
    1
  );
);

function simple_control(x, y, w, h, hint)
local(xc, over, dx, multiplier, slider_value)
global(last_x, mouse_x, mouse_y, last_cap, mouse_cap, gfx_a, DBL_CLICK_SPEED, hinter.updateHintTime)
instance(grabbed, m_idx, m_min, m_max, m_default, last_click)
(
  colormodel(0);
  gfx_a = 0.1;
  draw_rect(x, y, w, h);
  slider_value = slider(m_idx);

  over = is_over(x, y, w, h);
  
  (grabbed > 0) ? (
    multiplier = 1;
    multiplier *= (mouse_cap & 4) ? 0.166666666666667 : 1;
    multiplier *= (mouse_cap & 8) ? 0.125 : 1;
  
    dx = multiplier * (m_max - m_min) * (mouse_x - last_x) / w;
    slider_automate(slider(m_idx) = min(m_max, max(m_min, slider_value + dx)));
  ) : (
    over ? (
      hinter.updateHintTime(hint);
      (last_cap == 0 && mouse_cap == 1 && grabbed == 0) ? (
        (time_precise() - last_click) < DBL_CLICK_SPEED ? (
          slider_automate(slider(m_idx) = m_default);
        ) : (
          grabbed = 1;
          slider_automate(slider(m_idx) = m_min + (m_max - m_min) * (mouse_x - x) / w);
        );
        
        last_click = time_precise();
      );
    );
  );

  gfx_a = 0.3;
  gfx_rect(x, y, (slider_value - m_min) / (m_max - m_min) * w, h);
  
  slider_value > m_default ? (
    gfx_set(0, 0, 0, 0.2);
  ) : (
    gfx_a = 0.3;
  );
  xc = x + (m_default - m_min) / (m_max - m_min) * w;
  gfx_rect(xc - 3, y + 1, 3, h - 2);
  
  (mouse_cap == 0) ? (
    grabbed = 0
  );
);

