desc:Phase Mangler
 
slider1:x1=0<0,1,0.000001>-1X
slider2:y1=0<0,1,0.000001>-1Y
slider3:x2=0.1<0,1,0.000001>-2X
slider4:y2=0<0,1,0.000001>-2Y
slider5:x3=0.2<0,1,0.000001>-3X
slider6:y3=0<0,1,0.000001>-3Y
slider7:x4=0.3<0,1,0.000001>-4X
slider8:y4=0<0,1,0.000001>-4Y
slider9:x5=0.4<0,1,0.000001>-5X
slider10:y5=0<0,1,0.000001>-5Y
slider11:x6=0.5<0,1,0.000001>-6X
slider12:y6=0<0,1,0.000001>-6Y
slider13:x7=0.6<0,1,0.000001>-7X
slider14:y7=0<0,1,0.000001>-7Y
slider15:x8=0.7<0,1,0.000001>-8X
slider16:y8=0<0,1,0.000001>-8Y
slider17:x9=0<0,1,0.000001>-9X
slider18:y9=0<0,1,0.000001>-9Y
slider19:x10=0.1<0,1,0.000001>-10X
slider20:y10=0<0,1,0.000001>-10Y
slider21:x11=0.2<0,1,0.000001>-11X
slider22:y11=0<0,1,0.000001>-11Y
slider23:x12=0.3<0,1,0.000001>-12X
slider24:y12=0<0,1,0.000001>-12Y
slider25:x13=0.4<0,1,0.000001>-13X
slider26:y13=0<0,1,0.000001>-13Y
slider27:x14=0.5<0,1,0.000001>-14X
slider28:y14=0<0,1,0.000001>-14Y
slider29:x15=0.6<0,1,0.000001>-15X
slider30:y15=0<0,1,0.000001>-15Y
slider31:x16=0.7<0,1,0.000001>-16X
slider32:y16=0<0,1,0.000001>-16Y
slider33:polarity=0<0,1,{Same,Opposite,Opposite Compensated (not flat but effect disappears when summed to mono)}>Polarity
slider34:compensation=0<0,1,0.0001>Mono compensation
slider35:test_mono=0<0,1,{Off,On}>Test mono
slider64:scale=1<0,20,0.1>scale

import saike_splines.jsfx-inc
import saike_phase_mangler_stft.jsfx-inc
import saike_fft_view.jsfx-inc

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
version = 1;
freemem = 0;
freemem = stft.init_stft_mem(freemem, 5);
freemem = gfx_fft.init_fft_scope_mem(freemem, 5);
freemem = stereo_delay.allocate_stereo_delay_mem(freemem, 32768);
spline.init_spline(freemem, 1);

@slider
spline.read_data();
spline.should_update = 1;

@serialize
file_var(0, version);
file_var(0, spline.n_points);

spline.read_data();
spline.should_update = 1;

@block
stft.block_stft();
pdc_top_ch = 2;
pdc_bot_ch = 0;
pdc_delay = stft.fft_size;

@sample
gfx_fft.process_fft_view(spl0, spl1);
stft.process_stft(spl0, spl1);

(polarity == 2) ? (
  stereo_delay.simple_stereo_delay(spl0, spl1, stft.fft_size);
  
  l_diff = stft.out_left - stereo_delay.l;
  r_diff = stft.out_right - stereo_delay.r;
  
  spl0 = stft.out_left - compensation * r_diff;
  spl1 = stft.out_right - compensation * l_diff;
) : (
  spl0 = stft.out_left;
  spl1 = stft.out_right;
);

test_mono ? (
  spl0 = spl1 = (spl0 + spl1) / 2
);

@gfx
//!loaded ? (
//  loaded = gfx_loadimg(5, "./saike_phase_gui/mid7.png");
//  img_scale = 2;
//  loaded = gfx_loadimg(5, "./saike_phase_gui/mid1.png");
//  scale = 2;
//  loaded = gfx_loadimg(5, "./saike_phase_gui/mid18.png");
//  scale = 0.5;
//);
//gfx_x = 0;
//gfx_y = 0;
//gfx_a = 1.0;
//gfx_blit(5, img_scale, 0);

floor_db = -84 + 12;
ceil_db = 0;
db_step_size = 6;

xmin = 0.1 * gfx_w;
ymin = 0.3 * gfx_h;
width = 0.8 * gfx_w;
height = 0.4 * gfx_h;
gfx_set(0.00, 0.00, 0.00, 0.8);
gfx_rect(xmin, ymin - 0.1 * height, width, 1.2 * height);


gfx_fft.block_fft_view();
gfx_fft.render_fft(xmin, ymin, width, height, floor_db, ceil_db, db_step_size, 20, srate / 2, 0.9, 0.6);

function draw_phase_grid(x, y, w, h)
(
  colormodel(0.7);
  gfx_line(x, y + 0.5 * h, x + w, y + 0.5 * h);
  gfx_line(x, y + 0.5 * h + 1, x + w, y + 0.5 * h + 1);
  colormodel(0.7);
  gfx_line(x, y + 1.5 * h, x + w, y + 1.5 * h);
  gfx_line(x, y + 1.5 * h + 1, x + w, y + 1.5 * h + 1);
  
  colormodel(0.7); gfx_a = 0.5;
  gfx_line(x, y + 1.25 * h, x + w, y + 1.25 * h);
  gfx_line(x, y + 1.25 * h + 1, x + w, y + 1.25 * h + 1);
  colormodel(0.7); gfx_a = 0.5;
  gfx_line(x, y + 0.75 * h, x + w, y + 0.75 * h);
  gfx_line(x, y + 0.75 * h + 1, x + w, y + 0.75 * h + 1);
);

gfx_set(1, 1, 1, 1);
draw_phase_grid(xmin, ymin - height / 2, width, height);
spline.draw(xmin, ymin - height / 2, width, height);


/*
// Debug stuff
gfx_set(1, 1, 1, 1);
gfx_x = 0;
gfx_y = 0;
i = 0;
loop(512,
  gfx_circle(i, 0.5 * gfx_h + 0.25 * gfx_h * stft.phase_left[i], 2);
  i += 1;
);
*/
