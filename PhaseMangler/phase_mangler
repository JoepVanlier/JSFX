desc:new effect

slider1:x1=0<0,1,0.000001>-1X
slider2:y1=0<0,1,0.000001>-1Y
slider3:x2=0.1<0,1,0.000001>-2X
slider4:y2=0<0,1,0.000001>-2Y
slider5:x3=0.2<0,1,0.000001>-3X
slider6:y3=0<0,1,0.000001>-3Y
slider7:x4=0.3<0,1,0.000001>-4X
slider8:y4=0<0,1,0.000001>-4Y
slider9:x5=0.4<0,1,0.000001>-5X
slider10:y5=0<0,1,0.000001>-5Y
slider11:x6=0.5<0,1,0.000001>-6X
slider12:y6=0<0,1,0.000001>-6Y
slider13:x7=0.6<0,1,0.000001>-7X
slider14:y7=0<0,1,0.000001>-7Y
slider15:x8=0.7<0,1,0.000001>-8X
slider16:y8=0<0,1,0.000001>-8Y


//slider1:gain_db=0<-150,12,1>gain (dB)

import saike_splines.jsfx-inc
import saike_phase_mangler_stft.jsfx-inc
import saike_fft_view.jsfx-inc

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = stft.init_stft_mem(freemem, 5);
freemem = gfx_fft.init_fft_scope_mem(freemem, 5);
spline.init_spline(freemem, 6);
spline.set_slider_loc(1, 8);

@slider
spline.read_data();
spline.should_update = 1;

@block
stft.block_stft();
pdc_top_ch = 2;
pdc_bot_ch = 0;
pdc_delay = stft.fft_size;

@sample
gfx_fft.process_fft_view(spl0, spl1);
stft.process_stft(spl0, spl1);
spl0 = stft.out_left;
spl1 = stft.out_right;

@gfx
gfx_set(0, 0, 0, 1);
gfx_rect(0, 0, gfx_w, gfx_h);

gfx_fft.block_fft_view();
gfx_fft.render_fft(0.1 * gfx_w, 0.1 * gfx_h, 0.8 * gfx_w, 0.8 * gfx_h);

gfx_set(1, 1, 1, 1);
spline.draw(0.1 * gfx_w, 0.1 * gfx_h, 0.8 * gfx_w, 0.8 * gfx_h);


/*
// Debug stuff
gfx_set(1, 1, 1, 1);
gfx_x = 0;
gfx_y = 0;
i = 0;
loop(512,
  gfx_circle(i, 0.5 * gfx_h + 0.25 * gfx_h * stft.phase_left[i], 2);
  i += 1;
);
*/
