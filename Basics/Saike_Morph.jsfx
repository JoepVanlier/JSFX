desc:Saike Morphing Filter
tags: filter non-linear
version: 0.18
author: Joep Vanlier
changelog: Workaround tan(pi/2) perf issue on SSE JSFX branch.
license: MIT

Attribution: Moog filter implementation was based on the paper:
S. D'Angelo and V. Vaelimaeki, "Generalized Moog Ladder Filter: Part II - Explicit Non linear Model through a Novel Delay-Free
Loop Implementation Method". IEEE Trans. Audio,Speech, and Lang. Process., vol. 22, no. 12, pp. 1873-1883, December 2014.

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

slider1:0<-6,48,1>Drive (dB)
slider2:0<-6,48,1>Post Boost (dB)
slider12:filter_type=1<0,4,1{Linear,MS-20,Linear x2,Moog,Ladder}>Filter type
slider13:.6<0,1,.0001>Cutoff
slider14:0.7<0,1,.0001>Resonance
slider15:morph=0<0,1,.0001>Morph

slider17:m_lfo_amnt=0<0,1,.00001>Morph LFO amount
slider18:m_lfo_speed=0<0,60,.001>Morph LFO speed [Hz]
slider19:m_lfo_phase=0<0,30,.001>Morph LFO phase [radian]
slider20:c_lfo_amnt=0<0,1,.00001>Cutoff LFO amount
slider21:c_lfo_speed=0<0,36,.001>Cutoff LFO speed [Hz]
slider22:c_lfo_phase=0<0,36,.001>Cutoff LFO phase [radian]

slider6:inertia=60<0,200,.001>Inertia [ms]
slider60:oversampling=1<1,8,1>Oversampling

@init
  // MS-20 Simulation settings
  epsilon = 0.00000000001;
  epsilon = 0.00000001;
  maxiter = 6;
  safety_limit_ms20 = 0.935;
  safety_limit_moog = 0.25; // Above this level the model suffers from numerical difficulties. Ensures fc < fs/8.

  m_lfo_time = 0;
  c_lfo_time = 0;

function init_linearSVF(freq, res)
  global(oversampling)
  local(omega, ct, st, div)
  instance(f0, ic1eq, ic2eq, k, a1, a2, a3)
  (
    f0 = exp( (1-freq) * log(20/22050) ) / oversampling;
    omega = .5 * $pi * f0;
    k = 2 - 2*res;
    
    ct = cos(omega);
    st = sin(omega);
    div = 1.0 / (1.0 + k * st * ct);
    a1 = ct * ct * div;
    a2 = st * ct * div;
    a3 = st * st * div;
  ); 

function reset_linearSVF()
  global()
  local()
  instance(ic1eq, ic2eq, k, a1, a2, a3)
  (
    ic1eq = ic2eq = 0;  
  );
  
function eval_linearSVF_LP(v0)
  global()
  local(v1, v2, v3)
  instance(ic1eq, ic2eq, k, a1, a2, a3)
  (
    v3 = v0 - ic2eq;
    v1 = a1 * ic1eq + a2 * v3;
    v2 = ic2eq + a2 * ic1eq + a3*v3;
    ic1eq = 2*v1 - ic1eq;
    ic2eq = 2*v2 - ic2eq;    
    
    v2
  );  
  
function eval_linearSVF_BP(v0)
  global()
  local(v1, v2, v3)
  instance(ic1eq, ic2eq, k, a1, a2, a3)
  (
    v3 = v0 - ic2eq;
    v1 = a1 * ic1eq + a2 * v3;
    v2 = ic2eq + a2 * ic1eq + a3*v3;
    ic1eq = 2*v1 - ic1eq;
    ic2eq = 2*v2 - ic2eq;    
    
    v1
  );  
  
function eval_linearSVF_HP(v0)
  global()
  local(v1, v2, v3)
  instance(ic1eq, ic2eq, k, a1, a2, a3)
  (
    v3 = v0 - ic2eq;
    v1 = a1 * ic1eq + a2 * v3;
    v2 = ic2eq + a2 * ic1eq + a3*v3;
    ic1eq = 2*v1 - ic1eq;
    ic2eq = 2*v2 - ic2eq;    
    
    v0 - k*v1 - v2
  );  
  
function eval_linearSVF_BR(v0)
  global()
  local(v1, v2, v3)
  instance(ic1eq, ic2eq, k, a1, a2, a3)
  (
    v3 = v0 - ic2eq;
    v1 = a1 * ic1eq + a2 * v3;
    v2 = ic2eq + a2 * ic1eq + a3*v3;
    ic1eq = 2*v1 - ic1eq;
    ic2eq = 2*v2 - ic2eq;    
    
    v0 - v1
  );

  function expensive_tanh(x)
  local(em2x) 
  global()
  (
    x = x;
    em2x = exp(-2*x);
    (2/(1+em2x))-1
  );
  
  // Approximate, but good enough for most things
  function tanh(s)
  local(s2, a, b, c)
  global()
  (
    s2 = s * s;
    a = s * (135135.0 + s2 * (17325.0 + s2 * (378.0 + s2)));
    b = 135135.0 + s2 * (62370.0 + s2 * (3150.0 + s2 * 28.0));
    c = a / b;
    (c < -1) ? c = -1 : (c > 1) ? c = 1 : c;
  );
  
  
  function init_moog2(cutoff, resonance)
  local(fs, fc, g, p0s, nmp, gN, kgN, p0g, tmp, acc)
  global(srate, oversampling)
  instance(VT2, rg1, rg2, qg1, qg2, si1, sf1, sg1, si2, sf2, sg2, k0g, k0s, VT2i, q0s, r1s, k)
  (
    k    = resonance*120;

    fs   = srate * oversampling;
    fc   = .5 * srate * exp( (1-cutoff) * log(20/22050) );    
    g    = tan($pi / fs * fc) / sqrt(1 + k);
    
    VT2  = 0.052;
    VT2i = 19.23076923076923;
  
    // Ladder stages
    p0s = 1.0 / (1.0 + g);
    q0s = 1.0 - g;
    r1s = -g;
    k0s = VT2 * g * p0s;
  
    // Global filter
    nmp = (1.0 - p0s);
    gN  = nmp ^ 2;
    kgN = k * gN;
    p0g = 1.0 / (1.0 + kgN);
    k0g = -VT2i * p0g;
  
    rg1 = -2.0*kgN;
    rg2 = -1.0*kgN;
    acc = tmp = p0s*(g - 1.0);
    qg1 = -2.0*(kgN + acc);
    acc = acc*tmp;
    qg2 = -1.0*(kgN + acc);
  );
  
  function eval_moog2(x)
  local(yi, yd, yf)
  global()
  instance(yo, y, A, B, rg1, rg2, qg1, qg2, si1, sf1, sg1, si2, sf2, sg2, k0g, k0s, VT2i, q0s, r1s, k)
  (
    yo = tanh(k0g * (x + sg1));
    A    = yo;
  
    yi   = yo;
    yd   = k0s * (yi + sf1);
    y    = yd + si1;
    yo   = tanh(VT2i * y);
    B    = yo;
  
    si1 = yd + y;
    sf1 = r1s * yi - q0s * yo;
  
    yi   = yo;
    yd   = k0s * (yi + sf2);
    y    = yd + si2;
    yo   = tanh(VT2i * y);
  
    si2 = yd + y;
    sf2 = r1s * yi - q0s * yo;
  
    yf = k * y;
  
    sg1 = rg1 * x + qg1 * yf + sg2;
    sg2 = rg2 * x + qg2 * yf;
  );  
  
  function mix_moog2(x, choice, frac)
  local()
  global()
  instance(VT, VT2, VT2i, A, B, y, yo, k, f1, f2)
  (
    this.eval_moog2(x*VT2);
    
    (choice == 0) ? (
      f1 = y * (1 + k); // LP
      f2 = VT2 * (2*B - 2*yo)*8; // BP
    ) : (choice == 1) ? (
      f1 = VT2 * (2*B - 2*yo)*8; // BP
      f2 = VT2 * (A - B); // HP
    ) : (choice == 2) ? (
      frac = frac * frac;
      frac = frac * frac;
      f1 = VT2 * (A - B); // HP
      f2 = -VT2 * (2*B-2*yo-A); // BR
    ) : (choice == 3) ? (
      f1 = -VT2 * (2*B-2*yo-A); // BR
      f2 = y * (1 + k); // LP
    );
    
    (f2 * frac + f1 * (1.0-frac))*VT2i;
  );
  
  function init_moog(cutoff, resonance)
  local(fs, fc, g, p0s, nmp, gN, kgN, p0g, tmp, acc)
  global(srate, oversampling)
  instance(VT2, rg1, rg2, rg3, rg4, qg1, qg2, qg3, qg4, si1, sf1, sg1, si2, sf2, sg2, si3, sf3, sg3, si4, sf4, sg4, k0g, k0s, VT2i, q0s, r1s, k)
  (
    k    = resonance* 3.9999999999999987;
    fc   = .5 * srate * exp( (1-cutoff) * log(20/22050) );
    fs   = srate * oversampling;
    g    = tan($pi * fc / fs) / sqrt(1.0 + sqrt(k) - 2 * pow(k, 0.25) * 0.7071067811865476);
    VT2  = 0.052;
    VT2i = 19.23076923076923;
  
    // Ladder stages
    p0s = 1.0 / (1.0 + g);
    q0s = 1.0 - g;
    r1s = -g;
    k0s = VT2 * g * p0s;
  
    // Global filter
    nmp = (1.0 - p0s);
    gN  = nmp * nmp * nmp * nmp;
    kgN = k * gN;
    p0g = 1.0 / (1.0 + kgN);
    k0g = -VT2i * p0g;
    
    rg1 = -4.0*kgN;
    rg2 = -6.0*kgN;
    rg3 = -4.0*kgN;
    rg4 = -1.0*kgN;
    acc = tmp = p0s*(g - 1.0);
    qg1 = -4.0*(kgN + acc);
    acc = acc*tmp;
    qg2 = -6.0*(kgN + acc);
    acc = acc*tmp;
    qg3 = -4.0*(kgN + acc);
    acc = acc*tmp;
    qg4 = -1.0*(kgN + acc);
  );
  
  function eval_moog(x)
  local(yi, yd, yf)
  global()
  instance(rg1, rg2, rg3, rg4, qg1, qg2, qg3, qg4, si1, sf1, sg1, si2, sf2, sg2, si3, sf3, sg3, si4, sf4, sg4, k0g, k0s, VT2i, q0s, r1s, k,
           A, B, C, D, y, yo)
  (
    yo = tanh(k0g * (x + sg1));
    A = yo;
  
    yi   = yo;
    yd   = k0s * (yi + sf1);
    y    = yd + si1;
    yo   = tanh(VT2i * y);
    B = yo;
  
    si1 = yd + y;
    sf1 = r1s * yi - q0s * yo;
  
    yi   = yo;
    yd   = k0s * (yi + sf2);
    y    = yd + si2;
    yo   = tanh(VT2i * y);
    C = yo;
  
    si2 = yd + y;
    sf2 = r1s * yi - q0s * yo;
  
    yi   = yo;
    yd   = k0s * (yi + sf3);
    y    = yd + si3;
    yo   = tanh(VT2i * y);
    D = yo;
  
    si3 = yd + y;
    sf3 = r1s * yi - q0s * yo;
  
    yi   = yo;
    yd   = k0s * (yi + sf4);
    y    = yd + si4;
    yo   = tanh(VT2i * y);
  
    si4 = yd + y;
    sf4 = r1s * yi - q0s * yo;
    yf = k * y;
  
    sg1 = rg1 * x + qg1 * yf + sg2;
    sg2 = rg2 * x + qg2 * yf + sg3;
    sg3 = rg3 * x + qg3 * yf + sg4;
    sg4 = rg4 * x + qg4 * yf;
  );
  
  function mix_moog(x, choice, frac)
  local()
  global()
  instance(VT, VT2, VT2i, A, B, C, D, y, yo, k, f1, f2)
  (
    this.eval_moog(x*VT2);
    
    (choice == 0) ? (
      f1 = y * (1 + k); // LP
      f2 = VT2 * (2*C - 2*B); // BP
    ) : (choice == 1) ? (
      f1 = VT2 * (2*C - 2*B); // BP
      //f1 = VT2 * (4*C - 8*B + 4*yo)/6; // BP
      f2 = VT2 * (A - 4 * B + 6 * C - 4 * D + yo); // HP
    ) : (choice == 2) ? (
      frac = frac * frac; /* Make sure the HP gets some space */
      frac = frac * frac;
      f1 = VT2 * (A - 4 * B + 6 * C - 4 * D + yo); // HP
      f2 = VT2 * (A - 4 * B + 6 * C - 4 * D); // Notch
    ) : (choice == 3) ? (
      f1 = VT2 * (A - 4 * B + 6 * C - 4 * D); // Notch
      f2 = y * (1 + k); // LP
    );
    
    (f2 * frac + f1 * (1.0-frac))*VT2i
  );  
  
  function f_g(s)
  local()
  global()
  instance()
  (
    max(-1,min(1,s))
  );
  
  function f_dg(s)
  local()
  global()
  instance()
  (
    1 - 1 * (abs(s)>1)
  );
  
 function smooth_parameter(target)
  instance(s, coeff)
  global()
  local(y, v)
  (
    v = coeff*(target - s);
    y = v + s;
    s = y + v;
    y
  );
  
  function initialize_smoother(cutoff)
  instance(coeff)
  global(srate)
  local(g)
  ( 
    g = tan($pi*cutoff/srate);
    coeff = g/(1+g);  
  );

  function interpolator_init(slider_idx)
  instance(next_val, idx)
  local()
  global()
  (
    next_val = slider(slider_idx);
    idx = slider_idx;
  );

  function interpolator_block()
  instance(delta, next_changepoint_t, next_val, idx)
  local(next_changepoint_y)
  global(samplesblock)
  (
    next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
    next_changepoint_t > 0 ? 
    (
      next_val = slider(idx);
    ) : (
      next_changepoint_y = slider(idx);
      next_changepoint_t = samplesblock;
    );
    
    delta = (next_changepoint_y - next_val) / next_changepoint_t;
  );
  
  function interpolate()
  instance(delta, next_changepoint_t, next_val, idx, coeff)
  local(current_value, next_changepoint_y)
  global(current_sample)
  (
    current_value = next_val;
    current_sample == next_changepoint_t ? 
    (
      delta = 0;
      next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
      delta = next_changepoint_t > current_sample ? (next_changepoint_y - current_value) / (next_changepoint_t-current_sample) : 0;
    );
    
    next_val = current_value + delta;
    
    coeff > 0 ? this.smooth_parameter(current_value) : current_value
  );
  
  function initialize_interpolators()
  (
    cutoff_interpolator.interpolator_init(13);
    reso_interpolator.interpolator_init(14);
    morph_interpolator.interpolator_init(15);
    drive_interpolator.interpolator_init(1);
    gain_interpolator.interpolator_init(2);
    morph_phase_interpolator.interpolator_init(19);
    cutoff_phase_interpolator.interpolator_init(22);
    
    (last_inertia != inertia) ? (
      last_inertia = inertia;
      inertia_cutoff = 1000.0/inertia;
      cutoff_interpolator.initialize_smoother(inertia_cutoff);
      reso_interpolator.initialize_smoother(inertia_cutoff);
      morph_interpolator.initialize_smoother(inertia_cutoff);
      drive_interpolator.initialize_smoother(inertia_cutoff);
      gain_interpolator.initialize_smoother(inertia_cutoff);
      morph_phase_interpolator.initialize_smoother(inertia_cutoff);
      cutoff_phase_interpolator.initialize_smoother(inertia_cutoff);
      cutoff_interpolator.s = slider(13);
      reso_interpolator.s = slider(14);
      morph_interpolator.s = slider(15);
      morph_phase_interpolator.s = slider(19);
      cutoff_phase_interpolator.s = slider(22);
      change += 1;
    );
  );
  
  initialize_interpolators();

  function init_MS20(freq, reso)
    global(oversampling, srate)
    local(f0)
    instance(y1, y2, d1, d2, h, hh, k)
    (
      f0 = exp( (1-freq) * log(20/22050) ) * $pi / oversampling;
      h = tan(f0 / (2.1 * oversampling)) * 2.1 * oversampling;
      hh = 0.5 * h;
      k  = 2*reso;
    );

  function eval_MS20_nonlin_tanh(x)
    global(epsilon, maxiter)
    local(iter, res, gd2k, ky2, gky2, dgky2,
          f1, f2, a, b, c, d, norm, sig1, thsig1, thsig1sq, sig2, thsig2, thsig2sq, tanhterm1, tanhterm2, hhthsig1sqm1, hhthsig2sqm1 )
    instance(i, y1, y2, d1, d2, h, hh, k, obs)
    (
      gd2k = f_g(d2*k);
      tanhterm1 = tanh(-d1 + x - gd2k);
      tanhterm2 = tanh(d1 - d2 + gd2k);
      
      iter = 0;
      while(
        iter += 1;
        ky2 = k*y2;
        gky2 = f_g(ky2);
        dgky2 = f_dg(ky2);
      
        sig1 = x - y1 - gky2;
        thsig1 = tanh(sig1);
        thsig1sq = thsig1 * thsig1;
      
        sig2 = y1 - y2 + gky2;
        thsig2 = tanh(sig2);
        thsig2sq = thsig2 * thsig2;
        hhthsig1sqm1 = hh*(thsig1sq - 1);
        hhthsig2sqm1 = hh*(thsig2sq - 1);
      
        f1 = y1 - d1 - hh*(tanhterm1 + thsig1);
        f2 = y2 - d2 - hh*(tanhterm2 + thsig2);
        res = abs(f1) + abs(f2);
        
        a = -hhthsig1sqm1 + 1;
        b = -k*hhthsig1sqm1*dgky2;
        c = hhthsig2sqm1;
        d = (k*dgky2 - 1)*hhthsig2sqm1 + 1;
        
        norm = 1 / ( a*d - b*c );
        y1 = y1 - ( d*f1 - b*f2 ) * norm;
        y2 = y2 - ( a*f2 - c*f1 ) * norm;
      (res > epsilon) && (iter < maxiter);
      );
      
      d1 = y1;
      d2 = y2;
    ); 


  function eval_MS20_nonlinBP_tanh(x)
    global(epsilon, maxiter)
    local(iter, res, gd2k, ky2, gky2, dgky2,
          f1, f2, a, b, c, d, norm, sig1, thsig1, thsig1sq, sig2, thsig2, thsig2sq, tanhterm1, tanhterm2, hhthsig1sqm1, hhthsig2sqm1 )
    instance(i, y1, y2, d1, d2, h, hh, k, obs)
    (
      gd2k = f_g(d2*k);
      tanhterm1 = tanh(-d1 - x - gd2k);
      tanhterm2 = tanh(d1 - d2 + x + gd2k);
      
      iter = 0;
      while(
        iter += 1;
        ky2 = k*y2;
        gky2 = f_g(ky2);
        dgky2 = f_dg(ky2);
      
        sig1 = -x - y1 - gky2;
        thsig1 = tanh(sig1);
        thsig1sq = thsig1 * thsig1;
      
        sig2 = x + y1 - y2 + gky2;
        thsig2 = tanh(sig2);
        thsig2sq = thsig2 * thsig2;
      
        hhthsig1sqm1 = hh*(thsig1sq - 1);
        hhthsig2sqm1 = hh*(thsig2sq - 1);
      
        f1 = y1 - d1 - hh*(tanhterm1 + thsig1);
        f2 = y2 - d2 - hh*(tanhterm2 + thsig2);
        res = abs(f1) + abs(f2);
        
        a = 1 - hhthsig1sqm1;
        b = -k*hhthsig1sqm1*dgky2;
        c = hhthsig2sqm1;
        d = (k*dgky2 - 1)*hhthsig2sqm1 + 1;
      
        norm = 1 / ( a*d - b*c );
        y1 = y1 - ( d*f1 - b*f2 ) * norm;
        y2 = y2 - ( a*f2 - c*f1 ) * norm;
      (res > epsilon) && (iter < maxiter);
      );
      
      d1 = y1;
      d2 = y2;
    );
    
  function eval_MS20_nonlinBR_tanh(x)
    global(epsilon, maxiter)
    local(iter, res, gd2k, ky2, gky2, dgky2,
          f1, f2, a, b, c, d, norm, sig1, thsig1, thsig1sq, sig2, thsig2, thsig2sq, tanhterm1, tanhterm2, hhthsig1sqm1, hhthsig2sqm1 )
    instance(i, y1, y2, d1, d2, h, hh, k, obs)
    (
      gd2k = f_g(d2*k);
      tanhterm1 = tanh(-d1 - x - gd2k);
      tanhterm2 = tanh(d1 - d2 + x + gd2k);
      
      iter = 0;
      while(
        iter += 1;
        ky2 = k*y2;
        gky2 = f_g(ky2);
        dgky2 = f_dg(ky2);
      
        sig1 = -x - y1 - gky2;
        thsig1 = tanh(sig1);
        thsig1sq = thsig1 * thsig1;
      
        sig2 = x + y1 - y2 + gky2;
        thsig2 = tanh(sig2);
        thsig2sq = thsig2 * thsig2;
      
        hhthsig1sqm1 = hh*(thsig1sq - 1);
        hhthsig2sqm1 = hh*(thsig2sq - 1);
      
        f1 = y1 - d1 - hh*(tanhterm1 + thsig1);
        f2 = y2 - d2 - hh*(tanhterm2 + thsig2);
        res = abs(f1) + abs(f2);
        
        a = 1 - hhthsig1sqm1;
        b = -k*hhthsig1sqm1*dgky2;
        c = hhthsig2sqm1;
        d = (k*dgky2 - 1)*hhthsig2sqm1 + 1;
      
        norm = 1 / ( a*d - b*c );
        y1 = y1 - ( d*f1 - b*f2 ) * norm;
        y2 = y2 - ( a*f2 - c*f1 ) * norm;
      (res > epsilon) && (iter < maxiter);
      );
      
      d1 = y1;
      d2 = y2;
      x - y2;
    );     
    
    function eval_MS20_nonlinHP_tanh(x)
      global(epsilon, maxiter)
      local(iter, res, gkd2px, kxpy2, gkxpy2, dgky2px,
            f1, f2, a, b, c, d, norm, sig1, thsig1, thsig1sq, sig2, thsig2, thsig2sq, tanhterm1, tanhterm2, hhthsig1sqm1, hhthsig2sqm1 )
      instance(i, y1, y2, d1, d2, h, hh, k, obs)
      (
        gkd2px = f_g(k*(d2 + x));
        tanhterm1 = tanh(-d1 - gkd2px);
        tanhterm2 = tanh(d1 - d2 - x + gkd2px);
        
        iter = 0;
        while(
          iter += 1;
          kxpy2 = k*(x + y2);
          gkxpy2 = f_g(kxpy2);
          dgky2px = f_dg(kxpy2);
        
          sig1 = -y1 - gkxpy2;
          thsig1 = tanh(sig1);
          thsig2sq = thsig2 * thsig2;
        
          sig2 = -x + y1 - y2 + gkxpy2;
          thsig2 = tanh(sig2);
          thsig2sq = thsig2 * thsig2;
        
          hhthsig1sqm1 = (thsig1sq - 1);
          hhthsig2sqm1 = (thsig2sq - 1);
        
          f1 = y1 - d1 - hh*(tanhterm1 + thsig1);
          f2 = y2 - d2 - hh*(tanhterm2 + thsig2);
          res = abs(f1) + abs(f2);
          
          a = -hhthsig1sqm1 + 1;
          b = -k*hhthsig1sqm1*dgky2px;
          c = hhthsig2sqm1;
          d = (k*dgky2px - 1)*hhthsig2sqm1 + 1;
          
          norm = 1 / ( a*d - b*c );
          y1 = y1 - ( d*f1 - b*f2 ) * norm;
          y2 = y2 - ( a*f2 - c*f1 ) * norm;
        (res > epsilon) && (iter < maxiter);
        );
          
        d1 = y1;
        d2 = y2;
        
        y2 + x
      ); 

  // UP / DOWNSAMPLING
  // Generate windowed sinc filter at memory location FIR
  // Inputs are:
  //    fir   - Memory location to store windowed sinc
  //    nt    - Number of taps
  //    bw    - Fractional bandwidth
  //     g    - Gain
  function sinc(fir, nt, bw, g)
    local(a, ys, yg, yw, i, pibw2, pifc2, pidnt2, hnt)
    global()
    (
      pibw2   = 2.0*$pi*bw;
      pidnt2  = 2.0*$pi/nt;
      hnt     = 0.5*nt;
      i       = 1;
          
      loop(nt-1,
        // Sinc width
        a  = (i - hnt) * pibw2;
          
        // Sinc
        ys = (a != 0) ? sin(a)/a : 1.0;
   
        // Window gain
        yg = g * (4.0 * bw);
          
        // Hamming window (could be replaced with Kaiser in the future)
        yw = 0.54 - 0.46 * cos(i * pidnt2);
           
        // Calc FIR coeffs
        fir[i-1] = yw * yg * ys;
        
        i += 1;
      );
    );
  
  // Generate sinc filters for a specific upsampling ratio
  //
  // Upsampling leads to a sample followed by N-1 zeroes. Hence 
  // to compute each subsample, we only need 1/Nth of the taps.
  // This is why we set up a specific filter for each subsample.
  // i.e. for N=4, you get something like f1*Zn + f5*Zn-1 + ...
  //
  // Inputs:
  //    N_in            - oversampling factor
  //    tapsPerFilter   - Taps per subfilter (should be 8 in this implementation)
  //    targetmem       - Location to store the coefficients
  //    tmp             - Working memory
  function updateSincFilter(N_in, tapsPerFilter, targetmem, tmp)
    local(nHist, iFilt, nTaps)
    instance(h0, h1, h2, h3, h4, h5, h6, coeffs, loc, N, delta)
    global()
    (
      N       = N_in;
      nHist   = tapsPerFilter;
      loc     = 0;
      coeffs  = targetmem;
      nTaps   = N*nHist;
      
      // Memory being set is conservatively large.
      memset(coeffs,0,10000);
      memset(tmp,0,10000);
      
      sinc(tmp, nTaps, .5/N, .5*N);
      
      // Divide sinc over the different filters
      iFilt = 0; // Filter idx for which subsample this filter is
      delta = 0; // Sample idx
      loop(nTaps,
        coeffs[delta + iFilt*100] = tmp[];
        iFilt += 1;
        iFilt == N ? ( iFilt = 0; delta += 1 );
        tmp += 1;
      );
    );
  
  // Generate downsample filter
  // Here, the full N*nHist tap filter has to be evaluated for every sample, 
  // but only every Nth sample has to be evaluated.
  function updateSincDownsampleFilter(N_in, nTaps_in, histmem, coeffmem)
    global()
    instance(hist, hend, hptr, coeffs, loc, N, delta, nTaps)
    local()
    (
      N       = N_in;
      hist    = histmem;
      coeffs  = coeffmem;
      nTaps   = nTaps_in;
      hptr    = hist;
      hend    = hist + nTaps;
      
      memset(coeffs,0,10000);
      sinc(coeffs, nTaps, .5/N, .5);
    );
    
  function advanceHist(sample)
    global()
    instance(hist, hptr, hend, coeffs, loc, N, delta, nTaps)
    local(nHist, nTaps)
    (
      hptr += 1;
      ( hptr == hend ) ? hptr = hist;
      hptr[] = sample;
    );
  
  function sincDownSample()
    global()
    instance(hist, hptr, hend, coeffs, loc, N, delta, nTaps)
    local(nHist, hm1, hptr2, out, cfptr)
    (
      hm1   = hist-1;
      hptr2 = hptr;
      cfptr = coeffs;
      out   = 0;
      
      loop(nTaps,
        out = out + hptr2[] * cfptr[];
        
        cfptr += 1;
        hptr2 -= 1;
        ( hptr2 == hm1 ) ? hptr2 = hend-1;
      );
      
      out
    );
  
  function resetSincDown()
    global()
    instance(hist, hptr, hend, coeffs, loc, N, delta, nTaps)
    local(nHist, hm1, hptr2)
    (
      hm1   = hist-1;
      hptr2 = hptr;
      
      loop(nTaps,
        hptr2[] = 0;
        
        hptr2 -= 1;
        ( hptr2 == hm1 ) ? hptr2 = hend-1;
      );
    );
  
  // Maintain input sample history. Hardcoded for speed.
  // Note h7 is omitted because for integer upsampling it is always zero!
  function advanceSinc(sample)
    instance(h0, h1, h2, h3, h4, h5, h6, coeffs, loc, N)
    global()
    local(filt)
    (
      h6 = h5;
      h5 = h4;
      h4 = h3;
      h3 = h2;
      h2 = h1;
      h1 = h0;
      h0 = sample;
      loc = 0;
    );
  
  function resetSincUp()
    instance(h0, h1, h2, h3, h4, h5, h6, coeffs, loc, N)
    global()
    local(filt)
    (
      h0 = h1 = h2 = h3 = h4 = h5 = h6 = 0;
    );
  
  // Note h7 is omitted because for integer upsampling it is always zero!
  function getSubSample()
    instance(h0, h1, h2, h3, h4, h5, h6, coeffs, loc, N)
    global()
    local(filt, out)
    (
      filt = coeffs + loc;
      out =  filt[] * h0 + filt[1] * h1 + filt[2] * h2 + filt[3] * h3 + filt[4] * h4 + filt[5] * h5 + filt[6] * h6;
  
      loc += 100;
      out
    );

  function inputFilter(sample)
    instance(len, d1, d2, d3, d4, o1, o2, o3, o4, a1, a2, b0, b1, b2)
    local (out)
    global ()
    (
      out  = sample*b0 + d1*b1 + d2*b2 - d3*a1 - d4*a2;
      d2   = d1;
      d1   = sample;
      d4   = d3;
      d3   = out;
    );
  
  function outputFilter(sample)
    instance(len, d1, d2, d3, d4, o1, o2, o3, o4, a1, a2, b0, b1, b2)
    local (out)
    global ()
    (
      out = sample*b0 + o1*b1 + o2*b2 - o3*a1 - o4*a2;
      o2  = o1;
      o1  = sample;
      o4  = o3;
      o3  = out;
    );

bpos=0;

cutoff_mem  = 0;
reso_mem    = 10000;
sinc_hist1  = 20000;
sinc_hist2  = 30000;
sinc_flt    = 40000;
sinc_flt2   = 50000;
sinc_flt3   = 60000;
sinc_flt4   = 70000;
sinc_tmp    = 80000;

current_safety_moog = (1.0 - log(safety_limit_moog * oversampling) / log(20/22050));

@slider
current_safety_moog = (1.0 - log(safety_limit_moog * oversampling) / log(20/22050));

initialize_interpolators();

(filter_type == 1) || (oversampling == 1) ? (
  slider13 > safety_limit_ms20 ? (
    slider_automate(slider13 = safety_limit_ms20);
    warning = 75;
  );
);

(filter_type == 3) || (filter_type == 4) ?
(
  slider13 > current_safety_moog ? (
    slider_automate(slider13 = current_safety_moog);
    warning = 75;
  );
);

israte = 2.0*$pi/srate;

@block
    israte = 1/srate;
    
    cutoff_interpolator.interpolator_block();
    reso_interpolator.interpolator_block();
    morph_interpolator.interpolator_block();
    drive_interpolator.interpolator_block();
    gain_interpolator.interpolator_block();
    morph_phase_interpolator.interpolator_block();
    cutoff_phase_interpolator.interpolator_block();
    
   // Update the oversampling filters when needed.
   ( oversampling != lastOversample ) ? 
   (
     lastOversample = oversampling;   
  
     // Memory for the sincs is located at sinc_tmp, sinc_flt, sinc_flt2, sinc_flt3 and sinc_flt4
     sincFilterL.updateSincFilter(oversampling, 8, sinc_flt,  sinc_tmp);
     sincFilterR.updateSincFilter(oversampling, 8, sinc_flt2, sinc_tmp);
     nTapSinc = oversampling < 5 ? 16 : oversampling*4;
     sincDownL.updateSincDownsampleFilter(oversampling, nTapSinc, sinc_hist1, sinc_flt3);
     sincDownR.updateSincDownsampleFilter(oversampling, nTapSinc, sinc_hist2, sinc_flt4);  
  );

@sample 
 function processSample_ms20(s, choice)
 local()
 instance(BP, HP, BR, LP)
 global()
  (
    (choice == 1) ? (
      s = BP.eval_MS20_nonlinBP_tanh(s)  
    ) : (choice == 2) ? (
      s = HP.eval_MS20_nonlinHP_tanh(s)
    ) : (choice == 3) ? (
      s = BR.eval_MS20_nonlinBR_tanh(s)
    ) : (
      // LP is last and first
      s = LP.eval_MS20_nonlin_tanh(s)
    );
  );
  
  function clamp(v, lb, ub)
  (
    min(ub, max(v, lb))
  );
  
 function processSample_lin(s, choice)
 local()
 instance(BP, HP, BR, LP)
 global()
  (
    (choice == 1) ? (
      s = BP.eval_linearSVF_BP(s)  
    ) : (choice == 2) ? (
      s = HP.eval_linearSVF_HP(s)
    ) : (choice == 3) ? (
      s = BR.eval_linearSVF_BR(s)
    ) : (
      // LP is last and first
      s = LP.eval_linearSVF_LP(s)
    );
  );  

  log10d20_conversion  = .11512925464970228420089957273422; //log(10)/20
  preamp      = exp(log10d20_conversion*drive_interpolator.interpolate());
  inv_preamp  = exp(-log10d20_conversion*drive_interpolator.interpolate() + log10d20_conversion*gain_interpolator.interpolate());

  spl0 *= preamp;
  spl1 *= preamp;
   
  sliderCutoffL = sliderCutoffR = cutoff_interpolator.interpolate();
  sliderReso = reso_interpolator.interpolate();
  sliderMorphL = sliderMorphR = morph_interpolator.interpolate();
  morph_phase = morph_phase_interpolator.interpolate();
  cutoff_phase = cutoff_phase_interpolator.interpolate();
  
  c_lfo_amnt > 0 ? (
    c_lfo_time += israte * c_lfo_speed;
    sliderCutoffL = clamp(sliderCutoffL + c_lfo_amnt * sin(c_lfo_time + cutoff_phase), 0, 1);
    sliderCutoffR = clamp(sliderCutoffR + c_lfo_amnt * sin(c_lfo_time), 0, 1);
  );
  m_lfo_amnt > 0 ? (
    m_lfo_time += israte * m_lfo_speed;
    sliderMorphL = clamp(sliderMorphL + m_lfo_amnt * sin(m_lfo_time + morph_phase), 0, 1);
    sliderMorphR = clamp(sliderMorphR + m_lfo_amnt * sin(m_lfo_time), 0, 1);
  );
  
  filter_type == 0 ? (
    L.LP.init_linearSVF(sliderCutoffL, sliderReso);
    L.HP.a1 = L.BR.a1 = L.BP.a1 = L.LP.a1;
    L.HP.a2 = L.BR.a2 = L.BP.a2 = L.LP.a2;
    L.HP.a3 = L.BR.a3 = L.BP.a3 = L.LP.a3;
    L.HP.k  = L.BR.k  = L.BP.k  = L.LP.k;
    
    R.LP.init_linearSVF(sliderCutoffR, sliderReso);
    R.HP.a1 = R.BR.a1 = R.BP.a1 = R.LP.a1;
    R.HP.a2 = R.BR.a2 = R.BP.a2 = R.LP.a2;
    R.HP.a3 = R.BR.a3 = R.BP.a3 = R.LP.a3;
    R.HP.k  = R.BR.k  = R.BP.k  = R.LP.k;
  ) : ( filter_type == 1 ) ? (
    (oversampling == 1) ? (
      sliderCutoffL = sliderCutoffL > safety_limit_ms20 ? safety_limit_ms20 : sliderCutoffL;
      sliderCutoffR = sliderCutoffR > safety_limit_ms20 ? safety_limit_ms20 : sliderCutoffR;
    );
  
    L.LP.init_MS20(sliderCutoffL, sliderReso);
    L.HP.hh = L.BR.hh = L.BP.hh = L.LP.hh;
    L.HP.h = L.BR.h = L.BP.h = L.LP.h;
    L.HP.k = L.BR.k = L.BP.k = L.LP.k;
    
    R.LP.init_MS20(sliderCutoffR, sliderReso);
    R.HP.hh = R.BR.hh = R.BP.hh = R.LP.hh;
    R.HP.h = R.BR.h = R.BP.h = R.LP.h;
    R.HP.k = R.BR.k = R.BP.k = R.LP.k;
  ) : ( filter_type == 2 ) ? (
    L.LP.init_linearSVF(sliderCutoffL, sliderReso);
    L2.HP.a1 = L2.BR.a1 = L2.BP.a1 = L2.LP.a1 = L.HP.a1 = L.BR.a1 = L.BP.a1 = L.LP.a1;
    L2.HP.a2 = L2.BR.a2 = L2.BP.a2 = L2.LP.a2 = L.HP.a2 = L.BR.a2 = L.BP.a2 = L.LP.a2;
    L2.HP.a3 = L2.BR.a3 = L2.BP.a3 = L2.LP.a3 = L.HP.a3 = L.BR.a3 = L.BP.a3 = L.LP.a3;
    L2.HP.k  = L2.BR.k  = L2.BP.k  = L2.LP.k  = L.HP.k  = L.BR.k  = L.BP.k  = L.LP.k;
    
    R.LP.init_linearSVF(sliderCutoffR, sliderReso);
    R2.HP.a1 = R2.BR.a1 = R2.BP.a1 = R2.LP.a1 = R.HP.a1 = R.BR.a1 = R.BP.a1 = R.LP.a1;
    R2.HP.a2 = R2.BR.a2 = R2.BP.a2 = R2.LP.a2 = R.HP.a2 = R.BR.a2 = R.BP.a2 = R.LP.a2;
    R2.HP.a3 = R2.BR.a3 = R2.BP.a3 = R2.LP.a3 = R.HP.a3 = R.BR.a3 = R.BP.a3 = R.LP.a3;
    R2.HP.k  = R2.BR.k  = R2.BP.k  = R2.LP.k  = R.HP.k  = R.BR.k  = R.BP.k  = R.LP.k;
  ) : ( filter_type == 3 ) ? (
    sliderCutoffL = sliderCutoffL > current_safety_moog ? current_safety_moog : sliderCutoffL;
    sliderCutoffR = sliderCutoffR > current_safety_moog ? current_safety_moog : sliderCutoffR;
  
    L.moog.init_moog(sliderCutoffL, sliderReso);
    R.moog.init_moog(sliderCutoffR, sliderReso);
  ) : ( filter_type == 4 ) ? (
    sliderCutoffL = sliderCutoffL > current_safety_moog ? current_safety_moog : sliderCutoffL;
    sliderCutoffR = sliderCutoffR > current_safety_moog ? current_safety_moog : sliderCutoffR;
    
    L.moog2.init_moog2(sliderCutoffL, sliderReso);
    R.moog2.init_moog2(sliderCutoffR, sliderReso);
  );
  
  filter_choiceL = floor(sliderMorphL*4);
  frac_morphL = sliderMorphL*4 - filter_choiceL;
  i_morphL = 1.0 - frac_morphL;

  filter_choiceR = floor(sliderMorphR*4);
  frac_morphR = sliderMorphR*4 - filter_choiceR;
  i_morphR = 1.0 - frac_morphR;
  
  // MS-20
  ( oversampling > 1 ) ? (
    sincFilterL.advanceSinc(spl0);
    sincFilterR.advanceSinc(spl1);
    
    loop( oversampling,
      ssl = sincFilterL.getSubSample();
      ssr = sincFilterR.getSubSample();
      
      filter_type == 0 ? (
        ssl = L.processSample_lin(ssl, filter_choiceL) * i_morphL + L.processSample_lin(ssl, filter_choiceL + 1) * frac_morphL;
        ssr = R.processSample_lin(ssr, filter_choiceR) * i_morphR + R.processSample_lin(ssr, filter_choiceR + 1) * frac_morphR;
      ) : ( filter_type == 1 ) ? (
        ssl = L.processSample_ms20(ssl, filter_choiceL) * i_morphL + L.processSample_ms20(ssl, filter_choiceL + 1) * frac_morphL;
        ssr = R.processSample_ms20(ssr, filter_choiceR) * i_morphR + R.processSample_ms20(ssr, filter_choiceR + 1) * frac_morphR;
      ) : ( filter_type == 2 ) ? (
        ssl = L.processSample_lin(ssl, filter_choiceL) * i_morphL + L.processSample_lin(ssl, filter_choiceL + 1) * frac_morphL;
        ssr = R.processSample_lin(ssr, filter_choiceR) * i_morphR + R.processSample_lin(ssr, filter_choiceR + 1) * frac_morphR;
        ssl = L2.processSample_lin(ssl, filter_choiceL) * i_morphL + L2.processSample_lin(ssl, filter_choiceL + 1) * frac_morphL;
        ssr = R2.processSample_lin(ssr, filter_choiceR) * i_morphR + R2.processSample_lin(ssr, filter_choiceR + 1) * frac_morphR;
      ) : ( filter_type == 3 ) ? (
        ssl = L.moog.mix_moog(ssl, filter_choiceL, frac_morphL);
        ssr = R.moog.mix_moog(ssr, filter_choiceR, frac_morphR);
      ) : ( filter_type == 4 ) ? (
        ssl = L.moog2.mix_moog2(ssl, filter_choiceL, frac_morphL);
        ssr = R.moog2.mix_moog2(ssr, filter_choiceR, frac_morphR);
      );
      
      sincDownL.advanceHist(ssl);
      sincDownR.advanceHist(ssr);
    );
    
    spl0 = sincDownL.sincDownSample();
    spl1 = sincDownR.sincDownSample();
  ) : (
    filter_type == 0 ? (
      spl0 = L.processSample_lin(spl0, filter_choiceL) * i_morphL + L.processSample_lin(spl0, filter_choiceL + 1) * frac_morphL;
      spl1 = R.processSample_lin(spl1, filter_choiceR) * i_morphR + R.processSample_lin(spl1, filter_choiceR + 1) * frac_morphR;
    ) : ( filter_type == 1 ) ? (
      spl0 = L.processSample_ms20(spl0, filter_choiceL) * i_morphL + L.processSample_ms20(spl0, filter_choiceL + 1) * frac_morphL;
      spl1 = R.processSample_ms20(spl1, filter_choiceR) * i_morphR + R.processSample_ms20(spl1, filter_choiceR + 1) * frac_morphR;
    ) : ( filter_type == 2 ) ? (
      spl0 = L.processSample_lin(spl0, filter_choiceL) * i_morphL + L.processSample_lin(spl0, filter_choiceL + 1) * frac_morphL;
      spl1 = R.processSample_lin(spl1, filter_choiceR) * i_morphR + R.processSample_lin(spl1, filter_choiceR + 1) * frac_morphR;
      spl0 = L2.processSample_lin(spl0, filter_choiceL) * i_morphL + L2.processSample_lin(spl0, filter_choiceL + 1) * frac_morphL;
      spl1 = R2.processSample_lin(spl1, filter_choiceR) * i_morphR + R2.processSample_lin(spl1, filter_choiceR + 1) * frac_morphR;
    ) : ( filter_type == 3 ) ? (
      spl0 = L.moog.mix_moog(spl0, filter_choiceL, frac_morphL);
      spl1 = R.moog.mix_moog(spl1, filter_choiceR, frac_morphR);
    ) : ( filter_type == 4 ) ? (
      spl0 = L.moog2.mix_moog2(spl0, filter_choiceL, frac_morphL);
      spl1 = R.moog2.mix_moog2(spl1, filter_choiceR, frac_morphR);
    );
  );
  
  spl0 *= inv_preamp;
  spl1 *= inv_preamp;
  
@gfx
xs = 10;
ys = 10;

gfx_set(0, 0, 0, 0);
gfx_rect(0, 0, gfx_w, gfx_h);
gfx_set(1, 1, 1, 1);
gfx_x = xs;
gfx_y = ys;
current_setting = slider13;
center = .5 * srate * exp( (1-current_setting) * log(20/22050) );
c_lfo_amnt > 0 ? (
  bottom = .5 * srate * exp( (1-max(0, current_setting - c_lfo_amnt) ) * log(20/22050) );
  top = .5 * srate * exp( (1-min(1,current_setting + c_lfo_amnt)) * log(20/22050) );
  gfx_printf("Cutoff: %d Hz [LFO: %d Hz - %d Hz]", center, bottom, top );
) : (
  gfx_printf("Cutoff: %d Hz", center );
);
dx = 40;

gfx_x = xs;
gfx_y = ys + 25;
gfx_printf("LP");

gfx_x = xs+dx;
gfx_y = ys + 25;
gfx_printf("BP");

gfx_x = xs+2*dx;
gfx_y = ys + 25;
gfx_printf("HP");

gfx_x = xs+3*dx;
gfx_y = ys + 25;
gfx_printf("BR");

gfx_x = xs+4*dx;
gfx_y = ys + 25;
gfx_printf("LP");

gfx_y = ys + 40;
gfx_line(xs, gfx_y, xs+4*dx, gfx_y);

xc = xs + 4*morph*dx;
gfx_line(xc, gfx_y - 5, xc, gfx_y + 5);

gfx_a = .4;
gfx_rect(xc - 4*m_lfo_amnt*dx, gfx_y - 5, ceil(8*m_lfo_amnt*dx), 10);

gfx_x = 0;
gfx_y = ys + 50;

warning > 0 ? (
  gfx_x = 0;
  gfx_y += 25;
  gfx_a = warning / 75;
  gfx_printf("Warning, cutoff clamped! Without oversampling, this non-linear filter cannot safely go higher.");
  warning -= 1;
);

