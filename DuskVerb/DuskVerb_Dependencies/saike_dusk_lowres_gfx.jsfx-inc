//
//
// last_cap = mouse_cap;
// last_mouse_x = mouse_x;
// last_mouse_y = mouse_y;

@init
function pixel_rect(x, y, w, h, filled)
(
  filled == 1 ? (
    gfx_rect(x_offset + x * blit_scale, y_offset + y * blit_scale, w * blit_scale, h * blit_scale);
  ) : (
    gfx_rect(x_offset + (x + 1) * blit_scale, y_offset + y * blit_scale, (w - 2) * blit_scale, blit_scale);
    gfx_rect(x_offset + x * blit_scale, y_offset + (y + h - 1) * blit_scale, w * blit_scale, blit_scale);
    gfx_rect(x_offset + (x + w - 1) * blit_scale, y_offset + y * blit_scale, blit_scale, (h - 1) * blit_scale);
    gfx_rect(x_offset + x * blit_scale, y_offset + y * blit_scale, blit_scale, (h - 1) * blit_scale);
  );
);

function unfilled_rect(x, y, w, h)
(
  gfx_rect((x + 1), y, w - 2, 1);
  gfx_rect(x, y + h - 1, w, 1);
  gfx_rect((x + w - 1), y, 1, h - 1);
  gfx_rect(x, y, 1, h - 1);
);

function init_xy(s1, s1_min, s1_max, s1_shape, s2, s2_min, s2_max, s2_shape)
instance(
  sl1, sl2,
  sl1_min, sl2_min,
  sl1_max, sl2_max,
  sl1_shape, sl2_shape,
)
local()
global()
(
  sl1 = s1;
  sl1_min = s1_min;
  sl1_max = s1_max;
  sl1_shape = s1_shape;
  sl2 = s2;
  sl2_min = s2_min;
  sl2_max = s2_max;
  sl2_shape = s2_shape;
);

function blank_text_area(x, y, w, h)
local(old_dest)
global(gfx_dest, bigger_font)
instance()
(
  bigger_font ? (
    old_dest = gfx_dest;
    gfx_dest = 15;
    gfx_rect(x + x, y + y, w + w, h + h);
    gfx_dest = old_dest;
  );
);

function txt_blit(str, x, y)
local(ix, row, c_char, src_x, src_y, x_start, xc, yc, old_dest)
global(gfx_dest, gfx_x, gfx_a, bigger_font)
(
  bigger_font ? (
    old_dest = gfx_dest;
    gfx_dest = 15;
    gfx_a = 0.5;
    y = floor(y);
  );

  ix = 0;
  xc = x;
  yc = y;
  
  x_start = x;
  loop(strlen(str),
    c_char = str_getchar(str, ix, 'cu');
    (c_char == 10) ? (
      yc += 5;
      xc = x_start;
    ) : (
      row = floor(c_char / 16);
      src_y = 5 * row;
      src_x = 5 * (c_char - row * 16);
      
      bigger_font ? (
        gfx_blit(14, 1, 0, src_x + src_x, src_y + src_y, 10, 10, xc + xc, yc + yc, 10, 10, 0, 0); 
      ) : (
        gfx_blit(12, 1, 0, src_x, src_y, 5, 5, xc, yc, 5, 5, 0, 0); 
      );
      xc += 5;
    );
    ix += 1;
  );
  
  bigger_font ? (
    gfx_dest = old_dest;
  );
  
  gfx_x = xc;
);

function txt_measure(str)
local(ix, row, c_char, src_x, src_y, xc, yc, tx_max)
global()
instance(txt_w, txt_h)
(
  ix = 0;
  xc = 0;
  yc = 0;
  tx_max = 0;
  loop(strlen(str),
    c_char = str_getchar(str, ix, 'cu');
    (c_char == 10) ? (
      yc += 5;
      tx_max = max(xc, tx_max);
      xc = 0;
    ) : (
      row = floor(c_char / 16);
      src_y = 5 * row;
      src_x = 5 * (c_char - row * 16);
      xc += 5;
    );
    ix += 1;
  );
  
  txt_w = max(xc, tx_max);
  txt_h = yc + 5;
);

// last_cap = mouse_cap;
// last_mouse_x = mouse_x;
// last_mouse_y = mouse_y;

function set_hint(hint)
global(gfx_x, gfx_y, mouse_x, mouse_y, mouse_cap)
local()
instance(lx, ly, lc, hint_time, current_hint, delta_time)
(
  ( (lc != mouse_cap) || ( abs(lx - mouse_x) + abs(ly - mouse_y)) > 0 ) ? (
    hint_time = 0;
  ) : (      
    (hint != 0) ? (
      current_hint = hint;
      hint_time = hint_time + delta_time;
      hint_time = min(1, hint_time)
    ) : (
      0
    )
  );
  
  lx = mouse_x;
  ly = mouse_y;
  lc = mouse_cap;
);


function draw_hints()
global(
  gfx_x, gfx_y, mouse_x, mouse_y, img_w, img_h,
  x_offset, y_offset, blit_scale,
)
local(w, h)
instance(hint_time, current_hint, last_global_time, global_time, delta_time, txt_w, txt_h)
(
  this.set_hint(0);

  global_time = time_precise();
  delta_time = global_time - last_global_time;
  last_global_time = global_time;

  ( hint_time > .99 ) ? (
    gfx_x = (mouse_x - x_offset + 15) / blit_scale;
    gfx_y = (mouse_y - y_offset + 15) / blit_scale;
    
    this.txt_measure(current_hint);
    
    ( gfx_x > 0.5 * img_w ) ? gfx_x = (mouse_x - x_offset + 15) / blit_scale - txt_w - 8;
    ( gfx_y > 0.5 * img_h ) ? gfx_y = (mouse_y - y_offset) / blit_scale - txt_h;

    gfx_set(0.05, 0.05, 0.1, 1.0);
    gfx_rect(gfx_x - 1, gfx_y - 1, txt_w + 2, txt_h + 1);
    gfx_set(0.5, 0.5, 0.5, 0.6);
    txt_blit(current_hint, gfx_x, gfx_y);
  );
);

function init_slider_ui(s, s_min, s_max, s_shape)
local()
instance(sl, sl_min, sl_max, sl_shape)
global()
(
  sl = s;
  sl_min = s_min;
  sl_max = s_max;
  sl_shape = s_shape;
);

function _multi_slider_calc_x_pos(slider_value)
local(slider_norm)
global()
instance(_min, _max, _log)
(
  slider_value = min(_max, max(_min, slider_value));
  _log ? (
    (log(slider_value) - log(_min)) / (log(_max) - log(_min))
  ) : (
    (slider_value - _min) / (_max - _min)
  );
);

function _multi_slider_x_pos_to_window(slider_norm)
local()
global()
instance(_x, _w)
(
  _x + slider_norm * (_w - 3) + 1
);

// This function must always be called *before* every multi_slider_notch_ui.
function multi_slider_notch_nearest(me, slider_idx)
local(dist, slider_x)
instance(_nearest, _min_dist, mouse_nx)
global()
(
  dist = mouse_nx - this._multi_slider_x_pos_to_window(this._multi_slider_calc_x_pos(slider(slider_idx)));
  dist *= dist;
  
  (dist < _min_dist) ? (
    _nearest = me;
    _min_dist = dist;
  );
);

// This function must always be called *after* multi_slider_ui.
function multi_slider_notch_ui(me, slider_idx, hint, r, g, b)
local(over_notch, slider_value, slider_norm, over_notch, slider_x, mul, dx)
instance(
  _x, _y, _w, _h,
  _min, _max, _log,
  _nearest,
  mouse_nx, mouse_ny,
  over,
  smooth_highlight,
  txt_w, txt_h,
  hzstr,
)
global(
  hinter.set_hint,
  blit_scale,
  mouse_x, mouse_y, last_mouse_x, last_mouse_y, mouse_cap, last_cap, cap_mode,
)
(
  slider_value = slider(slider_idx);
  slider_norm = this._multi_slider_calc_x_pos(slider_value);
  slider_x = this._multi_slider_x_pos_to_window(slider_norm);
  over_notch = (mouse_nx > (slider_x - 4)) && (mouse_nx < (slider_x + 4)) && (mouse_ny > _y) && (mouse_ny < (_y + _h)) && (_nearest == me);
  
  gfx_set(r, g, b, smooth_highlight + 0.15 * over_notch + 0.2);
  gfx_rect(slider_x, _y + 1, 1, _h - 2);

  (over_notch && (mouse_cap & 1) && (cap_mode == 0) && (last_cap == 0)) ? (
    cap_mode = me;
  );
  
  (cap_mode == me) ? (
    (mouse_cap == 0) ? (
      cap_mode = 0;
    ) : (
      mul = 1;
      hzstr = slider_value < 1000 ? sprintf(8, "%d", slider_value) : sprintf(8, "%.1fk", slider_value / 1000);
      this.txt_measure(hzstr);
      gfx_set(1, 1, 1, 0.4);
      txt_blit(hzstr, _x + 0.5 * _w - 0.5 * txt_w, _y + 1 + 0.5 * _h - 0.5 * txt_h);
      
      (mouse_cap & 8) ? mul *= 0.125;  // SHIFT
      (mouse_cap & 4) ? mul *= 0.1666666666667;  // CTRL
    
      dx = (mouse_x - last_mouse_x) / (blit_scale * (_w - 3));
      slider_norm = max(0, min(1, slider_norm + mul * dx));
      
      _log ? (
        slider_automate(slider(slider_idx) = exp(log(_min) + slider_norm * (log(_max) - log(_min))));
      ) : (
        slider_automate(slider(slider_idx) = _min + slider_norm * (_max - _min));
      );
    );
  );
  
  (over_notch && hint) ? (
    hinter.set_hint(hint);
  );
);

function multi_slider_ui(me, x, y, w, h, s_min, s_max, s_log)
local()
instance(
  _x, _y, _w, _h,
  mouse_nx, mouse_ny,
  smooth_highlight,
  over,
  _min, _max, _log,
  _nearest, _min_dist,
)
global(
  x_offset, y_offset, blit_scale,
  mouse_x, mouse_y,
)
(
  _min = s_min; _max = s_max; _log = s_log;
  _x = x; _y = y; _w = w; _h = h;
  _nearest = -1; _min_dist = 10000;
  
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + h));
  
  smooth_highlight = 0.7 * smooth_highlight + 0.3 * (0.03 + 0.08 * over);
  
  gfx_set(1, 1, 1, smooth_highlight);
  gfx_rect(x, y, w, h);
  unfilled_rect(x, y, w, h);
);

function slider_ui(me, x, y, w, h, label, hint)
local(mouse_nx, mouse_ny, over, dx, dy, ix, mul)
instance(
  sl, sl_min, sl_max,
  smooth_highlight,
  txt_w, txt_h,
)
global(
  x_offset, y_offset, blit_scale,
  mouse_x, mouse_y, mouse_cap,
  cap_mode, last_cap, last_mouse_x
  x_val, x_norm,
  hinter.set_hint,
)
(
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + h));
  
  (over && hint) ? (
    hinter.set_hint(hint);
  );
  
  smooth_highlight = 0.7 * smooth_highlight + 0.3 * (0.03 + 0.08 * over);
  
  gfx_set(1, 1, 1, smooth_highlight);
  gfx_rect(x, y, w, h);
  unfilled_rect(x, y, w, h);
  
  x_val = slider(sl);
  x_norm = (x_val - sl_min) / (sl_max - sl_min);
  
  (over && (mouse_cap & 1) && (cap_mode == 0) && (last_cap == 0)) ? (
    cap_mode = me;
  );
  
  ix = x + 2;
  loop(floor(0.5 * (w - 3)),
    ix <= floor(x_norm * w) ? (
      gfx_set(1, 1, 1, smooth_highlight);
    ) : (
      gfx_set(0, 0, 0, smooth_highlight);
    );
    gfx_line(ix, y + 2, ix, y + h - 3);
    ix += 2;
  );
  
  (cap_mode == me) ? (
    (mouse_cap == 0) ? (
      cap_mode = 0;
    ) : (
      mul = 1;
      (mouse_cap & 8) ? mul *= 0.125;  // SHIFT
      (mouse_cap & 4) ? mul *= 0.1666666666667;  // CTRL
    
      dx = (mouse_x - last_mouse_x) / (blit_scale * w);
      x_norm = max(0, min(1, x_norm + mul * dx));
      
      slider_automate(slider(sl) = sl_min + x_norm * (sl_max - sl_min));
    );
  );
  
  this.txt_measure(label);
  
  gfx_set(1, 1, 1, 0.4);
  txt_blit(label, x + 0.5 * w - 0.5 * txt_w, y + 1 + 0.5 * h - 0.5 * txt_h);
);


function xy_pad(me, x, y, w, h)
instance(
  sl1, sl1_min, sl1_max,
  sl2, sl2_min, sl2_max,
  smooth_highlight,
  sum_dx, sum_dy,
)
local(x_val, y_val, xc, yc, x_norm, y_norm, mouse_nx, mouse_ny, over, dx, dy)
global(x_offset, y_offset, blit_scale, mouse_x, mouse_y, mouse_cap, cap_mode, last_cap, last_mouse_x, last_mouse_y)
(
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + h));
  
  smooth_highlight = 0.7 * smooth_highlight + 0.3 * (0.03 + 0.04 * over);
  
  gfx_set(1, 1, 1, smooth_highlight);
  gfx_rect(x, y, w, h);
  unfilled_rect(x, y, w, h);
  
  x_val = slider(sl1);
  y_val = slider(sl2);
  x_norm = (x_val - sl1_min) / (sl1_max - sl1_min);
  y_norm = (y_val - sl2_min) / (sl2_max - sl2_min);
  
  xc = x + x_norm * (w - 3) + 1;
  yc = y + (1.0 - y_norm) * (h - 3) + 1;
  gfx_rect(xc, y + 1, 1, h - 2);
  gfx_rect(x + 1, yc, w - 2, 1);
  
  (over && (mouse_cap & 1) && (cap_mode == 0) && (last_cap == 0)) ? (
    cap_mode = me;
  );
  
  (cap_mode == me) ? (
    (mouse_cap == 0) ? (
      cap_mode = 0;
      sum_dx = 0;
      sum_dy = 0;
    ) : (
      dx = (mouse_x - last_mouse_x) / (blit_scale * w);
      dy = - (mouse_y - last_mouse_y) / (blit_scale * h);
      
      (mouse_cap & 8) ? dy = 0;  // SHIFT
      (mouse_cap & 4) ? dx = 0;  // CTRL
      
      sum_dx += dx;
      sum_dy += dy;
      
      x_norm = max(0, min(1, x_norm + dx));
      y_norm = max(0, min(1, y_norm + dy));
      
      slider(sl1) = sl1_min + x_norm * (sl1_max - sl1_min);
      slider(sl2) = sl2_min + y_norm * (sl2_max - sl2_min);
      
      // One we moved the most should be last touched
      slider_automate(slider(abs(sum_dx) > abs(sum_dy) ? sl2 : sl1));
      slider_automate(slider(abs(sum_dx) > abs(sum_dy) ? sl1 : sl2));
    );
  );
);


function go_to_pixel(x, y)
(
  gfx_x = x_offset + x * blit_scale;
  gfx_y = y_offset + y * blit_scale;
);


function choice_toggle(x, y, w, select, slider_idx, hint)
instance(intensity)
local(current, mouse_nx, mouse_ny, over)
global(
  gfx_r, gfx_g, gfx_b, gfx_a, gfx_x mouse_cap, last_cap, mouse_x, mouse_y,
  x_offset, y_offset, blit_scale,
  hinter.set_hint,
)
(
  current = slider(slider_idx);
  mouse_nx = (mouse_x - x_offset) / blit_scale;
  mouse_ny = (mouse_y - y_offset) / blit_scale;
  over = (mouse_nx > x) && (mouse_nx < (x + w)) && (mouse_ny > y) && (mouse_ny < (y + w));

  (over && hint) ? (
    hinter.set_hint(hint);
  );

  intensity = 0.2 * (0.2 + 0.15 * over) + 0.8 * intensity;
  gfx_r = gfx_g = gfx_b = intensity; gfx_a = 0.8;
  (select == current) ? (
    gfx_rect(x, y, w, w);
  ) : (
    unfilled_rect(x, y, w, w);
  );
  gfx_x += 5;
  
  ((last_cap == 0) && (mouse_cap == 1) && over) ? (
    slider_automate(slider(slider_idx) = select);
  );
);

